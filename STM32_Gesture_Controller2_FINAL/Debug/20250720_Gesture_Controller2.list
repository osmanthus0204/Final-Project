
20250720_Gesture_Controller2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d80  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08017020  08017020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017268  08017268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017270  08017270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017274  08017274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000017c  24000000  08017278  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0004ff54  2400017c  080173f4  0001917c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240500d0  080173f4  0001a0d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001917c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037968  00000000  00000000  000191aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008171  00000000  00000000  00050b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002678  00000000  00000000  00058c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d3b  00000000  00000000  0005b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000e028  00000000  00000000  0005d03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c1af  00000000  00000000  0006b063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d35b  00000000  00000000  000a7212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022456d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a614  00000000  00000000  002245b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005c  00000000  00000000  0022ebc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400017c 	.word	0x2400017c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017008 	.word	0x08017008

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000180 	.word	0x24000180
 80002dc:	08017008 	.word	0x08017008

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80006b0:	4b16      	ldr	r3, [pc, #88]	@ (800070c <MX_DCMI_Init+0x60>)
 80006b2:	4a17      	ldr	r2, [pc, #92]	@ (8000710 <MX_DCMI_Init+0x64>)
 80006b4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_DCMI_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_DCMI_Init+0x60>)
 80006be:	2220      	movs	r2, #32
 80006c0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_DCMI_Init+0x60>)
 80006c4:	2280      	movs	r2, #128	@ 0x80
 80006c6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80006c8:	4b10      	ldr	r3, [pc, #64]	@ (800070c <MX_DCMI_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_DCMI_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <MX_DCMI_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_DCMI_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <MX_DCMI_Init+0x60>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_DCMI_Init+0x60>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <MX_DCMI_Init+0x60>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_DCMI_Init+0x60>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_DCMI_Init+0x60>)
 80006fa:	f002 fc0b 	bl	8002f14 <HAL_DCMI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 fede 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	24000198 	.word	0x24000198
 8000710:	48020000 	.word	0x48020000

08000714 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	@ 0x30
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a55      	ldr	r2, [pc, #340]	@ (8000888 <HAL_DCMI_MspInit+0x174>)
 8000732:	4293      	cmp	r3, r2
 8000734:	f040 80a4 	bne.w	8000880 <HAL_DCMI_MspInit+0x16c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000738:	4b54      	ldr	r3, [pc, #336]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 800073a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800073e:	4a53      	ldr	r2, [pc, #332]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000748:	4b50      	ldr	r3, [pc, #320]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 800074a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000756:	4b4d      	ldr	r3, [pc, #308]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075c:	4a4b      	ldr	r2, [pc, #300]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 800075e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000762:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000766:	4b49      	ldr	r3, [pc, #292]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000774:	4b45      	ldr	r3, [pc, #276]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 8000776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077a:	4a44      	ldr	r2, [pc, #272]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000780:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000784:	4b41      	ldr	r3, [pc, #260]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b3e      	ldr	r3, [pc, #248]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 8000794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000798:	4a3c      	ldr	r2, [pc, #240]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a2:	4b3a      	ldr	r3, [pc, #232]	@ (800088c <HAL_DCMI_MspInit+0x178>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> DCMI_PIXCLK
    PH9     ------> DCMI_D0
    PH12     ------> DCMI_D3
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80007b0:	23f0      	movs	r3, #240	@ 0xf0
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007c0:	230d      	movs	r3, #13
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4831      	ldr	r0, [pc, #196]	@ (8000890 <HAL_DCMI_MspInit+0x17c>)
 80007cc:	f006 f91a 	bl	8006a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 80007d0:	f44f 43be 	mov.w	r3, #24320	@ 0x5f00
 80007d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e2:	230d      	movs	r3, #13
 80007e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4829      	ldr	r0, [pc, #164]	@ (8000894 <HAL_DCMI_MspInit+0x180>)
 80007ee:	f006 f909 	bl	8006a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007f2:	2340      	movs	r3, #64	@ 0x40
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000802:	230d      	movs	r3, #13
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4822      	ldr	r0, [pc, #136]	@ (8000898 <HAL_DCMI_MspInit+0x184>)
 800080e:	f006 f8f9 	bl	8006a04 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream1;
 8000812:	4b22      	ldr	r3, [pc, #136]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 8000814:	4a22      	ldr	r2, [pc, #136]	@ (80008a0 <HAL_DCMI_MspInit+0x18c>)
 8000816:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000818:	4b20      	ldr	r3, [pc, #128]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 800081a:	224b      	movs	r2, #75	@ 0x4b
 800081c:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081e:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 800082c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000830:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 8000834:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000838:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 800083c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000840:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000854:	4811      	ldr	r0, [pc, #68]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 8000856:	f002 fde9 	bl	800342c <HAL_DMA_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_DCMI_MspInit+0x150>
    {
      Error_Handler();
 8000860:	f000 fe30 	bl	80014c4 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 8000868:	649a      	str	r2, [r3, #72]	@ 0x48
 800086a:	4a0c      	ldr	r2, [pc, #48]	@ (800089c <HAL_DCMI_MspInit+0x188>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2105      	movs	r1, #5
 8000874:	204e      	movs	r0, #78	@ 0x4e
 8000876:	f002 faad 	bl	8002dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800087a:	204e      	movs	r0, #78	@ 0x4e
 800087c:	f002 fac4 	bl	8002e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3730      	adds	r7, #48	@ 0x30
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	48020000 	.word	0x48020000
 800088c:	58024400 	.word	0x58024400
 8000890:	58022000 	.word	0x58022000
 8000894:	58021c00 	.word	0x58021c00
 8000898:	58020000 	.word	0x58020000
 800089c:	240001e8 	.word	0x240001e8
 80008a0:	40020028 	.word	0x40020028

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_DMA_Init+0x4c>)
 80008ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008b0:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <MX_DMA_Init+0x4c>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <MX_DMA_Init+0x4c>)
 80008bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2105      	movs	r1, #5
 80008cc:	200b      	movs	r0, #11
 80008ce:	f002 fa81 	bl	8002dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008d2:	200b      	movs	r0, #11
 80008d4:	f002 fa98 	bl	8002e08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2105      	movs	r1, #5
 80008dc:	200c      	movs	r0, #12
 80008de:	f002 fa79 	bl	8002dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80008e2:	200c      	movs	r0, #12
 80008e4:	f002 fa90 	bl	8002e08 <HAL_NVIC_EnableIRQ>

}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	58024400 	.word	0x58024400

080008f4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_FMC_Init+0x98>)
 800090e:	4a20      	ldr	r2, [pc, #128]	@ (8000990 <MX_FMC_Init+0x9c>)
 8000910:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000912:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <MX_FMC_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <MX_FMC_Init+0x98>)
 800091a:	2201      	movs	r2, #1
 800091c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_FMC_Init+0x98>)
 8000920:	2208      	movs	r2, #8
 8000922:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000924:	4b19      	ldr	r3, [pc, #100]	@ (800098c <MX_FMC_Init+0x98>)
 8000926:	2210      	movs	r2, #16
 8000928:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800092a:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_FMC_Init+0x98>)
 800092c:	2240      	movs	r2, #64	@ 0x40
 800092e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000930:	4b16      	ldr	r3, [pc, #88]	@ (800098c <MX_FMC_Init+0x98>)
 8000932:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000936:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000938:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_FMC_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_FMC_Init+0x98>)
 8000940:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000944:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_FMC_Init+0x98>)
 8000948:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_FMC_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 8000958:	2309      	movs	r3, #9
 800095a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 800095c:	2306      	movs	r3, #6
 800095e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 8;
 8000960:	2308      	movs	r3, #8
 8000962:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000964:	2303      	movs	r3, #3
 8000966:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 8000968:	2303      	movs	r3, #3
 800096a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 800096c:	2303      	movs	r3, #3
 800096e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_FMC_Init+0x98>)
 8000976:	f00a fb9f 	bl	800b0b8 <HAL_SDRAM_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000980:	f000 fda0 	bl	80014c4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	24000260 	.word	0x24000260
 8000990:	52004140 	.word	0x52004140

08000994 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	b0b8      	sub	sp, #224	@ 0xe0
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80009aa:	4b5b      	ldr	r3, [pc, #364]	@ (8000b18 <HAL_FMC_MspInit+0x184>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f040 80ae 	bne.w	8000b10 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 80009b4:	4b58      	ldr	r3, [pc, #352]	@ (8000b18 <HAL_FMC_MspInit+0x184>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	22c0      	movs	r2, #192	@ 0xc0
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f015 fb8a 	bl	80160dc <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80009c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4618      	mov	r0, r3
 80009de:	f008 fd3f 	bl	8009460 <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80009e8:	f000 fd6c 	bl	80014c4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80009ec:	4b4b      	ldr	r3, [pc, #300]	@ (8000b1c <HAL_FMC_MspInit+0x188>)
 80009ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80009f2:	4a4a      	ldr	r2, [pc, #296]	@ (8000b1c <HAL_FMC_MspInit+0x188>)
 80009f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80009fc:	4b47      	ldr	r3, [pc, #284]	@ (8000b1c <HAL_FMC_MspInit+0x188>)
 80009fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000a0a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a24:	230c      	movs	r3, #12
 8000a26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a2e:	4619      	mov	r1, r3
 8000a30:	483b      	ldr	r0, [pc, #236]	@ (8000b20 <HAL_FMC_MspInit+0x18c>)
 8000a32:	f005 ffe7 	bl	8006a04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000a36:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a50:	230c      	movs	r3, #12
 8000a52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a56:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4831      	ldr	r0, [pc, #196]	@ (8000b24 <HAL_FMC_MspInit+0x190>)
 8000a5e:	f005 ffd1 	bl	8006a04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000a62:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a82:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a86:	4619      	mov	r1, r3
 8000a88:	4827      	ldr	r0, [pc, #156]	@ (8000b28 <HAL_FMC_MspInit+0x194>)
 8000a8a:	f005 ffbb 	bl	8006a04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000a8e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aae:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481d      	ldr	r0, [pc, #116]	@ (8000b2c <HAL_FMC_MspInit+0x198>)
 8000ab6:	f005 ffa5 	bl	8006a04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aba:	2301      	movs	r3, #1
 8000abc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000adc:	4619      	mov	r1, r3
 8000ade:	4814      	ldr	r0, [pc, #80]	@ (8000b30 <HAL_FMC_MspInit+0x19c>)
 8000ae0:	f005 ff90 	bl	8006a04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afc:	230c      	movs	r3, #12
 8000afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b02:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b06:	4619      	mov	r1, r3
 8000b08:	480a      	ldr	r0, [pc, #40]	@ (8000b34 <HAL_FMC_MspInit+0x1a0>)
 8000b0a:	f005 ff7b 	bl	8006a04 <HAL_GPIO_Init>
 8000b0e:	e000      	b.n	8000b12 <HAL_FMC_MspInit+0x17e>
    return;
 8000b10:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b12:	37e0      	adds	r7, #224	@ 0xe0
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	24000294 	.word	0x24000294
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58021000 	.word	0x58021000
 8000b24:	58021800 	.word	0x58021800
 8000b28:	58020c00 	.word	0x58020c00
 8000b2c:	58021400 	.word	0x58021400
 8000b30:	58020800 	.word	0x58020800
 8000b34:	58021c00 	.word	0x58021c00

08000b38 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b40:	f7ff ff28 	bl	8000994 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b5c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	4a06      	ldr	r2, [pc, #24]	@ (8000b7c <vApplicationGetIdleTaskMemory+0x30>)
 8000b62:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2280      	movs	r2, #128	@ 0x80
 8000b68:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	240002a8 	.word	0x240002a8
 8000b7c:	24000348 	.word	0x24000348

08000b80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b09c      	sub	sp, #112	@ 0x70
 8000b84:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <MX_FREERTOS_Init+0xb0>)
 8000b88:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000b8c:	461d      	mov	r5, r3
 8000b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f011 ff3f 	bl	8012a24 <osThreadCreate>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a22      	ldr	r2, [pc, #136]	@ (8000c34 <MX_FREERTOS_Init+0xb4>)
 8000baa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myListenerTask */
  osThreadDef(myListenerTask, ListenerTask, osPriorityNormal, 0, 128);
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <MX_FREERTOS_Init+0xb8>)
 8000bae:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000bb2:	461d      	mov	r5, r3
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myListenerTaskHandle = osThreadCreate(osThread(myListenerTask), NULL);
 8000bc0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f011 ff2c 	bl	8012a24 <osThreadCreate>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <MX_FREERTOS_Init+0xbc>)
 8000bd0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myControllerTas */
  osThreadDef(myControllerTas, ControllerTask, osPriorityNormal, 0, 128);
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MX_FREERTOS_Init+0xc0>)
 8000bd4:	f107 041c 	add.w	r4, r7, #28
 8000bd8:	461d      	mov	r5, r3
 8000bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myControllerTasHandle = osThreadCreate(osThread(myControllerTas), NULL);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f011 ff19 	bl	8012a24 <osThreadCreate>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a13      	ldr	r2, [pc, #76]	@ (8000c44 <MX_FREERTOS_Init+0xc4>)
 8000bf6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myPresenterTask */
  osThreadDef(myPresenterTask, PresenterTask, osPriorityNormal, 0, 128);
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_FREERTOS_Init+0xc8>)
 8000bfa:	463c      	mov	r4, r7
 8000bfc:	461d      	mov	r5, r3
 8000bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPresenterTaskHandle = osThreadCreate(osThread(myPresenterTask), NULL);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f011 ff08 	bl	8012a24 <osThreadCreate>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <MX_FREERTOS_Init+0xcc>)
 8000c18:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	Model_ModeInit();
 8000c1a:	f001 fdd5 	bl	80027c8 <Model_ModeInit>
	Model_KeyBoardInit();
 8000c1e:	f001 fd9d 	bl	800275c <Model_KeyBoardInit>
	Model_ServoMotorInit();
 8000c22:	f001 fdfd 	bl	8002820 <Model_ServoMotorInit>
  /* USER CODE END RTOS_THREADS */

}
 8000c26:	bf00      	nop
 8000c28:	3770      	adds	r7, #112	@ 0x70
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	0801702c 	.word	0x0801702c
 8000c34:	24000298 	.word	0x24000298
 8000c38:	08017058 	.word	0x08017058
 8000c3c:	2400029c 	.word	0x2400029c
 8000c40:	08017084 	.word	0x08017084
 8000c44:	240002a0 	.word	0x240002a0
 8000c48:	080170b0 	.word	0x080170b0
 8000c4c:	240002a4 	.word	0x240002a4

08000c50 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c58:	f014 fbb6 	bl	80153c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f011 ff2d 	bl	8012abc <osDelay>
 8000c62:	e7fb      	b.n	8000c5c <StartDefaultTask+0xc>

08000c64 <ListenerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ListenerTask */
void ListenerTask(void const * argument)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ListenerTask */
	Listener_Init();
 8000c6c:	f001 fd60 	bl	8002730 <Listener_Init>
	/* Infinite loop */
	for(;;)
	{
		Listener_Execute();
 8000c70:	f001 fd6c 	bl	800274c <Listener_Execute>
		//		Presenter_SendKeyToPC(0x04);
		osDelay(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f011 ff21 	bl	8012abc <osDelay>
		Listener_Execute();
 8000c7a:	bf00      	nop
 8000c7c:	e7f8      	b.n	8000c70 <ListenerTask+0xc>

08000c7e <ControllerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ControllerTask */
void ControllerTask(void const * argument)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControllerTask */
	Controller_Init();
 8000c86:	f001 f9d0 	bl	800202a <Controller_Init>


	/* Infinite loop */
	for(;;)
	{
		Controller_Execute();
 8000c8a:	f001 f9d4 	bl	8002036 <Controller_Execute>
		osDelay(1);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f011 ff14 	bl	8012abc <osDelay>
		Controller_Execute();
 8000c94:	bf00      	nop
 8000c96:	e7f8      	b.n	8000c8a <ControllerTask+0xc>

08000c98 <PresenterTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PresenterTask */
void PresenterTask(void const * argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PresenterTask */
	Presenter_Init();
 8000ca0:	f001 fdf4 	bl	800288c <Presenter_Init>

	/* Infinite loop */
	for(;;)
	{
		//		Presenter_SendKeyToPC(0x04);
		Presenter_Execute();
 8000ca4:	f001 fe06 	bl	80028b4 <Presenter_Execute>
		osDelay(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f011 ff07 	bl	8012abc <osDelay>
		Presenter_Execute();
 8000cae:	bf00      	nop
 8000cb0:	e7f8      	b.n	8000ca4 <PresenterTask+0xc>
	...

08000cb4 <MX_GPIO_Init>:
     PC9   ------> RCC_MCO_2
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	@ 0x38
 8000cb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cca:	4b72      	ldr	r3, [pc, #456]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd0:	4a70      	ldr	r2, [pc, #448]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cda:	4b6e      	ldr	r3, [pc, #440]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce4:	623b      	str	r3, [r7, #32]
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cee:	4a69      	ldr	r2, [pc, #420]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000cf0:	f043 0310 	orr.w	r3, r3, #16
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf8:	4b66      	ldr	r3, [pc, #408]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b63      	ldr	r3, [pc, #396]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0c:	4a61      	ldr	r2, [pc, #388]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d16:	4b5f      	ldr	r3, [pc, #380]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b5b      	ldr	r3, [pc, #364]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2a:	4a5a      	ldr	r2, [pc, #360]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d34:	4b57      	ldr	r3, [pc, #348]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	4b54      	ldr	r3, [pc, #336]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d48:	4a52      	ldr	r2, [pc, #328]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d52:	4b50      	ldr	r3, [pc, #320]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d60:	4b4c      	ldr	r3, [pc, #304]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d66:	4a4b      	ldr	r2, [pc, #300]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d70:	4b48      	ldr	r3, [pc, #288]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d84:	4a43      	ldr	r2, [pc, #268]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8e:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da2:	4a3c      	ldr	r2, [pc, #240]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dac:	4b39      	ldr	r3, [pc, #228]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dba:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	4a34      	ldr	r2, [pc, #208]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000dc2:	f043 0320 	orr.w	r3, r3, #32
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dca:	4b32      	ldr	r3, [pc, #200]	@ (8000e94 <MX_GPIO_Init+0x1e0>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f003 0320 	and.w	r3, r3, #32
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2110      	movs	r1, #16
 8000ddc:	482e      	ldr	r0, [pc, #184]	@ (8000e98 <MX_GPIO_Init+0x1e4>)
 8000dde:	f005 ffc1 	bl	8006d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de8:	482c      	ldr	r0, [pc, #176]	@ (8000e9c <MX_GPIO_Init+0x1e8>)
 8000dea:	f005 ffbb 	bl	8006d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2140      	movs	r1, #64	@ 0x40
 8000df2:	482b      	ldr	r0, [pc, #172]	@ (8000ea0 <MX_GPIO_Init+0x1ec>)
 8000df4:	f005 ffb6 	bl	8006d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ILI9341_DC_Pin */
  GPIO_InitStruct.Pin = ILI9341_DC_Pin;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ILI9341_DC_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4822      	ldr	r0, [pc, #136]	@ (8000e98 <MX_GPIO_Init+0x1e4>)
 8000e10:	f005 fdf8 	bl	8006a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	481e      	ldr	r0, [pc, #120]	@ (8000ea4 <MX_GPIO_Init+0x1f0>)
 8000e2a:	f005 fdeb 	bl	8006a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4815      	ldr	r0, [pc, #84]	@ (8000e9c <MX_GPIO_Init+0x1e8>)
 8000e48:	f005 fddc 	bl	8006a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin;
 8000e4c:	2340      	movs	r3, #64	@ 0x40
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ILI9341_CS_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	480f      	ldr	r0, [pc, #60]	@ (8000ea0 <MX_GPIO_Init+0x1ec>)
 8000e64:	f005 fdce 	bl	8006a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_GPIO_Init+0x1e8>)
 8000e86:	f005 fdbd 	bl	8006a04 <HAL_GPIO_Init>

}
 8000e8a:	bf00      	nop
 8000e8c:	3738      	adds	r7, #56	@ 0x38
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	58024400 	.word	0x58024400
 8000e98:	58020400 	.word	0x58020400
 8000e9c:	58020800 	.word	0x58020800
 8000ea0:	58021000 	.word	0x58021000
 8000ea4:	58021800 	.word	0x58021800

08000ea8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 8000eb0:	1d39      	adds	r1, r7, #4
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <__io_putchar+0x20>)
 8000eba:	f00c f801 	bl	800cec0 <HAL_UART_Transmit>

	return ch;
 8000ebe:	687b      	ldr	r3, [r7, #4]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2404b73c 	.word	0x2404b73c

08000ecc <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI1) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <HAL_SPI_TxCpltCallback+0x20>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d102      	bne.n	8000ee4 <HAL_SPI_TxCpltCallback+0x18>
		printf("SPI DMA Complete!\n");
 8000ede:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <HAL_SPI_TxCpltCallback+0x24>)
 8000ee0:	f014 fffa 	bl	8015ed8 <puts>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013000 	.word	0x40013000
 8000ef0:	080170cc 	.word	0x080170cc

08000ef4 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	captureFlag = 1;
 8000efc:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <HAL_DCMI_FrameEventCallback+0x1c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
	printf("Complete Oneshot Frame Capture!\n");
 8000f02:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <HAL_DCMI_FrameEventCallback+0x20>)
 8000f04:	f014 ffe8 	bl	8015ed8 <puts>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2404b54c 	.word	0x2404b54c
 8000f14:	080170e0 	.word	0x080170e0

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f1c:	f000 fa58 	bl	80013d0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f001 fe14 	bl	8002b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f826 	bl	8000f74 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f28:	f000 f8b0 	bl	800108c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2c:	f7ff fec2 	bl	8000cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f30:	f7ff fcb8 	bl	80008a4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f34:	f000 facc 	bl	80014d0 <MX_SPI1_Init>
  MX_FMC_Init();
 8000f38:	f7ff fcdc 	bl	80008f4 <MX_FMC_Init>
  MX_DCMI_Init();
 8000f3c:	f7ff fbb6 	bl	80006ac <MX_DCMI_Init>
  MX_USART1_UART_Init();
 8000f40:	f000 ff64 	bl	8001e0c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f44:	f000 fe1e 	bl	8001b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f48:	f000 fe68 	bl	8001c1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 8000f4c:	f014 fa3c 	bl	80153c8 <MX_USB_DEVICE_Init>


	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)&camBuf, 320*240/2);
 8000f50:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <main+0x54>)
 8000f52:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000f56:	2102      	movs	r1, #2
 8000f58:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <main+0x58>)
 8000f5a:	f002 f855 	bl	8003008 <HAL_DCMI_Start_DMA>
	//   }

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f5e:	f7ff fe0f 	bl	8000b80 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f62:	f011 fd58 	bl	8012a16 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000f66:	bf00      	nop
 8000f68:	e7fd      	b.n	8000f66 <main+0x4e>
 8000f6a:	bf00      	nop
 8000f6c:	24000548 	.word	0x24000548
 8000f70:	24000198 	.word	0x24000198

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b09c      	sub	sp, #112	@ 0x70
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	224c      	movs	r2, #76	@ 0x4c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f015 f8aa 	bl	80160dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f015 f8a4 	bl	80160dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f94:	2002      	movs	r0, #2
 8000f96:	f007 f987 	bl	80082a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b38      	ldr	r3, [pc, #224]	@ (8001080 <SystemClock_Config+0x10c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a37      	ldr	r2, [pc, #220]	@ (8001080 <SystemClock_Config+0x10c>)
 8000fa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b35      	ldr	r3, [pc, #212]	@ (8001080 <SystemClock_Config+0x10c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	4b33      	ldr	r3, [pc, #204]	@ (8001084 <SystemClock_Config+0x110>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb8:	4a32      	ldr	r2, [pc, #200]	@ (8001084 <SystemClock_Config+0x110>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fc0:	4b30      	ldr	r3, [pc, #192]	@ (8001084 <SystemClock_Config+0x110>)
 8000fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fcc:	bf00      	nop
 8000fce:	4b2c      	ldr	r3, [pc, #176]	@ (8001080 <SystemClock_Config+0x10c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fda:	d1f8      	bne.n	8000fce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2321      	movs	r3, #33	@ 0x21
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ff6:	23c0      	movs	r3, #192	@ 0xc0
 8000ff8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001006:	2308      	movs	r3, #8
 8001008:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800100a:	2300      	movs	r3, #0
 800100c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001016:	4618      	mov	r0, r3
 8001018:	f007 f990 	bl	800833c <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001022:	f000 fa4f 	bl	80014c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	233f      	movs	r3, #63	@ 0x3f
 8001028:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2303      	movs	r3, #3
 800102c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001032:	2308      	movs	r3, #8
 8001034:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001036:	2340      	movs	r3, #64	@ 0x40
 8001038:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800103a:	2340      	movs	r3, #64	@ 0x40
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800103e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001042:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001044:	2340      	movs	r3, #64	@ 0x40
 8001046:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2104      	movs	r1, #4
 800104c:	4618      	mov	r0, r3
 800104e:	f007 fdcf 	bl	8008bf0 <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001058:	f000 fa34 	bl	80014c4 <Error_Handler>
  }
  __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <SystemClock_Config+0x114>)
 800105e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001060:	4a09      	ldr	r2, [pc, #36]	@ (8001088 <SystemClock_Config+0x114>)
 8001062:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001066:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_4);
 8001068:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800106c:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8001070:	2001      	movs	r0, #1
 8001072:	f007 ff73 	bl	8008f5c <HAL_RCC_MCOConfig>
}
 8001076:	bf00      	nop
 8001078:	3770      	adds	r7, #112	@ 0x70
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	58024800 	.word	0x58024800
 8001084:	58000400 	.word	0x58000400
 8001088:	58024400 	.word	0x58024400

0800108c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /** Enables PLL2P clock output
  */
  __HAL_RCC_PLL2_CONFIG(25, 192, 2, 2, 2);
 8001090:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <PeriphCommonClock_Config+0x48>)
 8001092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001094:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001098:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <PeriphCommonClock_Config+0x48>)
 800109a:	f443 33c8 	orr.w	r3, r3, #102400	@ 0x19000
 800109e:	6293      	str	r3, [r2, #40]	@ 0x28
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <PeriphCommonClock_Config+0x48>)
 80010a2:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <PeriphCommonClock_Config+0x4c>)
 80010a4:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_PLL2_VCIRANGE(RCC_PLL2VCIRANGE_0);
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <PeriphCommonClock_Config+0x48>)
 80010a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <PeriphCommonClock_Config+0x48>)
 80010ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80010b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_RCC_PLL2_VCORANGE(RCC_PLL2VCOWIDE);
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <PeriphCommonClock_Config+0x48>)
 80010b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b6:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <PeriphCommonClock_Config+0x48>)
 80010b8:	f023 0320 	bic.w	r3, r3, #32
 80010bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  __HAL_RCC_PLL2_ENABLE();
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <PeriphCommonClock_Config+0x48>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <PeriphCommonClock_Config+0x48>)
 80010c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010c8:	6013      	str	r3, [r2, #0]
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	58024400 	.word	0x58024400
 80010d8:	010102bf 	.word	0x010102bf

080010dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]


		if (huart->Instance == USART1 && (send_ready == 0)) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4ab2      	ldr	r2, [pc, #712]	@ (80013b4 <HAL_UART_RxCpltCallback+0x2d8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	f040 815e 	bne.w	80013ac <HAL_UART_RxCpltCallback+0x2d0>
 80010f0:	4bb1      	ldr	r3, [pc, #708]	@ (80013b8 <HAL_UART_RxCpltCallback+0x2dc>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 8158 	bne.w	80013ac <HAL_UART_RxCpltCallback+0x2d0>
			switch (rx_data) {
 80010fc:	4baf      	ldr	r3, [pc, #700]	@ (80013bc <HAL_UART_RxCpltCallback+0x2e0>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	3b43      	subs	r3, #67	@ 0x43
 8001102:	2b2b      	cmp	r3, #43	@ 0x2b
 8001104:	f200 814c 	bhi.w	80013a0 <HAL_UART_RxCpltCallback+0x2c4>
 8001108:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <HAL_UART_RxCpltCallback+0x34>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001365 	.word	0x08001365
 8001114:	08001383 	.word	0x08001383
 8001118:	080013a1 	.word	0x080013a1
 800111c:	080013a1 	.word	0x080013a1
 8001120:	080013a1 	.word	0x080013a1
 8001124:	080013a1 	.word	0x080013a1
 8001128:	080013a1 	.word	0x080013a1
 800112c:	080013a1 	.word	0x080013a1
 8001130:	080013a1 	.word	0x080013a1
 8001134:	080013a1 	.word	0x080013a1
 8001138:	080013a1 	.word	0x080013a1
 800113c:	080013a1 	.word	0x080013a1
 8001140:	080013a1 	.word	0x080013a1
 8001144:	080013a1 	.word	0x080013a1
 8001148:	080013a1 	.word	0x080013a1
 800114c:	080013a1 	.word	0x080013a1
 8001150:	080013a1 	.word	0x080013a1
 8001154:	080013a1 	.word	0x080013a1
 8001158:	080013a1 	.word	0x080013a1
 800115c:	080013a1 	.word	0x080013a1
 8001160:	080013a1 	.word	0x080013a1
 8001164:	080013a1 	.word	0x080013a1
 8001168:	080013a1 	.word	0x080013a1
 800116c:	080013a1 	.word	0x080013a1
 8001170:	080013a1 	.word	0x080013a1
 8001174:	080013a1 	.word	0x080013a1
 8001178:	080013a1 	.word	0x080013a1
 800117c:	080013a1 	.word	0x080013a1
 8001180:	080013a1 	.word	0x080013a1
 8001184:	080013a1 	.word	0x080013a1
 8001188:	080011c1 	.word	0x080011c1
 800118c:	080011df 	.word	0x080011df
 8001190:	080011fd 	.word	0x080011fd
 8001194:	0800121b 	.word	0x0800121b
 8001198:	08001239 	.word	0x08001239
 800119c:	08001257 	.word	0x08001257
 80011a0:	08001275 	.word	0x08001275
 80011a4:	08001293 	.word	0x08001293
 80011a8:	080012b1 	.word	0x080012b1
 80011ac:	080012cf 	.word	0x080012cf
 80011b0:	080012ed 	.word	0x080012ed
 80011b4:	0800130b 	.word	0x0800130b
 80011b8:	08001329 	.word	0x08001329
 80011bc:	08001347 	.word	0x08001347

			// keyboard
			case 'a':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 80011c0:	4b7f      	ldr	r3, [pc, #508]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	2101      	movs	r1, #1
 80011c8:	4618      	mov	r0, r3
 80011ca:	f011 fdb3 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_LEFT, 0);
 80011ce:	4b7d      	ldr	r3, [pc, #500]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f011 fdac 	bl	8012d34 <osMessagePut>
				break;
 80011dc:	e0e1      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'b':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 80011de:	4b78      	ldr	r3, [pc, #480]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f011 fda4 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_RIGHT, 0);
 80011ec:	4b75      	ldr	r3, [pc, #468]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f011 fd9d 	bl	8012d34 <osMessagePut>
				break;
 80011fa:	e0d2      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'c':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 80011fc:	4b70      	ldr	r3, [pc, #448]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2200      	movs	r2, #0
 8001202:	2101      	movs	r1, #1
 8001204:	4618      	mov	r0, r3
 8001206:	f011 fd95 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_UP, 0);
 800120a:	4b6e      	ldr	r3, [pc, #440]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	2102      	movs	r1, #2
 8001212:	4618      	mov	r0, r3
 8001214:	f011 fd8e 	bl	8012d34 <osMessagePut>
				break;
 8001218:	e0c3      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'd':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 800121a:	4b69      	ldr	r3, [pc, #420]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f011 fd86 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_DOWN, 0);
 8001228:	4b66      	ldr	r3, [pc, #408]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	2103      	movs	r1, #3
 8001230:	4618      	mov	r0, r3
 8001232:	f011 fd7f 	bl	8012d34 <osMessagePut>
				break;
 8001236:	e0b4      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'e':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 8001238:	4b61      	ldr	r3, [pc, #388]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	2101      	movs	r1, #1
 8001240:	4618      	mov	r0, r3
 8001242:	f011 fd77 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_ZERO, 0);
 8001246:	4b5f      	ldr	r3, [pc, #380]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2200      	movs	r2, #0
 800124c:	2104      	movs	r1, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f011 fd70 	bl	8012d34 <osMessagePut>
				break;
 8001254:	e0a5      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'f':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 8001256:	4b5a      	ldr	r3, [pc, #360]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2200      	movs	r2, #0
 800125c:	2101      	movs	r1, #1
 800125e:	4618      	mov	r0, r3
 8001260:	f011 fd68 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_ONE, 0);
 8001264:	4b57      	ldr	r3, [pc, #348]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2200      	movs	r2, #0
 800126a:	2105      	movs	r1, #5
 800126c:	4618      	mov	r0, r3
 800126e:	f011 fd61 	bl	8012d34 <osMessagePut>
				break;
 8001272:	e096      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'g':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 8001274:	4b52      	ldr	r3, [pc, #328]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	2101      	movs	r1, #1
 800127c:	4618      	mov	r0, r3
 800127e:	f011 fd59 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_TWO, 0);
 8001282:	4b50      	ldr	r3, [pc, #320]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	2106      	movs	r1, #6
 800128a:	4618      	mov	r0, r3
 800128c:	f011 fd52 	bl	8012d34 <osMessagePut>
				break;
 8001290:	e087      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'h':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 8001292:	4b4b      	ldr	r3, [pc, #300]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2200      	movs	r2, #0
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f011 fd4a 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_THREE, 0);
 80012a0:	4b48      	ldr	r3, [pc, #288]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	2107      	movs	r1, #7
 80012a8:	4618      	mov	r0, r3
 80012aa:	f011 fd43 	bl	8012d34 <osMessagePut>
				break;
 80012ae:	e078      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'i':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 80012b0:	4b43      	ldr	r3, [pc, #268]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	2101      	movs	r1, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f011 fd3b 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_FOUR, 0);
 80012be:	4b41      	ldr	r3, [pc, #260]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	2108      	movs	r1, #8
 80012c6:	4618      	mov	r0, r3
 80012c8:	f011 fd34 	bl	8012d34 <osMessagePut>
				break;
 80012cc:	e069      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'j':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 80012ce:	4b3c      	ldr	r3, [pc, #240]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	2101      	movs	r1, #1
 80012d6:	4618      	mov	r0, r3
 80012d8:	f011 fd2c 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_FIVE, 0);
 80012dc:	4b39      	ldr	r3, [pc, #228]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	2109      	movs	r1, #9
 80012e4:	4618      	mov	r0, r3
 80012e6:	f011 fd25 	bl	8012d34 <osMessagePut>
				break;
 80012ea:	e05a      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'k':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 80012ec:	4b34      	ldr	r3, [pc, #208]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2200      	movs	r2, #0
 80012f2:	2101      	movs	r1, #1
 80012f4:	4618      	mov	r0, r3
 80012f6:	f011 fd1d 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_SIX, 0);
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	210a      	movs	r1, #10
 8001302:	4618      	mov	r0, r3
 8001304:	f011 fd16 	bl	8012d34 <osMessagePut>
				break;
 8001308:	e04b      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'l':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 800130a:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f011 fd0e 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_SEVEN, 0);
 8001318:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	210b      	movs	r1, #11
 8001320:	4618      	mov	r0, r3
 8001322:	f011 fd07 	bl	8012d34 <osMessagePut>
				break;
 8001326:	e03c      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'm':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2200      	movs	r2, #0
 800132e:	2101      	movs	r1, #1
 8001330:	4618      	mov	r0, r3
 8001332:	f011 fcff 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_EIGHT, 0);
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	210c      	movs	r1, #12
 800133e:	4618      	mov	r0, r3
 8001340:	f011 fcf8 	bl	8012d34 <osMessagePut>
				break;
 8001344:	e02d      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'n':
				osMessagePut(modeEventMsgBox, S_KEYBOARD_MODE, 0);
 8001346:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	2101      	movs	r1, #1
 800134e:	4618      	mov	r0, r3
 8001350:	f011 fcf0 	bl	8012d34 <osMessagePut>
				osMessagePut(keyBoardEventMsgBox, EVENT_NINE, 0);
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2200      	movs	r2, #0
 800135a:	210d      	movs	r1, #13
 800135c:	4618      	mov	r0, r3
 800135e:	f011 fce9 	bl	8012d34 <osMessagePut>
				break;
 8001362:	e01e      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>

			// motor
			case 'C':
				osMessagePut(modeEventMsgBox, S_MOTOR_MODE, 0);
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f011 fce1 	bl	8012d34 <osMessagePut>
				osMessagePut(servoMotorEventMsgBox, EVENT_SERVO_RIGHT, 0);
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_UART_RxCpltCallback+0x2ec>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	2101      	movs	r1, #1
 800137a:	4618      	mov	r0, r3
 800137c:	f011 fcda 	bl	8012d34 <osMessagePut>
				break;
 8001380:	e00f      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			case 'D':
				osMessagePut(modeEventMsgBox, S_MOTOR_MODE, 0);
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f011 fcd2 	bl	8012d34 <osMessagePut>
				osMessagePut(servoMotorEventMsgBox, EVENT_SERVO_LEFT, 0);
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_UART_RxCpltCallback+0x2ec>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f011 fccb 	bl	8012d34 <osMessagePut>
				break;
 800139e:	e000      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x2c6>
			default:break;
 80013a0:	bf00      	nop
			}
			HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	4905      	ldr	r1, [pc, #20]	@ (80013bc <HAL_UART_RxCpltCallback+0x2e0>)
 80013a6:	4809      	ldr	r0, [pc, #36]	@ (80013cc <HAL_UART_RxCpltCallback+0x2f0>)
 80013a8:	f00b fe18 	bl	800cfdc <HAL_UART_Receive_IT>
		}

}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40011000 	.word	0x40011000
 80013b8:	2404b551 	.word	0x2404b551
 80013bc:	2404b548 	.word	0x2404b548
 80013c0:	2404b824 	.word	0x2404b824
 80013c4:	2404b814 	.word	0x2404b814
 80013c8:	2404b82c 	.word	0x2404b82c
 80013cc:	2404b73c 	.word	0x2404b73c

080013d0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80013e2:	f001 fd1f 	bl	8002e24 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013e6:	2301      	movs	r3, #1
 80013e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80013f2:	231f      	movs	r3, #31
 80013f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80013f6:	2387      	movs	r3, #135	@ 0x87
 80013f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80013fe:	2300      	movs	r3, #0
 8001400:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001402:	2301      	movs	r3, #1
 8001404:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001406:	2301      	movs	r3, #1
 8001408:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001412:	463b      	mov	r3, r7
 8001414:	4618      	mov	r0, r3
 8001416:	f001 fd3d 	bl	8002e94 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800141a:	2304      	movs	r3, #4
 800141c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 800141e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001422:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8001424:	2318      	movs	r3, #24
 8001426:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001428:	2300      	movs	r3, #0
 800142a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800142c:	2301      	movs	r3, #1
 800142e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001430:	2303      	movs	r3, #3
 8001432:	72fb      	strb	r3, [r7, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001434:	463b      	mov	r3, r7
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fd2c 	bl	8002e94 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800143c:	2004      	movs	r0, #4
 800143e:	f001 fd09 	bl	8002e54 <HAL_MPU_Enable>

}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	static uint16_t us_counter = 0;

	if (htim->Instance == TIM2 && flag == 1) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800145c:	d11c      	bne.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x4c>
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d117      	bne.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x4c>
		if (++us_counter >= 20000) {  // 1us * 20000 = 20ms
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001472:	801a      	strh	r2, [r3, #0]
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800147c:	4293      	cmp	r3, r2
 800147e:	d90b      	bls.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x4c>
			us_counter = 0;
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001482:	2200      	movs	r2, #0
 8001484:	801a      	strh	r2, [r3, #0]
			flag = 0;
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
			send_ready=1;
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8001492:	480a      	ldr	r0, [pc, #40]	@ (80014bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001494:	f00a fa92 	bl	800b9bc <HAL_TIM_Base_Stop>
	}



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a08      	ldr	r2, [pc, #32]	@ (80014c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0x5a>
  {
    HAL_IncTick();
 80014a2:	f001 fb8f 	bl	8002bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2404b550 	.word	0x2404b550
 80014b4:	2404b552 	.word	0x2404b552
 80014b8:	2404b551 	.word	0x2404b551
 80014bc:	2404b6a4 	.word	0x2404b6a4
 80014c0:	40014800 	.word	0x40014800

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <Error_Handler+0x8>

080014d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014d4:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <MX_SPI1_Init+0xa4>)
 80014d6:	4a28      	ldr	r2, [pc, #160]	@ (8001578 <MX_SPI1_Init+0xa8>)
 80014d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <MX_SPI1_Init+0xa4>)
 80014dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80014e2:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <MX_SPI1_Init+0xa4>)
 80014e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ea:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <MX_SPI1_Init+0xa4>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f0:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <MX_SPI1_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <MX_SPI1_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <MX_SPI1_Init+0xa4>)
 80014fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001502:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800150a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150c:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <MX_SPI1_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001512:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_SPI1_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001520:	2200      	movs	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800152a:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <MX_SPI1_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001530:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001536:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800153c:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <MX_SPI1_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <MX_SPI1_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_SPI1_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <MX_SPI1_Init+0xa4>)
 8001562:	f009 fde5 	bl	800b130 <HAL_SPI_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800156c:	f7ff ffaa 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2404b554 	.word	0x2404b554
 8001578:	40013000 	.word	0x40013000

0800157c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0ba      	sub	sp, #232	@ 0xe8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	22c0      	movs	r2, #192	@ 0xc0
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f014 fd9d 	bl	80160dc <memset>
  if(spiHandle->Instance==SPI1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a49      	ldr	r2, [pc, #292]	@ (80016cc <HAL_SPI_MspInit+0x150>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	f040 808b 	bne.w	80016c4 <HAL_SPI_MspInit+0x148>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80015ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80015ba:	2319      	movs	r3, #25
 80015bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 80015be:	23c8      	movs	r3, #200	@ 0xc8
 80015c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80015da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015de:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4618      	mov	r0, r3
 80015e6:	f007 ff3b 	bl	8009460 <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 80015f0:	f7ff ff68 	bl	80014c4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f4:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <HAL_SPI_MspInit+0x154>)
 80015f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015fa:	4a35      	ldr	r2, [pc, #212]	@ (80016d0 <HAL_SPI_MspInit+0x154>)
 80015fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001600:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001604:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <HAL_SPI_MspInit+0x154>)
 8001606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800160a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <HAL_SPI_MspInit+0x154>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001618:	4a2d      	ldr	r2, [pc, #180]	@ (80016d0 <HAL_SPI_MspInit+0x154>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001622:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <HAL_SPI_MspInit+0x154>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8001630:	23a0      	movs	r3, #160	@ 0xa0
 8001632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001648:	2305      	movs	r3, #5
 800164a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001652:	4619      	mov	r1, r3
 8001654:	481f      	ldr	r0, [pc, #124]	@ (80016d4 <HAL_SPI_MspInit+0x158>)
 8001656:	f005 f9d5 	bl	8006a04 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800165a:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 800165c:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <HAL_SPI_MspInit+0x160>)
 800165e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001660:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 8001662:	2226      	movs	r2, #38	@ 0x26
 8001664:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 8001668:	2240      	movs	r2, #64	@ 0x40
 800166a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 8001674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001678:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001698:	480f      	ldr	r0, [pc, #60]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 800169a:	f001 fec7 	bl	800342c <HAL_DMA_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80016a4:	f7ff ff0e 	bl	80014c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 80016ac:	679a      	str	r2, [r3, #120]	@ 0x78
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <HAL_SPI_MspInit+0x15c>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2105      	movs	r1, #5
 80016b8:	2023      	movs	r0, #35	@ 0x23
 80016ba:	f001 fb8b 	bl	8002dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016be:	2023      	movs	r0, #35	@ 0x23
 80016c0:	f001 fba2 	bl	8002e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016c4:	bf00      	nop
 80016c6:	37e8      	adds	r7, #232	@ 0xe8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40013000 	.word	0x40013000
 80016d0:	58024400 	.word	0x58024400
 80016d4:	58020000 	.word	0x58020000
 80016d8:	2404b5dc 	.word	0x2404b5dc
 80016dc:	40020010 	.word	0x40020010

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_MspInit+0x38>)
 80016e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_MspInit+0x38>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_MspInit+0x38>)
 80016f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	210f      	movs	r1, #15
 8001708:	f06f 0001 	mvn.w	r0, #1
 800170c:	f001 fb62 	bl	8002dd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	58024400 	.word	0x58024400

0800171c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08e      	sub	sp, #56	@ 0x38
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	d844      	bhi.n	80017b4 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 800172a:	2200      	movs	r2, #0
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	2076      	movs	r0, #118	@ 0x76
 8001730:	f001 fb50 	bl	8002dd4 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001734:	2076      	movs	r0, #118	@ 0x76
 8001736:	f001 fb67 	bl	8002e08 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800173a:	4a24      	ldr	r2, [pc, #144]	@ (80017cc <HAL_InitTick+0xb0>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001740:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <HAL_InitTick+0xb4>)
 8001742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001746:	4a22      	ldr	r2, [pc, #136]	@ (80017d0 <HAL_InitTick+0xb4>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800174c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001750:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <HAL_InitTick+0xb4>)
 8001752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800175e:	f107 020c 	add.w	r2, r7, #12
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f007 fe37 	bl	80093dc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800176e:	f007 fe1f 	bl	80093b0 <HAL_RCC_GetPCLK2Freq>
 8001772:	4603      	mov	r3, r0
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800177a:	4a16      	ldr	r2, [pc, #88]	@ (80017d4 <HAL_InitTick+0xb8>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0c9b      	lsrs	r3, r3, #18
 8001782:	3b01      	subs	r3, #1
 8001784:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <HAL_InitTick+0xbc>)
 8001788:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <HAL_InitTick+0xc0>)
 800178a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_InitTick+0xbc>)
 800178e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001792:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001794:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <HAL_InitTick+0xbc>)
 8001796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001798:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_InitTick+0xbc>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a0:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_InitTick+0xbc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80017a6:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <HAL_InitTick+0xbc>)
 80017a8:	f00a f8b1 	bl	800b90e <HAL_TIM_Base_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <HAL_InitTick+0xa6>
 80017b2:	e001      	b.n	80017b8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e005      	b.n	80017c4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80017b8:	4807      	ldr	r0, [pc, #28]	@ (80017d8 <HAL_InitTick+0xbc>)
 80017ba:	f00a f927 	bl	800ba0c <HAL_TIM_Base_Start_IT>
 80017be:	4603      	mov	r3, r0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3738      	adds	r7, #56	@ 0x38
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2400000c 	.word	0x2400000c
 80017d0:	58024400 	.word	0x58024400
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	2404b654 	.word	0x2404b654
 80017dc:	40014800 	.word	0x40014800

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <NMI_Handler+0x4>

080017e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <MemManage_Handler+0x4>

080017f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <UsageFault_Handler+0x4>

08001808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <DMA1_Stream0_IRQHandler+0x10>)
 800181e:	f003 f92f 	bl	8004a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2404b5dc 	.word	0x2404b5dc

0800182c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <DMA1_Stream1_IRQHandler+0x10>)
 8001832:	f003 f925 	bl	8004a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	240001e8 	.word	0x240001e8

08001840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <TIM2_IRQHandler+0x10>)
 8001846:	f00a fac9 	bl	800bddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2404b6a4 	.word	0x2404b6a4

08001854 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <TIM3_IRQHandler+0x10>)
 800185a:	f00a fabf 	bl	800bddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2404b6f0 	.word	0x2404b6f0

08001868 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <SPI1_IRQHandler+0x10>)
 800186e:	f009 fd83 	bl	800b378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2404b554 	.word	0x2404b554

0800187c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <USART1_IRQHandler+0x10>)
 8001882:	f00b fbf7 	bl	800d074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2404b73c 	.word	0x2404b73c

08001890 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <DCMI_IRQHandler+0x10>)
 8001896:	f001 fc79 	bl	800318c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000198 	.word	0x24000198

080018a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <OTG_FS_IRQHandler+0x10>)
 80018aa:	f005 fbb5 	bl	8007018 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2404fa8c 	.word	0x2404fa8c

080018b8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <TIM17_IRQHandler+0x10>)
 80018be:	f00a fa8d 	bl	800bddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2404b654 	.word	0x2404b654

080018cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e00a      	b.n	80018f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018de:	f3af 8000 	nop.w
 80018e2:	4601      	mov	r1, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf0      	blt.n	80018de <_read+0x12>
  }

  return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e009      	b.n	800192c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fac1 	bl	8000ea8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf1      	blt.n	8001918 <_write+0x12>
  }
  return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_close>:

int _close(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001966:	605a      	str	r2, [r3, #4]
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_isatty>:

int _isatty(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f014 fc2c 	bl	8016234 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	24080000 	.word	0x24080000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	2404b6a0 	.word	0x2404b6a0
 8001a10:	240500d0 	.word	0x240500d0

08001a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a18:	4b43      	ldr	r3, [pc, #268]	@ (8001b28 <SystemInit+0x114>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a1e:	4a42      	ldr	r2, [pc, #264]	@ (8001b28 <SystemInit+0x114>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a28:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <SystemInit+0x118>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	2b06      	cmp	r3, #6
 8001a32:	d807      	bhi.n	8001a44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a34:	4b3d      	ldr	r3, [pc, #244]	@ (8001b2c <SystemInit+0x118>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 030f 	bic.w	r3, r3, #15
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b2c <SystemInit+0x118>)
 8001a3e:	f043 0307 	orr.w	r3, r3, #7
 8001a42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a44:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <SystemInit+0x11c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a39      	ldr	r2, [pc, #228]	@ (8001b30 <SystemInit+0x11c>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a50:	4b37      	ldr	r3, [pc, #220]	@ (8001b30 <SystemInit+0x11c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a56:	4b36      	ldr	r3, [pc, #216]	@ (8001b30 <SystemInit+0x11c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4935      	ldr	r1, [pc, #212]	@ (8001b30 <SystemInit+0x11c>)
 8001a5c:	4b35      	ldr	r3, [pc, #212]	@ (8001b34 <SystemInit+0x120>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a62:	4b32      	ldr	r3, [pc, #200]	@ (8001b2c <SystemInit+0x118>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <SystemInit+0x118>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 030f 	bic.w	r3, r3, #15
 8001a76:	4a2d      	ldr	r2, [pc, #180]	@ (8001b2c <SystemInit+0x118>)
 8001a78:	f043 0307 	orr.w	r3, r3, #7
 8001a7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b30 <SystemInit+0x11c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a84:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <SystemInit+0x11c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a8a:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <SystemInit+0x11c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a90:	4b27      	ldr	r3, [pc, #156]	@ (8001b30 <SystemInit+0x11c>)
 8001a92:	4a29      	ldr	r2, [pc, #164]	@ (8001b38 <SystemInit+0x124>)
 8001a94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a96:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <SystemInit+0x11c>)
 8001a98:	4a28      	ldr	r2, [pc, #160]	@ (8001b3c <SystemInit+0x128>)
 8001a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a9c:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <SystemInit+0x11c>)
 8001a9e:	4a28      	ldr	r2, [pc, #160]	@ (8001b40 <SystemInit+0x12c>)
 8001aa0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aa2:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <SystemInit+0x11c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001aa8:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <SystemInit+0x11c>)
 8001aaa:	4a25      	ldr	r2, [pc, #148]	@ (8001b40 <SystemInit+0x12c>)
 8001aac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <SystemInit+0x11c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <SystemInit+0x11c>)
 8001ab6:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <SystemInit+0x12c>)
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <SystemInit+0x11c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <SystemInit+0x11c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b30 <SystemInit+0x11c>)
 8001ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <SystemInit+0x11c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <SystemInit+0x130>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b48 <SystemInit+0x134>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ade:	d202      	bcs.n	8001ae6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <SystemInit+0x138>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <SystemInit+0x11c>)
 8001ae8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001aec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d113      	bne.n	8001b1c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <SystemInit+0x11c>)
 8001af6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001afa:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <SystemInit+0x11c>)
 8001afc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b00:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <SystemInit+0x13c>)
 8001b06:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <SystemInit+0x11c>)
 8001b0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b12:	4a07      	ldr	r2, [pc, #28]	@ (8001b30 <SystemInit+0x11c>)
 8001b14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00
 8001b2c:	52002000 	.word	0x52002000
 8001b30:	58024400 	.word	0x58024400
 8001b34:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b38:	02020200 	.word	0x02020200
 8001b3c:	01ff0000 	.word	0x01ff0000
 8001b40:	01010280 	.word	0x01010280
 8001b44:	5c001000 	.word	0x5c001000
 8001b48:	ffff0000 	.word	0xffff0000
 8001b4c:	51008108 	.word	0x51008108
 8001b50:	52004000 	.word	0x52004000

08001b54 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <ExitRun0Mode+0x2c>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a08      	ldr	r2, [pc, #32]	@ (8001b80 <ExitRun0Mode+0x2c>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001b64:	bf00      	nop
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <ExitRun0Mode+0x2c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f9      	beq.n	8001b66 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	58024800 	.word	0x58024800

08001b84 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <MX_TIM2_Init+0x94>)
 8001ba4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <MX_TIM2_Init+0x94>)
 8001bac:	222f      	movs	r2, #47	@ 0x2f
 8001bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <MX_TIM2_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <MX_TIM2_Init+0x94>)
 8001bb8:	2209      	movs	r2, #9
 8001bba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <MX_TIM2_Init+0x94>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <MX_TIM2_Init+0x94>)
 8001bc4:	2280      	movs	r2, #128	@ 0x80
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bc8:	4813      	ldr	r0, [pc, #76]	@ (8001c18 <MX_TIM2_Init+0x94>)
 8001bca:	f009 fea0 	bl	800b90e <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bd4:	f7ff fc76 	bl	80014c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	4619      	mov	r1, r3
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <MX_TIM2_Init+0x94>)
 8001be6:	f00a fb15 	bl	800c214 <HAL_TIM_ConfigClockSource>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bf0:	f7ff fc68 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <MX_TIM2_Init+0x94>)
 8001c02:	f00b f861 	bl	800ccc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c0c:	f7ff fc5a 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	2404b6a4 	.word	0x2404b6a4

08001c1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08e      	sub	sp, #56	@ 0x38
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]
 8001c4a:	615a      	str	r2, [r3, #20]
 8001c4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001c50:	4a2d      	ldr	r2, [pc, #180]	@ (8001d08 <MX_TIM3_Init+0xec>)
 8001c52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001c54:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001c56:	22ef      	movs	r2, #239	@ 0xef
 8001c58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001c60:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001c62:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001c66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c68:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c6e:	4b25      	ldr	r3, [pc, #148]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001c70:	2280      	movs	r2, #128	@ 0x80
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c74:	4823      	ldr	r0, [pc, #140]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001c76:	f009 fe4a 	bl	800b90e <HAL_TIM_Base_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c80:	f7ff fc20 	bl	80014c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	481c      	ldr	r0, [pc, #112]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001c92:	f00a fabf 	bl	800c214 <HAL_TIM_ConfigClockSource>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c9c:	f7ff fc12 	bl	80014c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ca0:	4818      	ldr	r0, [pc, #96]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001ca2:	f009 ff2b 	bl	800bafc <HAL_TIM_PWM_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001cac:	f7ff fc0a 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4811      	ldr	r0, [pc, #68]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001cc0:	f00b f802 	bl	800ccc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cca:	f7ff fbfb 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cce:	2360      	movs	r3, #96	@ 0x60
 8001cd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cde:	463b      	mov	r3, r7
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4807      	ldr	r0, [pc, #28]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001ce6:	f00a f981 	bl	800bfec <HAL_TIM_PWM_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001cf0:	f7ff fbe8 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf4:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <MX_TIM3_Init+0xe8>)
 8001cf6:	f000 f84f 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001cfa:	bf00      	nop
 8001cfc:	3738      	adds	r7, #56	@ 0x38
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2404b6f0 	.word	0x2404b6f0
 8001d08:	40000400 	.word	0x40000400

08001d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1c:	d117      	bne.n	8001d4e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <HAL_TIM_Base_MspInit+0x84>)
 8001d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d24:	4a1a      	ldr	r2, [pc, #104]	@ (8001d90 <HAL_TIM_Base_MspInit+0x84>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d2e:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <HAL_TIM_Base_MspInit+0x84>)
 8001d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2105      	movs	r1, #5
 8001d40:	201c      	movs	r0, #28
 8001d42:	f001 f847 	bl	8002dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d46:	201c      	movs	r0, #28
 8001d48:	f001 f85e 	bl	8002e08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d4c:	e01b      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM3)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <HAL_TIM_Base_MspInit+0x88>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d116      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d58:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_TIM_Base_MspInit+0x84>)
 8001d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <HAL_TIM_Base_MspInit+0x84>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_TIM_Base_MspInit+0x84>)
 8001d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	201d      	movs	r0, #29
 8001d7c:	f001 f82a 	bl	8002dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d80:	201d      	movs	r0, #29
 8001d82:	f001 f841 	bl	8002e08 <HAL_NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	58024400 	.word	0x58024400
 8001d94:	40000400 	.word	0x40000400

08001d98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a12      	ldr	r2, [pc, #72]	@ (8001e00 <HAL_TIM_MspPostInit+0x68>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d11e      	bne.n	8001df8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_TIM_MspPostInit+0x6c>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc0:	4a10      	ldr	r2, [pc, #64]	@ (8001e04 <HAL_TIM_MspPostInit+0x6c>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_TIM_MspPostInit+0x6c>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dd8:	2340      	movs	r3, #64	@ 0x40
 8001dda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	4619      	mov	r1, r3
 8001df2:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <HAL_TIM_MspPostInit+0x70>)
 8001df4:	f004 fe06 	bl	8006a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40000400 	.word	0x40000400
 8001e04:	58024400 	.word	0x58024400
 8001e08:	58020800 	.word	0x58020800

08001e0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e10:	4b22      	ldr	r3, [pc, #136]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e12:	4a23      	ldr	r2, [pc, #140]	@ (8001ea0 <MX_USART1_UART_Init+0x94>)
 8001e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e16:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3c:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e42:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e48:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e54:	4811      	ldr	r0, [pc, #68]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e56:	f00a ffe3 	bl	800ce20 <HAL_UART_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e60:	f7ff fb30 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e64:	2100      	movs	r1, #0
 8001e66:	480d      	ldr	r0, [pc, #52]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e68:	f00d fb59 	bl	800f51e <HAL_UARTEx_SetTxFifoThreshold>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e72:	f7ff fb27 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e76:	2100      	movs	r1, #0
 8001e78:	4808      	ldr	r0, [pc, #32]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e7a:	f00d fb8e 	bl	800f59a <HAL_UARTEx_SetRxFifoThreshold>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e84:	f7ff fb1e 	bl	80014c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e88:	4804      	ldr	r0, [pc, #16]	@ (8001e9c <MX_USART1_UART_Init+0x90>)
 8001e8a:	f00d fb0f 	bl	800f4ac <HAL_UARTEx_DisableFifoMode>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e94:	f7ff fb16 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	2404b73c 	.word	0x2404b73c
 8001ea0:	40011000 	.word	0x40011000

08001ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0bc      	sub	sp, #240	@ 0xf0
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ebc:	f107 0318 	add.w	r3, r7, #24
 8001ec0:	22c0      	movs	r2, #192	@ 0xc0
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f014 f909 	bl	80160dc <memset>
  if(uartHandle->Instance==USART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3d      	ldr	r2, [pc, #244]	@ (8001fc4 <HAL_UART_MspInit+0x120>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d172      	bne.n	8001fba <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ed4:	f04f 0201 	mov.w	r2, #1
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee6:	f107 0318 	add.w	r3, r7, #24
 8001eea:	4618      	mov	r0, r3
 8001eec:	f007 fab8 	bl	8009460 <HAL_RCCEx_PeriphCLKConfig>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ef6:	f7ff fae5 	bl	80014c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001efa:	4b33      	ldr	r3, [pc, #204]	@ (8001fc8 <HAL_UART_MspInit+0x124>)
 8001efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f00:	4a31      	ldr	r2, [pc, #196]	@ (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f02:	f043 0310 	orr.w	r3, r3, #16
 8001f06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f18:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f28:	4b27      	ldr	r3, [pc, #156]	@ (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b24      	ldr	r3, [pc, #144]	@ (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3c:	4a22      	ldr	r2, [pc, #136]	@ (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f46:	4b20      	ldr	r3, [pc, #128]	@ (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f72:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f76:	4619      	mov	r1, r3
 8001f78:	4814      	ldr	r0, [pc, #80]	@ (8001fcc <HAL_UART_MspInit+0x128>)
 8001f7a:	f004 fd43 	bl	8006a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480a      	ldr	r0, [pc, #40]	@ (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001fa6:	f004 fd2d 	bl	8006a04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2105      	movs	r1, #5
 8001fae:	2025      	movs	r0, #37	@ 0x25
 8001fb0:	f000 ff10 	bl	8002dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fb4:	2025      	movs	r0, #37	@ 0x25
 8001fb6:	f000 ff27 	bl	8002e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fba:	bf00      	nop
 8001fbc:	37f0      	adds	r7, #240	@ 0xf0
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	58020400 	.word	0x58020400
 8001fd0:	58020000 	.word	0x58020000

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fd4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002010 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001fd8:	f7ff fdbc 	bl	8001b54 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fdc:	f7ff fd1a 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe0:	480c      	ldr	r0, [pc, #48]	@ (8002014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fe2:	490d      	ldr	r1, [pc, #52]	@ (8002018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800201c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8002024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002006:	f014 f91b 	bl	8016240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200a:	f7fe ff85 	bl	8000f18 <main>
  bx  lr
 800200e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002010:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002014:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002018:	2400017c 	.word	0x2400017c
  ldr r2, =_sidata
 800201c:	08017278 	.word	0x08017278
  ldr r2, =_sbss
 8002020:	2400017c 	.word	0x2400017c
  ldr r4, =_ebss
 8002024:	240500d0 	.word	0x240500d0

08002028 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <ADC3_IRQHandler>

0800202a <Controller_Init>:
#include <string.h>

void Controller_CheckEventMode();

void Controller_Init()
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
	Motor_Init();// 나중에 motor_init
 800202e:	f000 faf3 	bl	8002618 <Motor_Init>
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}

08002036 <Controller_Execute>:

void Controller_Execute()
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
	eModestate_t state = Model_GetModeState();
 800203c:	f000 fbe4 	bl	8002808 <Model_GetModeState>
 8002040:	4603      	mov	r3, r0
 8002042:	71fb      	strb	r3, [r7, #7]

	Controller_CheckEventMode();
 8002044:	f000 f816 	bl	8002074 <Controller_CheckEventMode>
	switch(state)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d00c      	beq.n	8002068 <Controller_Execute+0x32>
 800204e:	2b02      	cmp	r3, #2
 8002050:	dc0b      	bgt.n	800206a <Controller_Execute+0x34>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <Controller_Execute+0x26>
 8002056:	2b01      	cmp	r3, #1
 8002058:	d003      	beq.n	8002062 <Controller_Execute+0x2c>
		break;
	case S_MOUSE_MODE:

		break;
	}
}
 800205a:	e006      	b.n	800206a <Controller_Execute+0x34>
		Motor_Execute();
 800205c:	f000 fae2 	bl	8002624 <Motor_Execute>
		break;
 8002060:	e003      	b.n	800206a <Controller_Execute+0x34>
		KeyBoard_Execute();
 8002062:	f000 f829 	bl	80020b8 <KeyBoard_Execute>
		break;
 8002066:	e000      	b.n	800206a <Controller_Execute+0x34>
		break;
 8002068:	bf00      	nop
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <Controller_CheckEventMode>:

void Controller_CheckEventMode()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(modeEventMsgBox, 0);
 800207a:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <Controller_CheckEventMode+0x40>)
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	463b      	mov	r3, r7
 8002080:	2200      	movs	r2, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f010 fe96 	bl	8012db4 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b10      	cmp	r3, #16
 800208c:	d10e      	bne.n	80020ac <Controller_CheckEventMode+0x38>
		evtState = evt.value.v;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	81fb      	strh	r3, [r7, #14]

		if (evtState == S_KEYBOARD_MODE) {
 8002092:	89fb      	ldrh	r3, [r7, #14]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d103      	bne.n	80020a0 <Controller_CheckEventMode+0x2c>
			Model_SetModeState(S_KEYBOARD_MODE);
 8002098:	2001      	movs	r0, #1
 800209a:	f000 fba5 	bl	80027e8 <Model_SetModeState>

		else if (evtState == S_MOTOR_MODE) {
			Model_SetModeState(S_MOTOR_MODE);
		}
	}
}
 800209e:	e005      	b.n	80020ac <Controller_CheckEventMode+0x38>
		else if (evtState == S_MOTOR_MODE) {
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <Controller_CheckEventMode+0x38>
			Model_SetModeState(S_MOTOR_MODE);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f000 fb9e 	bl	80027e8 <Model_SetModeState>
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	2404b824 	.word	0x2404b824

080020b8 <KeyBoard_Execute>:
{

}

void KeyBoard_Execute()
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
	eKeyBoardState_t state = Model_GetKeyBoardState();
 80020be:	f000 fb77 	bl	80027b0 <Model_GetKeyBoardState>
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]

	switch(state)
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b0e      	cmp	r3, #14
 80020ca:	d84e      	bhi.n	800216a <KeyBoard_Execute+0xb2>
 80020cc:	a201      	add	r2, pc, #4	@ (adr r2, 80020d4 <KeyBoard_Execute+0x1c>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	08002111 	.word	0x08002111
 80020d8:	08002117 	.word	0x08002117
 80020dc:	0800211d 	.word	0x0800211d
 80020e0:	08002123 	.word	0x08002123
 80020e4:	08002129 	.word	0x08002129
 80020e8:	0800212f 	.word	0x0800212f
 80020ec:	08002135 	.word	0x08002135
 80020f0:	0800213b 	.word	0x0800213b
 80020f4:	08002141 	.word	0x08002141
 80020f8:	08002147 	.word	0x08002147
 80020fc:	0800214d 	.word	0x0800214d
 8002100:	08002153 	.word	0x08002153
 8002104:	08002159 	.word	0x08002159
 8002108:	0800215f 	.word	0x0800215f
 800210c:	08002165 	.word	0x08002165
	{
	case S_KEYBOARD_IDLE:
		KeyBoard_IDLE();
 8002110:	f000 f830 	bl	8002174 <KeyBoard_IDLE>
		break;
 8002114:	e02a      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_RIGHT:
		KeyBoard_RIGHT();
 8002116:	f000 f8a3 	bl	8002260 <KeyBoard_RIGHT>
		break;
 800211a:	e027      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_LEFT:
		KeyBoard_LEFT();
 800211c:	f000 f8c2 	bl	80022a4 <KeyBoard_LEFT>
		break;
 8002120:	e024      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_UP:
		KeyBoard_UP();
 8002122:	f000 f8e1 	bl	80022e8 <KeyBoard_UP>
		break;
 8002126:	e021      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_DOWN:
		KeyBoard_DOWN();
 8002128:	f000 f900 	bl	800232c <KeyBoard_DOWN>
		break;
 800212c:	e01e      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_ZERO:
		KeyBoard_ZERO();
 800212e:	f000 f91f 	bl	8002370 <KeyBoard_ZERO>
		break;
 8002132:	e01b      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_ONE:
		KeyBoard_ONE();
 8002134:	f000 f93e 	bl	80023b4 <KeyBoard_ONE>
		break;
 8002138:	e018      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_TWO:
		KeyBoard_TWO();
 800213a:	f000 f95d 	bl	80023f8 <KeyBoard_TWO>
		break;
 800213e:	e015      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_THREE:
		KeyBoard_THREE();
 8002140:	f000 f97c 	bl	800243c <KeyBoard_THREE>
		break;
 8002144:	e012      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_FOUR:
		KeyBoard_FOUR();
 8002146:	f000 f99b 	bl	8002480 <KeyBoard_FOUR>
		break;
 800214a:	e00f      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_FIVE:
		KeyBoard_FIVE();
 800214c:	f000 f9ba 	bl	80024c4 <KeyBoard_FIVE>
		break;
 8002150:	e00c      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_SIX:
		KeyBoard_SIX();
 8002152:	f000 f9d9 	bl	8002508 <KeyBoard_SIX>
		break;
 8002156:	e009      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_SEVEN:
		KeyBoard_SEVEN();
 8002158:	f000 f9f8 	bl	800254c <KeyBoard_SEVEN>
		break;
 800215c:	e006      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_EIGHT:
		KeyBoard_EIGHT();
 800215e:	f000 fa17 	bl	8002590 <KeyBoard_EIGHT>
		break;
 8002162:	e003      	b.n	800216c <KeyBoard_Execute+0xb4>
	case S_KEYBOARD_NINE:
		KeyBoard_NINE();
 8002164:	f000 fa36 	bl	80025d4 <KeyBoard_NINE>
		break;
 8002168:	e000      	b.n	800216c <KeyBoard_Execute+0xb4>
	default:
		break;
 800216a:	bf00      	nop
	}
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <KeyBoard_IDLE>:


void KeyBoard_IDLE()
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(keyBoardEventMsgBox, 0);	// non-blocking: 들어올때까지 기다리는게 아니라, 있나 없나 체크만 하고 넘어감
 800217a:	4b38      	ldr	r3, [pc, #224]	@ (800225c <KeyBoard_IDLE+0xe8>)
 800217c:	6819      	ldr	r1, [r3, #0]
 800217e:	463b      	mov	r3, r7
 8002180:	2200      	movs	r2, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f010 fe16 	bl	8012db4 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b10      	cmp	r3, #16
 800218c:	d162      	bne.n	8002254 <KeyBoard_IDLE+0xe0>
		evtState = evt.value.v;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	81fb      	strh	r3, [r7, #14]

		if (evtState == EVENT_RIGHT) {
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d103      	bne.n	80021a0 <KeyBoard_IDLE+0x2c>
			Model_SetKeyBoardState(S_KEYBOARD_RIGHT);
 8002198:	2001      	movs	r0, #1
 800219a:	f000 faf9 	bl	8002790 <Model_SetKeyBoardState>
			Model_SetKeyBoardState(S_KEYBOARD_NINE);
		}


	}
}
 800219e:	e059      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_LEFT) {
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <KeyBoard_IDLE+0x3a>
			Model_SetKeyBoardState(S_KEYBOARD_LEFT);
 80021a6:	2002      	movs	r0, #2
 80021a8:	f000 faf2 	bl	8002790 <Model_SetKeyBoardState>
}
 80021ac:	e052      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_UP) {
 80021ae:	89fb      	ldrh	r3, [r7, #14]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d103      	bne.n	80021bc <KeyBoard_IDLE+0x48>
			Model_SetKeyBoardState(S_KEYBOARD_UP);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 faeb 	bl	8002790 <Model_SetKeyBoardState>
}
 80021ba:	e04b      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_DOWN) {
 80021bc:	89fb      	ldrh	r3, [r7, #14]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d103      	bne.n	80021ca <KeyBoard_IDLE+0x56>
			Model_SetKeyBoardState(S_KEYBOARD_DOWN);
 80021c2:	2004      	movs	r0, #4
 80021c4:	f000 fae4 	bl	8002790 <Model_SetKeyBoardState>
}
 80021c8:	e044      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_ZERO) {
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d103      	bne.n	80021d8 <KeyBoard_IDLE+0x64>
			Model_SetKeyBoardState(S_KEYBOARD_ZERO);
 80021d0:	2005      	movs	r0, #5
 80021d2:	f000 fadd 	bl	8002790 <Model_SetKeyBoardState>
}
 80021d6:	e03d      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_ONE) {
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d103      	bne.n	80021e6 <KeyBoard_IDLE+0x72>
			Model_SetKeyBoardState(S_KEYBOARD_ONE);
 80021de:	2006      	movs	r0, #6
 80021e0:	f000 fad6 	bl	8002790 <Model_SetKeyBoardState>
}
 80021e4:	e036      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_TWO) {
 80021e6:	89fb      	ldrh	r3, [r7, #14]
 80021e8:	2b06      	cmp	r3, #6
 80021ea:	d103      	bne.n	80021f4 <KeyBoard_IDLE+0x80>
			Model_SetKeyBoardState(S_KEYBOARD_TWO);
 80021ec:	2007      	movs	r0, #7
 80021ee:	f000 facf 	bl	8002790 <Model_SetKeyBoardState>
}
 80021f2:	e02f      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_THREE) {
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	2b07      	cmp	r3, #7
 80021f8:	d103      	bne.n	8002202 <KeyBoard_IDLE+0x8e>
			Model_SetKeyBoardState(S_KEYBOARD_THREE);
 80021fa:	2008      	movs	r0, #8
 80021fc:	f000 fac8 	bl	8002790 <Model_SetKeyBoardState>
}
 8002200:	e028      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_FOUR) {
 8002202:	89fb      	ldrh	r3, [r7, #14]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d103      	bne.n	8002210 <KeyBoard_IDLE+0x9c>
			Model_SetKeyBoardState(S_KEYBOARD_FOUR);
 8002208:	2009      	movs	r0, #9
 800220a:	f000 fac1 	bl	8002790 <Model_SetKeyBoardState>
}
 800220e:	e021      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_FIVE) {
 8002210:	89fb      	ldrh	r3, [r7, #14]
 8002212:	2b09      	cmp	r3, #9
 8002214:	d103      	bne.n	800221e <KeyBoard_IDLE+0xaa>
			Model_SetKeyBoardState(S_KEYBOARD_FIVE);
 8002216:	200a      	movs	r0, #10
 8002218:	f000 faba 	bl	8002790 <Model_SetKeyBoardState>
}
 800221c:	e01a      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_SIX) {
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	2b0a      	cmp	r3, #10
 8002222:	d103      	bne.n	800222c <KeyBoard_IDLE+0xb8>
			Model_SetKeyBoardState(S_KEYBOARD_SIX);
 8002224:	200b      	movs	r0, #11
 8002226:	f000 fab3 	bl	8002790 <Model_SetKeyBoardState>
}
 800222a:	e013      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_SEVEN) {
 800222c:	89fb      	ldrh	r3, [r7, #14]
 800222e:	2b0b      	cmp	r3, #11
 8002230:	d103      	bne.n	800223a <KeyBoard_IDLE+0xc6>
			Model_SetKeyBoardState(S_KEYBOARD_SEVEN);
 8002232:	200c      	movs	r0, #12
 8002234:	f000 faac 	bl	8002790 <Model_SetKeyBoardState>
}
 8002238:	e00c      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_EIGHT) {
 800223a:	89fb      	ldrh	r3, [r7, #14]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d103      	bne.n	8002248 <KeyBoard_IDLE+0xd4>
			Model_SetKeyBoardState(S_KEYBOARD_EIGHT);
 8002240:	200d      	movs	r0, #13
 8002242:	f000 faa5 	bl	8002790 <Model_SetKeyBoardState>
}
 8002246:	e005      	b.n	8002254 <KeyBoard_IDLE+0xe0>
		else if (evtState == EVENT_NINE) {
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	2b0d      	cmp	r3, #13
 800224c:	d102      	bne.n	8002254 <KeyBoard_IDLE+0xe0>
			Model_SetKeyBoardState(S_KEYBOARD_NINE);
 800224e:	200e      	movs	r0, #14
 8002250:	f000 fa9e 	bl	8002790 <Model_SetKeyBoardState>
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	2404b814 	.word	0x2404b814

08002260 <KeyBoard_RIGHT>:

void KeyBoard_RIGHT()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x4F;
 8002266:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <KeyBoard_RIGHT+0x3c>)
 8002268:	224f      	movs	r2, #79	@ 0x4f
 800226a:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <KeyBoard_RIGHT+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f010 fe6a 	bl	8012f4c <osMailAlloc>
 8002278:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 800227a:	4b08      	ldr	r3, [pc, #32]	@ (800229c <KeyBoard_RIGHT+0x3c>)
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <KeyBoard_RIGHT+0x40>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4618      	mov	r0, r3
 800228a:	f010 fe75 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 800228e:	2000      	movs	r0, #0
 8002290:	f000 fa7e 	bl	8002790 <Model_SetKeyBoardState>

}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2404b7d0 	.word	0x2404b7d0
 80022a0:	2404b818 	.word	0x2404b818

080022a4 <KeyBoard_LEFT>:

void KeyBoard_LEFT()
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x50;
 80022aa:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <KeyBoard_LEFT+0x3c>)
 80022ac:	2250      	movs	r2, #80	@ 0x50
 80022ae:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 80022b0:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <KeyBoard_LEFT+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f010 fe48 	bl	8012f4c <osMailAlloc>
 80022bc:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <KeyBoard_LEFT+0x3c>)
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <KeyBoard_LEFT+0x40>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f010 fe53 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 fa5c 	bl	8002790 <Model_SetKeyBoardState>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2404b7d4 	.word	0x2404b7d4
 80022e4:	2404b818 	.word	0x2404b818

080022e8 <KeyBoard_UP>:

void KeyBoard_UP()
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x51;
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <KeyBoard_UP+0x3c>)
 80022f0:	2251      	movs	r2, #81	@ 0x51
 80022f2:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <KeyBoard_UP+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f010 fe26 	bl	8012f4c <osMailAlloc>
 8002300:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <KeyBoard_UP+0x3c>)
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 800230a:	4b07      	ldr	r3, [pc, #28]	@ (8002328 <KeyBoard_UP+0x40>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	f010 fe31 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 8002316:	2000      	movs	r0, #0
 8002318:	f000 fa3a 	bl	8002790 <Model_SetKeyBoardState>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2404b7d8 	.word	0x2404b7d8
 8002328:	2404b818 	.word	0x2404b818

0800232c <KeyBoard_DOWN>:

void KeyBoard_DOWN()
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x52;
 8002332:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <KeyBoard_DOWN+0x3c>)
 8002334:	2252      	movs	r2, #82	@ 0x52
 8002336:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <KeyBoard_DOWN+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f010 fe04 	bl	8012f4c <osMailAlloc>
 8002344:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 8002346:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <KeyBoard_DOWN+0x3c>)
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 800234e:	4b07      	ldr	r3, [pc, #28]	@ (800236c <KeyBoard_DOWN+0x40>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4618      	mov	r0, r3
 8002356:	f010 fe0f 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 800235a:	2000      	movs	r0, #0
 800235c:	f000 fa18 	bl	8002790 <Model_SetKeyBoardState>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2404b7dc 	.word	0x2404b7dc
 800236c:	2404b818 	.word	0x2404b818

08002370 <KeyBoard_ZERO>:

void KeyBoard_ZERO()
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x62;
 8002376:	4b0d      	ldr	r3, [pc, #52]	@ (80023ac <KeyBoard_ZERO+0x3c>)
 8002378:	2262      	movs	r2, #98	@ 0x62
 800237a:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 800237c:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <KeyBoard_ZERO+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f010 fde2 	bl	8012f4c <osMailAlloc>
 8002388:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 800238a:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <KeyBoard_ZERO+0x3c>)
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 8002392:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <KeyBoard_ZERO+0x40>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f010 fded 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 f9f6 	bl	8002790 <Model_SetKeyBoardState>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	2404b7e0 	.word	0x2404b7e0
 80023b0:	2404b818 	.word	0x2404b818

080023b4 <KeyBoard_ONE>:

void KeyBoard_ONE()
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x59;
 80023ba:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <KeyBoard_ONE+0x3c>)
 80023bc:	2259      	movs	r2, #89	@ 0x59
 80023be:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 80023c0:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <KeyBoard_ONE+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f010 fdc0 	bl	8012f4c <osMailAlloc>
 80023cc:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <KeyBoard_ONE+0x3c>)
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 80023d6:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <KeyBoard_ONE+0x40>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	f010 fdcb 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 f9d4 	bl	8002790 <Model_SetKeyBoardState>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	2404b7e4 	.word	0x2404b7e4
 80023f4:	2404b818 	.word	0x2404b818

080023f8 <KeyBoard_TWO>:

void KeyBoard_TWO()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x5A;
 80023fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <KeyBoard_TWO+0x3c>)
 8002400:	225a      	movs	r2, #90	@ 0x5a
 8002402:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <KeyBoard_TWO+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f010 fd9e 	bl	8012f4c <osMailAlloc>
 8002410:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 8002412:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <KeyBoard_TWO+0x3c>)
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <KeyBoard_TWO+0x40>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	f010 fda9 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 8002426:	2000      	movs	r0, #0
 8002428:	f000 f9b2 	bl	8002790 <Model_SetKeyBoardState>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2404b7e8 	.word	0x2404b7e8
 8002438:	2404b818 	.word	0x2404b818

0800243c <KeyBoard_THREE>:

void KeyBoard_THREE()
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x5B;
 8002442:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <KeyBoard_THREE+0x3c>)
 8002444:	225b      	movs	r2, #91	@ 0x5b
 8002446:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <KeyBoard_THREE+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f010 fd7c 	bl	8012f4c <osMailAlloc>
 8002454:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 8002456:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <KeyBoard_THREE+0x3c>)
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 800245e:	4b07      	ldr	r3, [pc, #28]	@ (800247c <KeyBoard_THREE+0x40>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4618      	mov	r0, r3
 8002466:	f010 fd87 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 800246a:	2000      	movs	r0, #0
 800246c:	f000 f990 	bl	8002790 <Model_SetKeyBoardState>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2404b7ec 	.word	0x2404b7ec
 800247c:	2404b818 	.word	0x2404b818

08002480 <KeyBoard_FOUR>:

void KeyBoard_FOUR()
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x5C;
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <KeyBoard_FOUR+0x3c>)
 8002488:	225c      	movs	r2, #92	@ 0x5c
 800248a:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 800248c:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <KeyBoard_FOUR+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f010 fd5a 	bl	8012f4c <osMailAlloc>
 8002498:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <KeyBoard_FOUR+0x3c>)
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 80024a2:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <KeyBoard_FOUR+0x40>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f010 fd65 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f000 f96e 	bl	8002790 <Model_SetKeyBoardState>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2404b7f0 	.word	0x2404b7f0
 80024c0:	2404b818 	.word	0x2404b818

080024c4 <KeyBoard_FIVE>:

void KeyBoard_FIVE()
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x5D;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <KeyBoard_FIVE+0x3c>)
 80024cc:	225d      	movs	r2, #93	@ 0x5d
 80024ce:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <KeyBoard_FIVE+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f010 fd38 	bl	8012f4c <osMailAlloc>
 80024dc:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <KeyBoard_FIVE+0x3c>)
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <KeyBoard_FIVE+0x40>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f010 fd43 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f000 f94c 	bl	8002790 <Model_SetKeyBoardState>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2404b7f4 	.word	0x2404b7f4
 8002504:	2404b818 	.word	0x2404b818

08002508 <KeyBoard_SIX>:

void KeyBoard_SIX()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x5E;
 800250e:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <KeyBoard_SIX+0x3c>)
 8002510:	225e      	movs	r2, #94	@ 0x5e
 8002512:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <KeyBoard_SIX+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f010 fd16 	bl	8012f4c <osMailAlloc>
 8002520:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 8002522:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <KeyBoard_SIX+0x3c>)
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 800252a:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <KeyBoard_SIX+0x40>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	f010 fd21 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 8002536:	2000      	movs	r0, #0
 8002538:	f000 f92a 	bl	8002790 <Model_SetKeyBoardState>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2404b7f8 	.word	0x2404b7f8
 8002548:	2404b818 	.word	0x2404b818

0800254c <KeyBoard_SEVEN>:

void KeyBoard_SEVEN()
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x5F;
 8002552:	4b0d      	ldr	r3, [pc, #52]	@ (8002588 <KeyBoard_SEVEN+0x3c>)
 8002554:	225f      	movs	r2, #95	@ 0x5f
 8002556:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <KeyBoard_SEVEN+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f010 fcf4 	bl	8012f4c <osMailAlloc>
 8002564:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 8002566:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <KeyBoard_SEVEN+0x3c>)
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 800256e:	4b07      	ldr	r3, [pc, #28]	@ (800258c <KeyBoard_SEVEN+0x40>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4618      	mov	r0, r3
 8002576:	f010 fcff 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 800257a:	2000      	movs	r0, #0
 800257c:	f000 f908 	bl	8002790 <Model_SetKeyBoardState>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	2404b7fc 	.word	0x2404b7fc
 800258c:	2404b818 	.word	0x2404b818

08002590 <KeyBoard_EIGHT>:

void KeyBoard_EIGHT()
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x60;
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <KeyBoard_EIGHT+0x3c>)
 8002598:	2260      	movs	r2, #96	@ 0x60
 800259a:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 800259c:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <KeyBoard_EIGHT+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f010 fcd2 	bl	8012f4c <osMailAlloc>
 80025a8:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 80025aa:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <KeyBoard_EIGHT+0x3c>)
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 80025b2:	4b07      	ldr	r3, [pc, #28]	@ (80025d0 <KeyBoard_EIGHT+0x40>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f010 fcdd 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 80025be:	2000      	movs	r0, #0
 80025c0:	f000 f8e6 	bl	8002790 <Model_SetKeyBoardState>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2404b800 	.word	0x2404b800
 80025d0:	2404b818 	.word	0x2404b818

080025d4 <KeyBoard_NINE>:

void KeyBoard_NINE()
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
	static keyBoard_t keyBoardData;

	keyBoardData.gestureData = 0x61;
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <KeyBoard_NINE+0x3c>)
 80025dc:	2261      	movs	r2, #97	@ 0x61
 80025de:	701a      	strb	r2, [r3, #0]

	keyBoard_t *pKeyBoardData = osMailAlloc(keyBoardDataMailBox, 0);
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <KeyBoard_NINE+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f010 fcb0 	bl	8012f4c <osMailAlloc>
 80025ec:	6078      	str	r0, [r7, #4]
	memcpy(pKeyBoardData, &keyBoardData, sizeof(keyBoard_t));
 80025ee:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <KeyBoard_NINE+0x3c>)
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	701a      	strb	r2, [r3, #0]
	osMailPut(keyBoardDataMailBox, pKeyBoardData);
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <KeyBoard_NINE+0x40>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f010 fcbb 	bl	8012f78 <osMailPut>

	Model_SetKeyBoardState(S_KEYBOARD_IDLE);
 8002602:	2000      	movs	r0, #0
 8002604:	f000 f8c4 	bl	8002790 <Model_SetKeyBoardState>
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	2404b804 	.word	0x2404b804
 8002614:	2404b818 	.word	0x2404b818

08002618 <Motor_Init>:
 */

#include "Rotate.h"
#include <string.h>
void Motor_Init()
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	Servo_Init();
 800261c:	f000 fa68 	bl	8002af0 <Servo_Init>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}

08002624 <Motor_Execute>:
void Motor_Execute(){
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
	eServoMotorState_t state = Model_GetServoMotorState();
 800262a:	f000 f923 	bl	8002874 <Model_GetServoMotorState>
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]

	switch(state)
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d00c      	beq.n	8002652 <Motor_Execute+0x2e>
 8002638:	2b02      	cmp	r3, #2
 800263a:	dc0d      	bgt.n	8002658 <Motor_Execute+0x34>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <Motor_Execute+0x22>
 8002640:	2b01      	cmp	r3, #1
 8002642:	d003      	beq.n	800264c <Motor_Execute+0x28>
		Servo_LEFT();
		break;

	}

}
 8002644:	e008      	b.n	8002658 <Motor_Execute+0x34>
		Servo_IDLE();
 8002646:	f000 f80b 	bl	8002660 <Servo_IDLE>
		break;
 800264a:	e005      	b.n	8002658 <Motor_Execute+0x34>
		Servo_RIGHT();
 800264c:	f000 f84e 	bl	80026ec <Servo_RIGHT>
		break;
 8002650:	e002      	b.n	8002658 <Motor_Execute+0x34>
		Servo_LEFT();
 8002652:	f000 f827 	bl	80026a4 <Servo_LEFT>
		break;
 8002656:	bf00      	nop
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <Servo_IDLE>:

void Servo_IDLE(){
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
	osEvent evt = osMessageGet(servoMotorEventMsgBox, 0);	// non-blocking: 들어올때까지 기다리는게 아니라, 있나 없나 체크만 하고 넘어감
 8002666:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <Servo_IDLE+0x40>)
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	463b      	mov	r3, r7
 800266c:	2200      	movs	r2, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f010 fba0 	bl	8012db4 <osMessageGet>
	uint16_t evtState;

	if (evt.status == osEventMessage) {
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b10      	cmp	r3, #16
 8002678:	d10e      	bne.n	8002698 <Servo_IDLE+0x38>
		evtState = evt.value.v;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	81fb      	strh	r3, [r7, #14]

		if (evtState == EVENT_SERVO_RIGHT) {
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d103      	bne.n	800268c <Servo_IDLE+0x2c>
			Model_SetServoMotorState(S_SERVO_RIGHT);
 8002684:	2001      	movs	r0, #1
 8002686:	f000 f8e5 	bl	8002854 <Model_SetServoMotorState>
		}
		else if (evtState == EVENT_SERVO_LEFT) {
			Model_SetServoMotorState(S_SERVO_LEFT);
		}
	}
}
 800268a:	e005      	b.n	8002698 <Servo_IDLE+0x38>
		else if (evtState == EVENT_SERVO_LEFT) {
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <Servo_IDLE+0x38>
			Model_SetServoMotorState(S_SERVO_LEFT);
 8002692:	2002      	movs	r0, #2
 8002694:	f000 f8de 	bl	8002854 <Model_SetServoMotorState>
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	2404b82c 	.word	0x2404b82c

080026a4 <Servo_LEFT>:

void Servo_LEFT(){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
	static servoMotor_t servoMotorData;

	servoMotorData.rotateData = -1; //angle - 10;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <Servo_LEFT+0x40>)
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	601a      	str	r2, [r3, #0]

	servoMotor_t *pServoMotorData = osMailAlloc(servoMotorDataMailBox, 0);
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <Servo_LEFT+0x44>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f010 fc47 	bl	8012f4c <osMailAlloc>
 80026be:	6078      	str	r0, [r7, #4]
	memcpy(pServoMotorData, &servoMotorData, sizeof(servoMotor_t));
 80026c0:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <Servo_LEFT+0x40>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
	osMailPut(servoMotorDataMailBox, pServoMotorData);
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <Servo_LEFT+0x44>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f010 fc52 	bl	8012f78 <osMailPut>

	Model_SetServoMotorState(S_SERVO_IDLE);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f000 f8bd 	bl	8002854 <Model_SetServoMotorState>

}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2404b808 	.word	0x2404b808
 80026e8:	2404b830 	.word	0x2404b830

080026ec <Servo_RIGHT>:

void Servo_RIGHT(){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
	static servoMotor_t servoMotorData;

	servoMotorData.rotateData = 1; //angle + 10;
 80026f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <Servo_RIGHT+0x3c>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

	servoMotor_t *pServoMotorData = osMailAlloc(servoMotorDataMailBox, 0);
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <Servo_RIGHT+0x40>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f010 fc24 	bl	8012f4c <osMailAlloc>
 8002704:	6078      	str	r0, [r7, #4]
	memcpy(pServoMotorData, &servoMotorData, sizeof(servoMotor_t));
 8002706:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <Servo_RIGHT+0x3c>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
	osMailPut(servoMotorDataMailBox, pServoMotorData);
 800270e:	4b07      	ldr	r3, [pc, #28]	@ (800272c <Servo_RIGHT+0x40>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4618      	mov	r0, r3
 8002716:	f010 fc2f 	bl	8012f78 <osMailPut>

	Model_SetServoMotorState(S_SERVO_IDLE);
 800271a:	2000      	movs	r0, #0
 800271c:	f000 f89a 	bl	8002854 <Model_SetServoMotorState>

}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	2404b80c 	.word	0x2404b80c
 800272c:	2404b830 	.word	0x2404b830

08002730 <Listener_Init>:

#include "Listener.h"


void Listener_Init()
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8002734:	2201      	movs	r2, #1
 8002736:	4903      	ldr	r1, [pc, #12]	@ (8002744 <Listener_Init+0x14>)
 8002738:	4803      	ldr	r0, [pc, #12]	@ (8002748 <Listener_Init+0x18>)
 800273a:	f00a fc4f 	bl	800cfdc <HAL_UART_Receive_IT>
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2404b548 	.word	0x2404b548
 8002748:	2404b73c 	.word	0x2404b73c

0800274c <Listener_Execute>:

void Listener_Execute()
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <Model_KeyBoardInit>:

osMailQId keyBoardDataMailBox;
osMailQDef(keyBoardDataQueue, 4, keyBoard_t);

void Model_KeyBoardInit()
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	keyBoardEventMsgBox = osMessageCreate(osMessageQ(keyBoardEventQueue), NULL);	// Listener -> Controller
 8002760:	2100      	movs	r1, #0
 8002762:	4807      	ldr	r0, [pc, #28]	@ (8002780 <Model_KeyBoardInit+0x24>)
 8002764:	f010 fabe 	bl	8012ce4 <osMessageCreate>
 8002768:	4603      	mov	r3, r0
 800276a:	4a06      	ldr	r2, [pc, #24]	@ (8002784 <Model_KeyBoardInit+0x28>)
 800276c:	6013      	str	r3, [r2, #0]
	keyBoardDataMailBox = osMailCreate(osMailQ(keyBoardDataQueue), NULL);	// Controller -> Presenter
 800276e:	2100      	movs	r1, #0
 8002770:	4805      	ldr	r0, [pc, #20]	@ (8002788 <Model_KeyBoardInit+0x2c>)
 8002772:	f010 fb93 	bl	8012e9c <osMailCreate>
 8002776:	4603      	mov	r3, r0
 8002778:	4a04      	ldr	r2, [pc, #16]	@ (800278c <Model_KeyBoardInit+0x30>)
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	080171bc 	.word	0x080171bc
 8002784:	2404b814 	.word	0x2404b814
 8002788:	080171cc 	.word	0x080171cc
 800278c:	2404b818 	.word	0x2404b818

08002790 <Model_SetKeyBoardState>:

// 상태 변수에 직접 접근하지 않고, 외부에서 함수를 통해 접근
void Model_SetKeyBoardState(eKeyBoardState_t state)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
	keyBoardState = state;
 800279a:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <Model_SetKeyBoardState+0x1c>)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	7013      	strb	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	2404b810 	.word	0x2404b810

080027b0 <Model_GetKeyBoardState>:

eKeyBoardState_t Model_GetKeyBoardState()
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
	return keyBoardState;
 80027b4:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <Model_GetKeyBoardState+0x14>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2404b810 	.word	0x2404b810

080027c8 <Model_ModeInit>:

osMessageQId modeEventMsgBox;
osMessageQDef(modeEventQueue, 4, uint16_t);

void Model_ModeInit()
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
	modeEventMsgBox = osMessageCreate(osMessageQ(modeEventQueue), NULL);
 80027cc:	2100      	movs	r1, #0
 80027ce:	4804      	ldr	r0, [pc, #16]	@ (80027e0 <Model_ModeInit+0x18>)
 80027d0:	f010 fa88 	bl	8012ce4 <osMessageCreate>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4a03      	ldr	r2, [pc, #12]	@ (80027e4 <Model_ModeInit+0x1c>)
 80027d8:	6013      	str	r3, [r2, #0]
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	080171d8 	.word	0x080171d8
 80027e4:	2404b824 	.word	0x2404b824

080027e8 <Model_SetModeState>:

void Model_SetModeState(eModestate_t state)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	modeState = state;
 80027f2:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <Model_SetModeState+0x1c>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	7013      	strb	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	2404b820 	.word	0x2404b820

08002808 <Model_GetModeState>:

eModestate_t Model_GetModeState()
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	return modeState;
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <Model_GetModeState+0x14>)
 800280e:	781b      	ldrb	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	2404b820 	.word	0x2404b820

08002820 <Model_ServoMotorInit>:

osMailQId servoMotorDataMailBox;
osMailQDef(servoMotorDataQueue, 4, servoMotor_t);

void Model_ServoMotorInit()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	servoMotorEventMsgBox = osMessageCreate(osMessageQ(servoMotorEventQueue), NULL);	// Listener -> Controller
 8002824:	2100      	movs	r1, #0
 8002826:	4807      	ldr	r0, [pc, #28]	@ (8002844 <Model_ServoMotorInit+0x24>)
 8002828:	f010 fa5c 	bl	8012ce4 <osMessageCreate>
 800282c:	4603      	mov	r3, r0
 800282e:	4a06      	ldr	r2, [pc, #24]	@ (8002848 <Model_ServoMotorInit+0x28>)
 8002830:	6013      	str	r3, [r2, #0]
	servoMotorDataMailBox = osMailCreate(osMailQ(servoMotorDataQueue), NULL);	// Controller -> Presenter
 8002832:	2100      	movs	r1, #0
 8002834:	4805      	ldr	r0, [pc, #20]	@ (800284c <Model_ServoMotorInit+0x2c>)
 8002836:	f010 fb31 	bl	8012e9c <osMailCreate>
 800283a:	4603      	mov	r3, r0
 800283c:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <Model_ServoMotorInit+0x30>)
 800283e:	6013      	str	r3, [r2, #0]
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	080171e8 	.word	0x080171e8
 8002848:	2404b82c 	.word	0x2404b82c
 800284c:	080171f8 	.word	0x080171f8
 8002850:	2404b830 	.word	0x2404b830

08002854 <Model_SetServoMotorState>:

// 상태 변수에 직접 접근하지 않고, 외부에서 함수를 통해 접근
void Model_SetServoMotorState(eServoMotorState_t state)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
	servoMotorState = state;
 800285e:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <Model_SetServoMotorState+0x1c>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	7013      	strb	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	2404b828 	.word	0x2404b828

08002874 <Model_GetServoMotorState>:

eServoMotorState_t Model_GetServoMotorState()
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
	return servoMotorState;
 8002878:	4b03      	ldr	r3, [pc, #12]	@ (8002888 <Model_GetServoMotorState+0x14>)
 800287a:	781b      	ldrb	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	2404b828 	.word	0x2404b828

0800288c <Presenter_Init>:

#include "Presenter.h"


void Presenter_Init()
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
	USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002890:	2200      	movs	r2, #0
 8002892:	4905      	ldr	r1, [pc, #20]	@ (80028a8 <Presenter_Init+0x1c>)
 8002894:	4805      	ldr	r0, [pc, #20]	@ (80028ac <Presenter_Init+0x20>)
 8002896:	f00e fd85 	bl	80113a4 <USBD_Init>
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 800289a:	4905      	ldr	r1, [pc, #20]	@ (80028b0 <Presenter_Init+0x24>)
 800289c:	4803      	ldr	r0, [pc, #12]	@ (80028ac <Presenter_Init+0x20>)
 800289e:	f00e fdb1 	bl	8011404 <USBD_RegisterClass>

}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	240000cc 	.word	0x240000cc
 80028ac:	2404f5b0 	.word	0x2404f5b0
 80028b0:	24000014 	.word	0x24000014

080028b4 <Presenter_Execute>:

void Presenter_Execute()
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
	static eModestate_t prevState = -1;
	char str[30];
	eModestate_t state = Model_GetModeState();
 80028ba:	f7ff ffa5 	bl	8002808 <Model_GetModeState>
 80028be:	4603      	mov	r3, r0
 80028c0:	77fb      	strb	r3, [r7, #31]
	if(prevState != state){
 80028c2:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <Presenter_Execute+0x6c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	7ffa      	ldrb	r2, [r7, #31]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d013      	beq.n	80028f4 <Presenter_Execute+0x40>
		prevState = state;
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <Presenter_Execute+0x6c>)
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
 80028d0:	7013      	strb	r3, [r2, #0]
		if (state == S_KEYBOARD_MODE){
 80028d2:	7ffb      	ldrb	r3, [r7, #31]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <Presenter_Execute+0x30>
			sprintf(str, "KEYBOARD:");
 80028d8:	463b      	mov	r3, r7
 80028da:	4912      	ldr	r1, [pc, #72]	@ (8002924 <Presenter_Execute+0x70>)
 80028dc:	4618      	mov	r0, r3
 80028de:	f013 fb03 	bl	8015ee8 <siprintf>
 80028e2:	e007      	b.n	80028f4 <Presenter_Execute+0x40>
		}
		else if (state == S_MOUSE_MODE){
 80028e4:	7ffb      	ldrb	r3, [r7, #31]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d104      	bne.n	80028f4 <Presenter_Execute+0x40>
			sprintf(str, "MOUSE:");
 80028ea:	463b      	mov	r3, r7
 80028ec:	490e      	ldr	r1, [pc, #56]	@ (8002928 <Presenter_Execute+0x74>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f013 fafa 	bl	8015ee8 <siprintf>
		}

//		LCD_writeStringXY(0, 0, str);
	}

	switch(state)
 80028f4:	7ffb      	ldrb	r3, [r7, #31]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d00c      	beq.n	8002914 <Presenter_Execute+0x60>
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	dc0b      	bgt.n	8002916 <Presenter_Execute+0x62>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <Presenter_Execute+0x54>
 8002902:	2b01      	cmp	r3, #1
 8002904:	d003      	beq.n	800290e <Presenter_Execute+0x5a>
		break;
	case S_MOUSE_MODE:

		break;
	}
}
 8002906:	e006      	b.n	8002916 <Presenter_Execute+0x62>
		Presenter_ServoMotorExecute();
 8002908:	f000 f896 	bl	8002a38 <Presenter_ServoMotorExecute>
		break;
 800290c:	e003      	b.n	8002916 <Presenter_Execute+0x62>
		Presenter_KeyBoardExecute();
 800290e:	f000 f80d 	bl	800292c <Presenter_KeyBoardExecute>
		break;
 8002912:	e000      	b.n	8002916 <Presenter_Execute+0x62>
		break;
 8002914:	bf00      	nop
}
 8002916:	bf00      	nop
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	24000008 	.word	0x24000008
 8002924:	08017100 	.word	0x08017100
 8002928:	0801710c 	.word	0x0801710c

0800292c <Presenter_KeyBoardExecute>:
{
	//	LCD_Init(&hi2c1);
}

void Presenter_KeyBoardExecute()
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
	keyBoard_t *pKeyBoardData;
	osEvent evt = osMailGet(keyBoardDataMailBox, 0);
 8002932:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <Presenter_KeyBoardExecute+0x74>)
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	2200      	movs	r2, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f010 fb5a 	bl	8012ff4 <osMailGet>
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8002940:	4b18      	ldr	r3, [pc, #96]	@ (80029a4 <Presenter_KeyBoardExecute+0x78>)
 8002942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8002946:	617b      	str	r3, [r7, #20]

	if (evt.status == osEventMail) {
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b20      	cmp	r3, #32
 800294c:	d110      	bne.n	8002970 <Presenter_KeyBoardExecute+0x44>
		pKeyBoardData = evt.value.p;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	613b      	str	r3, [r7, #16]
		memcpy(&keyBoardData, pKeyBoardData, sizeof(keyBoard_t));
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <Presenter_KeyBoardExecute+0x7c>)
 8002958:	701a      	strb	r2, [r3, #0]
		osMailFree(keyBoardDataMailBox, pKeyBoardData);
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <Presenter_KeyBoardExecute+0x74>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6939      	ldr	r1, [r7, #16]
 8002960:	4618      	mov	r0, r3
 8002962:	f010 fbbb 	bl	80130dc <osMailFree>
		Presenter_SendKeyToPC(keyBoardData.gestureData);
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <Presenter_KeyBoardExecute+0x7c>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f822 	bl	80029b4 <Presenter_SendKeyToPC>
	}

	if (hhid->state == USBD_HID_IDLE && send_ready==1){
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	7b1b      	ldrb	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10f      	bne.n	8002998 <Presenter_KeyBoardExecute+0x6c>
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <Presenter_KeyBoardExecute+0x80>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d10a      	bne.n	8002998 <Presenter_KeyBoardExecute+0x6c>
		buf[2] = 0;
 8002982:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <Presenter_KeyBoardExecute+0x84>)
 8002984:	2200      	movs	r2, #0
 8002986:	709a      	strb	r2, [r3, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, buf, sizeof(buf));
 8002988:	2208      	movs	r2, #8
 800298a:	4909      	ldr	r1, [pc, #36]	@ (80029b0 <Presenter_KeyBoardExecute+0x84>)
 800298c:	4805      	ldr	r0, [pc, #20]	@ (80029a4 <Presenter_KeyBoardExecute+0x78>)
 800298e:	f00e fc65 	bl	801125c <USBD_HID_SendReport>
		send_ready = 0;
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <Presenter_KeyBoardExecute+0x80>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
	}
}
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2404b818 	.word	0x2404b818
 80029a4:	2404f5b0 	.word	0x2404f5b0
 80029a8:	2404b838 	.word	0x2404b838
 80029ac:	2404b551 	.word	0x2404b551
 80029b0:	2404b83c 	.word	0x2404b83c

080029b4 <Presenter_SendKeyToPC>:
 */



void Presenter_SendKeyToPC(uint8_t keycode) // 추가: 키보드 전송 함수
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
	if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 80029be:	4b17      	ldr	r3, [pc, #92]	@ (8002a1c <Presenter_SendKeyToPC+0x68>)
 80029c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d003      	beq.n	80029d2 <Presenter_SendKeyToPC+0x1e>
	{
		printf("USB not configured!\r\n");
 80029ca:	4815      	ldr	r0, [pc, #84]	@ (8002a20 <Presenter_SendKeyToPC+0x6c>)
 80029cc:	f013 fa84 	bl	8015ed8 <puts>
		return;
 80029d0:	e020      	b.n	8002a14 <Presenter_SendKeyToPC+0x60>
	}

	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) hUsbDeviceFS.pClassData;
 80029d2:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <Presenter_SendKeyToPC+0x68>)
 80029d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80029d8:	60fb      	str	r3, [r7, #12]

	printf("HID state before send: %d\r\n", hhid->state);  // <-- 여기에 출력
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	7b1b      	ldrb	r3, [r3, #12]
 80029de:	4619      	mov	r1, r3
 80029e0:	4810      	ldr	r0, [pc, #64]	@ (8002a24 <Presenter_SendKeyToPC+0x70>)
 80029e2:	f013 fa11 	bl	8015e08 <iprintf>





	if (hhid->state == USBD_HID_IDLE) {
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	7b1b      	ldrb	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <Presenter_SendKeyToPC+0x56>
		buf[2] = keycode;
 80029ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002a28 <Presenter_SendKeyToPC+0x74>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	7093      	strb	r3, [r2, #2]
		USBD_HID_SendReport(&hUsbDeviceFS, buf, sizeof(buf));
 80029f4:	2208      	movs	r2, #8
 80029f6:	490c      	ldr	r1, [pc, #48]	@ (8002a28 <Presenter_SendKeyToPC+0x74>)
 80029f8:	4808      	ldr	r0, [pc, #32]	@ (8002a1c <Presenter_SendKeyToPC+0x68>)
 80029fa:	f00e fc2f 	bl	801125c <USBD_HID_SendReport>
		flag=1;
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <Presenter_SendKeyToPC+0x78>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8002a04:	480a      	ldr	r0, [pc, #40]	@ (8002a30 <Presenter_SendKeyToPC+0x7c>)
 8002a06:	f009 f801 	bl	800ba0c <HAL_TIM_Base_Start_IT>
	//	    buf[2] = 0;
	//
	//	    while (hhid->state != 0) osDelay(1);
	//	    USBD_HID_SendReport(&hUsbDeviceFS, buf, sizeof(buf));

	printf("Key sent: 0x%02X\r\n", keycode);
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4809      	ldr	r0, [pc, #36]	@ (8002a34 <Presenter_SendKeyToPC+0x80>)
 8002a10:	f013 f9fa 	bl	8015e08 <iprintf>

}
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	2404f5b0 	.word	0x2404f5b0
 8002a20:	08017114 	.word	0x08017114
 8002a24:	0801712c 	.word	0x0801712c
 8002a28:	2404b83c 	.word	0x2404b83c
 8002a2c:	2404b550 	.word	0x2404b550
 8002a30:	2404b6a4 	.word	0x2404b6a4
 8002a34:	08017148 	.word	0x08017148

08002a38 <Presenter_ServoMotorExecute>:

static int prev_angle = 0;
static servoMotor_t servoMotorData;
static uint8_t buf[8] = {0};

void Presenter_ServoMotorExecute(){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
	servoMotor_t *pServoMotorData;
	osEvent evt = osMailGet(servoMotorDataMailBox, 0);
 8002a3e:	4b26      	ldr	r3, [pc, #152]	@ (8002ad8 <Presenter_ServoMotorExecute+0xa0>)
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	463b      	mov	r3, r7
 8002a44:	2200      	movs	r2, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f010 fad4 	bl	8012ff4 <osMailGet>
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8002a4c:	4b23      	ldr	r3, [pc, #140]	@ (8002adc <Presenter_ServoMotorExecute+0xa4>)
 8002a4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8002a52:	613b      	str	r3, [r7, #16]

	if (evt.status == osEventMail) {
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d125      	bne.n	8002aa6 <Presenter_ServoMotorExecute+0x6e>
		pServoMotorData = evt.value.p;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
		memcpy(&servoMotorData, pServoMotorData, sizeof(servoMotor_t));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae0 <Presenter_ServoMotorExecute+0xa8>)
 8002a66:	601a      	str	r2, [r3, #0]
		osMailFree(servoMotorDataMailBox, pServoMotorData);
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <Presenter_ServoMotorExecute+0xa0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f010 fb34 	bl	80130dc <osMailFree>

		// 상대적인 각도 조정
		int new_angle = (int)prev_angle + (int)servoMotorData.rotateData;  // 예: +10, -10
 8002a74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <Presenter_ServoMotorExecute+0xa8>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <Presenter_ServoMotorExecute+0xac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]

		// 범위 제한: 0도 ~ 180도
		if (new_angle <= 0) new_angle = 1;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	dc01      	bgt.n	8002a8a <Presenter_ServoMotorExecute+0x52>
 8002a86:	2301      	movs	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
		if (new_angle >= 90) new_angle = 89;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b59      	cmp	r3, #89	@ 0x59
 8002a8e:	dd01      	ble.n	8002a94 <Presenter_ServoMotorExecute+0x5c>
 8002a90:	2359      	movs	r3, #89	@ 0x59
 8002a92:	617b      	str	r3, [r7, #20]

		prev_angle = new_angle;
 8002a94:	4a13      	ldr	r2, [pc, #76]	@ (8002ae4 <Presenter_ServoMotorExecute+0xac>)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	6013      	str	r3, [r2, #0]

		Servo_SetAngle(prev_angle);
 8002a9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <Presenter_ServoMotorExecute+0xac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f82f 	bl	8002b04 <Servo_SetAngle>
	}
	if (hhid->state == USBD_HID_IDLE && send_ready==1){
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	7b1b      	ldrb	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10f      	bne.n	8002ace <Presenter_ServoMotorExecute+0x96>
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <Presenter_ServoMotorExecute+0xb0>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10a      	bne.n	8002ace <Presenter_ServoMotorExecute+0x96>
			buf[2] = 0;
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <Presenter_ServoMotorExecute+0xb4>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS, buf, sizeof(buf));
 8002abe:	2208      	movs	r2, #8
 8002ac0:	490a      	ldr	r1, [pc, #40]	@ (8002aec <Presenter_ServoMotorExecute+0xb4>)
 8002ac2:	4806      	ldr	r0, [pc, #24]	@ (8002adc <Presenter_ServoMotorExecute+0xa4>)
 8002ac4:	f00e fbca 	bl	801125c <USBD_HID_SendReport>
			send_ready = 0;
 8002ac8:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <Presenter_ServoMotorExecute+0xb0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
	}
}
 8002ace:	bf00      	nop
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2404b830 	.word	0x2404b830
 8002adc:	2404f5b0 	.word	0x2404f5b0
 8002ae0:	2404b848 	.word	0x2404b848
 8002ae4:	2404b844 	.word	0x2404b844
 8002ae8:	2404b551 	.word	0x2404b551
 8002aec:	2404b84c 	.word	0x2404b84c

08002af0 <Servo_Init>:
 */

#include "servomotor.h"

void Servo_Init()
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002af4:	2100      	movs	r1, #0
 8002af6:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <Servo_Init+0x10>)
 8002af8:	f009 f862 	bl	800bbc0 <HAL_TIM_PWM_Start>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2404b6f0 	.word	0x2404b6f0

08002b04 <Servo_SetAngle>:
void Servo_SetAngle(uint8_t angle)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
    // 0도 = 1ms, 90도 = 2ms, 180도 = 3ms 기준
    uint16_t pulse = 1000 + ((angle * 2000) / 180);  // 1000us ~ 3000us
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <Servo_SetAngle+0x40>)
 8002b1a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b1e:	441a      	add	r2, r3
 8002b20:	11d2      	asrs	r2, r2, #7
 8002b22:	17db      	asrs	r3, r3, #31
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002b2c:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8002b2e:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <Servo_SetAngle+0x44>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	89fa      	ldrh	r2, [r7, #14]
 8002b34:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	b60b60b7 	.word	0xb60b60b7
 8002b48:	2404b6f0 	.word	0x2404b6f0

08002b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b52:	2003      	movs	r0, #3
 8002b54:	f000 f933 	bl	8002dbe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b58:	f006 fa6a 	bl	8009030 <HAL_RCC_GetSysClockFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <HAL_Init+0x68>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	4913      	ldr	r1, [pc, #76]	@ (8002bb8 <HAL_Init+0x6c>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
 8002b74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b76:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <HAL_Init+0x68>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002bb8 <HAL_Init+0x6c>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002bbc <HAL_Init+0x70>)
 8002b8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b90:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <HAL_Init+0x74>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b96:	200f      	movs	r0, #15
 8002b98:	f7fe fdc0 	bl	800171c <HAL_InitTick>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e002      	b.n	8002bac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba6:	f7fe fd9b 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	080171ac 	.word	0x080171ac
 8002bbc:	24000004 	.word	0x24000004
 8002bc0:	24000000 	.word	0x24000000

08002bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_IncTick+0x20>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_IncTick+0x24>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a04      	ldr	r2, [pc, #16]	@ (8002be8 <HAL_IncTick+0x24>)
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	24000010 	.word	0x24000010
 8002be8:	2404b854 	.word	0x2404b854

08002bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <HAL_GetTick+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	2404b854 	.word	0x2404b854

08002c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c0c:	f7ff ffee 	bl	8002bec <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d005      	beq.n	8002c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <HAL_Delay+0x44>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c2a:	bf00      	nop
 8002c2c:	f7ff ffde 	bl	8002bec <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d8f7      	bhi.n	8002c2c <HAL_Delay+0x28>
  {
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	24000010 	.word	0x24000010

08002c4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c50:	4b03      	ldr	r3, [pc, #12]	@ (8002c60 <HAL_GetREVID+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0c1b      	lsrs	r3, r3, #16
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	5c001000 	.word	0x5c001000

08002c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00
 8002ca8:	05fa0000 	.word	0x05fa0000

08002cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4907      	ldr	r1, [pc, #28]	@ (8002d00 <__NVIC_EnableIRQ+0x38>)
 8002ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db0a      	blt.n	8002d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	490c      	ldr	r1, [pc, #48]	@ (8002d50 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d2c:	e00a      	b.n	8002d44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4908      	ldr	r1, [pc, #32]	@ (8002d54 <__NVIC_SetPriority+0x50>)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	761a      	strb	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	@ 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f1c3 0307 	rsb	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	bf28      	it	cs
 8002d76:	2304      	movcs	r3, #4
 8002d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <NVIC_EncodePriority+0x30>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3b03      	subs	r3, #3
 8002d86:	e000      	b.n	8002d8a <NVIC_EncodePriority+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	4313      	orrs	r3, r2
         );
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	@ 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ff4c 	bl	8002c64 <__NVIC_SetPriorityGrouping>
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002de2:	f7ff ff63 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8002de6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f7ff ffb3 	bl	8002d58 <NVIC_EncodePriority>
 8002df2:	4602      	mov	r2, r0
 8002df4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ff82 	bl	8002d04 <__NVIC_SetPriority>
}
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff56 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002e28:	f3bf 8f5f 	dmb	sy
}
 8002e2c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002e2e:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <HAL_MPU_Disable+0x28>)
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	4a06      	ldr	r2, [pc, #24]	@ (8002e4c <HAL_MPU_Disable+0x28>)
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e38:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002e3a:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <HAL_MPU_Disable+0x2c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	605a      	str	r2, [r3, #4]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000ed00 	.word	0xe000ed00
 8002e50:	e000ed90 	.word	0xe000ed90

08002e54 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <HAL_MPU_Enable+0x38>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002e66:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <HAL_MPU_Enable+0x3c>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <HAL_MPU_Enable+0x3c>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e70:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002e72:	f3bf 8f4f 	dsb	sy
}
 8002e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e78:	f3bf 8f6f 	isb	sy
}
 8002e7c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed90 	.word	0xe000ed90
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	785a      	ldrb	r2, [r3, #1]
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_MPU_ConfigRegion+0x7c>)
 8002ea2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f10 <HAL_MPU_ConfigRegion+0x7c>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	@ (8002f10 <HAL_MPU_ConfigRegion+0x7c>)
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002eb0:	4a17      	ldr	r2, [pc, #92]	@ (8002f10 <HAL_MPU_ConfigRegion+0x7c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7b1b      	ldrb	r3, [r3, #12]
 8002ebc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7adb      	ldrb	r3, [r3, #11]
 8002ec2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ec4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7a9b      	ldrb	r3, [r3, #10]
 8002eca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ecc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7b5b      	ldrb	r3, [r3, #13]
 8002ed2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ed4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7b9b      	ldrb	r3, [r3, #14]
 8002eda:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002edc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7bdb      	ldrb	r3, [r3, #15]
 8002ee2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ee4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7a5b      	ldrb	r3, [r3, #9]
 8002eea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002eec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7a1b      	ldrb	r3, [r3, #8]
 8002ef2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ef4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	7812      	ldrb	r2, [r2, #0]
 8002efa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002efc:	4a04      	ldr	r2, [pc, #16]	@ (8002f10 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002efe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f00:	6113      	str	r3, [r2, #16]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000ed90 	.word	0xe000ed90

08002f14 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e069      	b.n	8002ffa <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fd fbee 	bl	8000714 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <HAL_DCMI_Init+0xf0>)
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6819      	ldr	r1, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002f72:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002f7e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002f8a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002f96:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002fa2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d112      	bne.n	8002fda <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7f1b      	ldrb	r3, [r3, #28]
 8002fb8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7f5b      	ldrb	r3, [r3, #29]
 8002fbe:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002fc0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7f9b      	ldrb	r3, [r3, #30]
 8002fc6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002fc8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7fdb      	ldrb	r3, [r3, #31]
 8002fd0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002fd6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002fd8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 021e 	orr.w	r2, r2, #30
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	ffe0f007 	.word	0xffe0f007

08003008 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_DCMI_Start_DMA+0x1c>
 8003020:	2302      	movs	r3, #2
 8003022:	e0ab      	b.n	800317c <HAL_DCMI_Start_DMA+0x174>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003042:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0202 	bic.w	r2, r2, #2
 8003052:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6819      	ldr	r1, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003068:	4a46      	ldr	r2, [pc, #280]	@ (8003184 <HAL_DCMI_Start_DMA+0x17c>)
 800306a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003070:	4a45      	ldr	r2, [pc, #276]	@ (8003188 <HAL_DCMI_Start_DMA+0x180>)
 8003072:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003078:	2200      	movs	r2, #0
 800307a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309a:	d219      	bcs.n	80030d0 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3328      	adds	r3, #40	@ 0x28
 80030a6:	4619      	mov	r1, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	f000 fd1a 	bl	8003ae4 <HAL_DMA_Start_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d055      	beq.n	8003162 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2240      	movs	r2, #64	@ 0x40
 80030ba:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e055      	b.n	800317c <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003184 <HAL_DCMI_Start_DMA+0x17c>)
 80030d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80030ea:	e009      	b.n	8003100 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	085a      	lsrs	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fa:	005a      	lsls	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003108:	d2f0      	bcs.n	80030ec <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	1e9a      	subs	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3328      	adds	r3, #40	@ 0x28
 8003132:	4619      	mov	r1, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	f002 ffb1 	bl	80060a4 <HAL_DMAEx_MultiBufferStart_IT>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2240      	movs	r2, #64	@ 0x40
 800314c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e00c      	b.n	800317c <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	080032cd 	.word	0x080032cd
 8003188:	080033f3 	.word	0x080033f3

0800318c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2204      	movs	r2, #4
 80031ac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b2:	f043 0202 	orr.w	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2204      	movs	r2, #4
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c6:	4a31      	ldr	r2, [pc, #196]	@ (800328c <HAL_DCMI_IRQHandler+0x100>)
 80031c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fa10 	bl	80045f4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2202      	movs	r2, #2
 80031e4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2204      	movs	r2, #4
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031fe:	4a23      	ldr	r2, [pc, #140]	@ (800328c <HAL_DCMI_IRQHandler+0x100>)
 8003200:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f9f4 	bl	80045f4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2210      	movs	r2, #16
 800321c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f840 	bl	80032a4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d006      	beq.n	800323c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2208      	movs	r2, #8
 8003234:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f83e 	bl	80032b8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01d      	beq.n	8003282 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b02      	cmp	r3, #2
 8003252:	d107      	bne.n	8003264 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 021e 	bic.w	r2, r2, #30
 8003262:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2201      	movs	r2, #1
 800327a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fd fe39 	bl	8000ef4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	080033f3 	.word	0x080033f3

08003290 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d043      	beq.n	800336a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ee:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d118      	bne.n	800332e <DCMI_DMAXferCplt+0x62>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d015      	beq.n	800332e <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	00da      	lsls	r2, r3, #3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	2200      	movs	r2, #0
 800331c:	4619      	mov	r1, r3
 800331e:	f003 fa1f 	bl	8006760 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	1e5a      	subs	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	639a      	str	r2, [r3, #56]	@ 0x38
 800332c:	e044      	b.n	80033b8 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d13c      	bne.n	80033b8 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003350:	00da      	lsls	r2, r3, #3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4413      	add	r3, r2
 8003356:	2201      	movs	r2, #1
 8003358:	4619      	mov	r1, r3
 800335a:	f003 fa01 	bl	8006760 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	1e5a      	subs	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38
 8003368:	e026      	b.n	80033b8 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	e017      	b.n	80033b8 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10f      	bne.n	80033b8 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	440a      	add	r2, r1
 80033ae:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d112      	bne.n	80033ea <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d103      	bne.n	80033ea <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fe:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003406:	2b02      	cmp	r3, #2
 8003408:	d009      	beq.n	800341e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7ff ff36 	bl	8003290 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff fbda 	bl	8002bec <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e316      	b.n	8003a72 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a66      	ldr	r2, [pc, #408]	@ (80035e4 <HAL_DMA_Init+0x1b8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d04a      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a65      	ldr	r2, [pc, #404]	@ (80035e8 <HAL_DMA_Init+0x1bc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d045      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a63      	ldr	r2, [pc, #396]	@ (80035ec <HAL_DMA_Init+0x1c0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d040      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a62      	ldr	r2, [pc, #392]	@ (80035f0 <HAL_DMA_Init+0x1c4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d03b      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a60      	ldr	r2, [pc, #384]	@ (80035f4 <HAL_DMA_Init+0x1c8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d036      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a5f      	ldr	r2, [pc, #380]	@ (80035f8 <HAL_DMA_Init+0x1cc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d031      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a5d      	ldr	r2, [pc, #372]	@ (80035fc <HAL_DMA_Init+0x1d0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02c      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5c      	ldr	r2, [pc, #368]	@ (8003600 <HAL_DMA_Init+0x1d4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d027      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a5a      	ldr	r2, [pc, #360]	@ (8003604 <HAL_DMA_Init+0x1d8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d022      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a59      	ldr	r2, [pc, #356]	@ (8003608 <HAL_DMA_Init+0x1dc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01d      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a57      	ldr	r2, [pc, #348]	@ (800360c <HAL_DMA_Init+0x1e0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d018      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a56      	ldr	r2, [pc, #344]	@ (8003610 <HAL_DMA_Init+0x1e4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a54      	ldr	r2, [pc, #336]	@ (8003614 <HAL_DMA_Init+0x1e8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a53      	ldr	r2, [pc, #332]	@ (8003618 <HAL_DMA_Init+0x1ec>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d009      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a51      	ldr	r2, [pc, #324]	@ (800361c <HAL_DMA_Init+0x1f0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_DMA_Init+0xb8>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a50      	ldr	r2, [pc, #320]	@ (8003620 <HAL_DMA_Init+0x1f4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_DMA_Init+0xbc>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_DMA_Init+0xbe>
 80034e8:	2300      	movs	r3, #0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 813b 	beq.w	8003766 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a37      	ldr	r2, [pc, #220]	@ (80035e4 <HAL_DMA_Init+0x1b8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d04a      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a36      	ldr	r2, [pc, #216]	@ (80035e8 <HAL_DMA_Init+0x1bc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d045      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a34      	ldr	r2, [pc, #208]	@ (80035ec <HAL_DMA_Init+0x1c0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d040      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a33      	ldr	r2, [pc, #204]	@ (80035f0 <HAL_DMA_Init+0x1c4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d03b      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a31      	ldr	r2, [pc, #196]	@ (80035f4 <HAL_DMA_Init+0x1c8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d036      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a30      	ldr	r2, [pc, #192]	@ (80035f8 <HAL_DMA_Init+0x1cc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d031      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a2e      	ldr	r2, [pc, #184]	@ (80035fc <HAL_DMA_Init+0x1d0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d02c      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2d      	ldr	r2, [pc, #180]	@ (8003600 <HAL_DMA_Init+0x1d4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d027      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2b      	ldr	r2, [pc, #172]	@ (8003604 <HAL_DMA_Init+0x1d8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d022      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2a      	ldr	r2, [pc, #168]	@ (8003608 <HAL_DMA_Init+0x1dc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d01d      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a28      	ldr	r2, [pc, #160]	@ (800360c <HAL_DMA_Init+0x1e0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d018      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a27      	ldr	r2, [pc, #156]	@ (8003610 <HAL_DMA_Init+0x1e4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a25      	ldr	r2, [pc, #148]	@ (8003614 <HAL_DMA_Init+0x1e8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a24      	ldr	r2, [pc, #144]	@ (8003618 <HAL_DMA_Init+0x1ec>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_DMA_Init+0x1f0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_DMA_Init+0x174>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a21      	ldr	r2, [pc, #132]	@ (8003620 <HAL_DMA_Init+0x1f4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <HAL_DMA_Init+0x186>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e007      	b.n	80035c2 <HAL_DMA_Init+0x196>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035c2:	e02f      	b.n	8003624 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c4:	f7ff fb12 	bl	8002bec <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d928      	bls.n	8003624 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2203      	movs	r2, #3
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e246      	b.n	8003a72 <HAL_DMA_Init+0x646>
 80035e4:	40020010 	.word	0x40020010
 80035e8:	40020028 	.word	0x40020028
 80035ec:	40020040 	.word	0x40020040
 80035f0:	40020058 	.word	0x40020058
 80035f4:	40020070 	.word	0x40020070
 80035f8:	40020088 	.word	0x40020088
 80035fc:	400200a0 	.word	0x400200a0
 8003600:	400200b8 	.word	0x400200b8
 8003604:	40020410 	.word	0x40020410
 8003608:	40020428 	.word	0x40020428
 800360c:	40020440 	.word	0x40020440
 8003610:	40020458 	.word	0x40020458
 8003614:	40020470 	.word	0x40020470
 8003618:	40020488 	.word	0x40020488
 800361c:	400204a0 	.word	0x400204a0
 8003620:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1c8      	bne.n	80035c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4b83      	ldr	r3, [pc, #524]	@ (800384c <HAL_DMA_Init+0x420>)
 800363e:	4013      	ands	r3, r2
 8003640:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800364a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003656:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003662:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	2b04      	cmp	r3, #4
 8003676:	d107      	bne.n	8003688 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	4313      	orrs	r3, r2
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003688:	4b71      	ldr	r3, [pc, #452]	@ (8003850 <HAL_DMA_Init+0x424>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b71      	ldr	r3, [pc, #452]	@ (8003854 <HAL_DMA_Init+0x428>)
 800368e:	4013      	ands	r3, r2
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003694:	d328      	bcc.n	80036e8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b28      	cmp	r3, #40	@ 0x28
 800369c:	d903      	bls.n	80036a6 <HAL_DMA_Init+0x27a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80036a4:	d917      	bls.n	80036d6 <HAL_DMA_Init+0x2aa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80036ac:	d903      	bls.n	80036b6 <HAL_DMA_Init+0x28a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b42      	cmp	r3, #66	@ 0x42
 80036b4:	d90f      	bls.n	80036d6 <HAL_DMA_Init+0x2aa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b46      	cmp	r3, #70	@ 0x46
 80036bc:	d903      	bls.n	80036c6 <HAL_DMA_Init+0x29a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b48      	cmp	r3, #72	@ 0x48
 80036c4:	d907      	bls.n	80036d6 <HAL_DMA_Init+0x2aa>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b4e      	cmp	r3, #78	@ 0x4e
 80036cc:	d905      	bls.n	80036da <HAL_DMA_Init+0x2ae>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b52      	cmp	r3, #82	@ 0x52
 80036d4:	d801      	bhi.n	80036da <HAL_DMA_Init+0x2ae>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_DMA_Init+0x2b0>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036e6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 0307 	bic.w	r3, r3, #7
 80036fe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	2b04      	cmp	r3, #4
 8003710:	d117      	bne.n	8003742 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f002 fb33 	bl	8005d90 <DMA_CheckFifoParam>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2240      	movs	r2, #64	@ 0x40
 8003734:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e197      	b.n	8003a72 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f002 fa6e 	bl	8005c2c <DMA_CalcBaseAndBitshift>
 8003750:	4603      	mov	r3, r0
 8003752:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	223f      	movs	r2, #63	@ 0x3f
 800375e:	409a      	lsls	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	e0cd      	b.n	8003902 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a3b      	ldr	r2, [pc, #236]	@ (8003858 <HAL_DMA_Init+0x42c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_Init+0x38a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a39      	ldr	r2, [pc, #228]	@ (800385c <HAL_DMA_Init+0x430>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01d      	beq.n	80037b6 <HAL_DMA_Init+0x38a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a38      	ldr	r2, [pc, #224]	@ (8003860 <HAL_DMA_Init+0x434>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d018      	beq.n	80037b6 <HAL_DMA_Init+0x38a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a36      	ldr	r2, [pc, #216]	@ (8003864 <HAL_DMA_Init+0x438>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_DMA_Init+0x38a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a35      	ldr	r2, [pc, #212]	@ (8003868 <HAL_DMA_Init+0x43c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_DMA_Init+0x38a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a33      	ldr	r2, [pc, #204]	@ (800386c <HAL_DMA_Init+0x440>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_DMA_Init+0x38a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a32      	ldr	r2, [pc, #200]	@ (8003870 <HAL_DMA_Init+0x444>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_DMA_Init+0x38a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a30      	ldr	r2, [pc, #192]	@ (8003874 <HAL_DMA_Init+0x448>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Init+0x38e>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_DMA_Init+0x390>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8097 	beq.w	80038f0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a24      	ldr	r2, [pc, #144]	@ (8003858 <HAL_DMA_Init+0x42c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d021      	beq.n	8003810 <HAL_DMA_Init+0x3e4>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a22      	ldr	r2, [pc, #136]	@ (800385c <HAL_DMA_Init+0x430>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01c      	beq.n	8003810 <HAL_DMA_Init+0x3e4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a21      	ldr	r2, [pc, #132]	@ (8003860 <HAL_DMA_Init+0x434>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d017      	beq.n	8003810 <HAL_DMA_Init+0x3e4>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003864 <HAL_DMA_Init+0x438>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d012      	beq.n	8003810 <HAL_DMA_Init+0x3e4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003868 <HAL_DMA_Init+0x43c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00d      	beq.n	8003810 <HAL_DMA_Init+0x3e4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1c      	ldr	r2, [pc, #112]	@ (800386c <HAL_DMA_Init+0x440>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d008      	beq.n	8003810 <HAL_DMA_Init+0x3e4>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1b      	ldr	r2, [pc, #108]	@ (8003870 <HAL_DMA_Init+0x444>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <HAL_DMA_Init+0x3e4>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <HAL_DMA_Init+0x448>)
 800380e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <HAL_DMA_Init+0x44c>)
 800382c:	4013      	ands	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	d021      	beq.n	800387c <HAL_DMA_Init+0x450>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b80      	cmp	r3, #128	@ 0x80
 800383e:	d102      	bne.n	8003846 <HAL_DMA_Init+0x41a>
 8003840:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003844:	e01b      	b.n	800387e <HAL_DMA_Init+0x452>
 8003846:	2300      	movs	r3, #0
 8003848:	e019      	b.n	800387e <HAL_DMA_Init+0x452>
 800384a:	bf00      	nop
 800384c:	fe10803f 	.word	0xfe10803f
 8003850:	5c001000 	.word	0x5c001000
 8003854:	ffff0000 	.word	0xffff0000
 8003858:	58025408 	.word	0x58025408
 800385c:	5802541c 	.word	0x5802541c
 8003860:	58025430 	.word	0x58025430
 8003864:	58025444 	.word	0x58025444
 8003868:	58025458 	.word	0x58025458
 800386c:	5802546c 	.word	0x5802546c
 8003870:	58025480 	.word	0x58025480
 8003874:	58025494 	.word	0x58025494
 8003878:	fffe000f 	.word	0xfffe000f
 800387c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003884:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800388c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003894:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800389c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b6e      	ldr	r3, [pc, #440]	@ (8003a7c <HAL_DMA_Init+0x650>)
 80038c4:	4413      	add	r3, r2
 80038c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_DMA_Init+0x654>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	009a      	lsls	r2, r3, #2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f002 f9a9 	bl	8005c2c <DMA_CalcBaseAndBitshift>
 80038da:	4603      	mov	r3, r0
 80038dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	2201      	movs	r2, #1
 80038e8:	409a      	lsls	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	e008      	b.n	8003902 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2240      	movs	r2, #64	@ 0x40
 80038f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0b7      	b.n	8003a72 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a5f      	ldr	r2, [pc, #380]	@ (8003a84 <HAL_DMA_Init+0x658>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d072      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5d      	ldr	r2, [pc, #372]	@ (8003a88 <HAL_DMA_Init+0x65c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d06d      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a5c      	ldr	r2, [pc, #368]	@ (8003a8c <HAL_DMA_Init+0x660>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d068      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5a      	ldr	r2, [pc, #360]	@ (8003a90 <HAL_DMA_Init+0x664>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d063      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a59      	ldr	r2, [pc, #356]	@ (8003a94 <HAL_DMA_Init+0x668>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d05e      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a57      	ldr	r2, [pc, #348]	@ (8003a98 <HAL_DMA_Init+0x66c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d059      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a56      	ldr	r2, [pc, #344]	@ (8003a9c <HAL_DMA_Init+0x670>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d054      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a54      	ldr	r2, [pc, #336]	@ (8003aa0 <HAL_DMA_Init+0x674>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d04f      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a53      	ldr	r2, [pc, #332]	@ (8003aa4 <HAL_DMA_Init+0x678>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d04a      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a51      	ldr	r2, [pc, #324]	@ (8003aa8 <HAL_DMA_Init+0x67c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d045      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a50      	ldr	r2, [pc, #320]	@ (8003aac <HAL_DMA_Init+0x680>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d040      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a4e      	ldr	r2, [pc, #312]	@ (8003ab0 <HAL_DMA_Init+0x684>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d03b      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ab4 <HAL_DMA_Init+0x688>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d036      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4b      	ldr	r2, [pc, #300]	@ (8003ab8 <HAL_DMA_Init+0x68c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d031      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a4a      	ldr	r2, [pc, #296]	@ (8003abc <HAL_DMA_Init+0x690>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d02c      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a48      	ldr	r2, [pc, #288]	@ (8003ac0 <HAL_DMA_Init+0x694>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d027      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a47      	ldr	r2, [pc, #284]	@ (8003ac4 <HAL_DMA_Init+0x698>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a45      	ldr	r2, [pc, #276]	@ (8003ac8 <HAL_DMA_Init+0x69c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01d      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a44      	ldr	r2, [pc, #272]	@ (8003acc <HAL_DMA_Init+0x6a0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d018      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a42      	ldr	r2, [pc, #264]	@ (8003ad0 <HAL_DMA_Init+0x6a4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a41      	ldr	r2, [pc, #260]	@ (8003ad4 <HAL_DMA_Init+0x6a8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ad8 <HAL_DMA_Init+0x6ac>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a3e      	ldr	r2, [pc, #248]	@ (8003adc <HAL_DMA_Init+0x6b0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_DMA_Init+0x5c6>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a3c      	ldr	r2, [pc, #240]	@ (8003ae0 <HAL_DMA_Init+0x6b4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_DMA_Init+0x5ca>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_DMA_Init+0x5cc>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d032      	beq.n	8003a62 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f002 fa43 	bl	8005e88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b80      	cmp	r3, #128	@ 0x80
 8003a08:	d102      	bne.n	8003a10 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_DMA_Init+0x624>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d80c      	bhi.n	8003a50 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f002 fac0 	bl	8005fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	e008      	b.n	8003a62 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	a7fdabf8 	.word	0xa7fdabf8
 8003a80:	cccccccd 	.word	0xcccccccd
 8003a84:	40020010 	.word	0x40020010
 8003a88:	40020028 	.word	0x40020028
 8003a8c:	40020040 	.word	0x40020040
 8003a90:	40020058 	.word	0x40020058
 8003a94:	40020070 	.word	0x40020070
 8003a98:	40020088 	.word	0x40020088
 8003a9c:	400200a0 	.word	0x400200a0
 8003aa0:	400200b8 	.word	0x400200b8
 8003aa4:	40020410 	.word	0x40020410
 8003aa8:	40020428 	.word	0x40020428
 8003aac:	40020440 	.word	0x40020440
 8003ab0:	40020458 	.word	0x40020458
 8003ab4:	40020470 	.word	0x40020470
 8003ab8:	40020488 	.word	0x40020488
 8003abc:	400204a0 	.word	0x400204a0
 8003ac0:	400204b8 	.word	0x400204b8
 8003ac4:	58025408 	.word	0x58025408
 8003ac8:	5802541c 	.word	0x5802541c
 8003acc:	58025430 	.word	0x58025430
 8003ad0:	58025444 	.word	0x58025444
 8003ad4:	58025458 	.word	0x58025458
 8003ad8:	5802546c 	.word	0x5802546c
 8003adc:	58025480 	.word	0x58025480
 8003ae0:	58025494 	.word	0x58025494

08003ae4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e226      	b.n	8003f4e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_DMA_Start_IT+0x2a>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e21f      	b.n	8003f4e <HAL_DMA_Start_IT+0x46a>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	f040 820a 	bne.w	8003f38 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a68      	ldr	r2, [pc, #416]	@ (8003cd8 <HAL_DMA_Start_IT+0x1f4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d04a      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a66      	ldr	r2, [pc, #408]	@ (8003cdc <HAL_DMA_Start_IT+0x1f8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d045      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a65      	ldr	r2, [pc, #404]	@ (8003ce0 <HAL_DMA_Start_IT+0x1fc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d040      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a63      	ldr	r2, [pc, #396]	@ (8003ce4 <HAL_DMA_Start_IT+0x200>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d03b      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a62      	ldr	r2, [pc, #392]	@ (8003ce8 <HAL_DMA_Start_IT+0x204>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a60      	ldr	r2, [pc, #384]	@ (8003cec <HAL_DMA_Start_IT+0x208>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a5f      	ldr	r2, [pc, #380]	@ (8003cf0 <HAL_DMA_Start_IT+0x20c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d02c      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8003cf4 <HAL_DMA_Start_IT+0x210>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a5c      	ldr	r2, [pc, #368]	@ (8003cf8 <HAL_DMA_Start_IT+0x214>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5a      	ldr	r2, [pc, #360]	@ (8003cfc <HAL_DMA_Start_IT+0x218>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a59      	ldr	r2, [pc, #356]	@ (8003d00 <HAL_DMA_Start_IT+0x21c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a57      	ldr	r2, [pc, #348]	@ (8003d04 <HAL_DMA_Start_IT+0x220>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a56      	ldr	r2, [pc, #344]	@ (8003d08 <HAL_DMA_Start_IT+0x224>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a54      	ldr	r2, [pc, #336]	@ (8003d0c <HAL_DMA_Start_IT+0x228>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a53      	ldr	r2, [pc, #332]	@ (8003d10 <HAL_DMA_Start_IT+0x22c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Start_IT+0xee>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a51      	ldr	r2, [pc, #324]	@ (8003d14 <HAL_DMA_Start_IT+0x230>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d108      	bne.n	8003be4 <HAL_DMA_Start_IT+0x100>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e007      	b.n	8003bf4 <HAL_DMA_Start_IT+0x110>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f001 fe6a 	bl	80058d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a34      	ldr	r2, [pc, #208]	@ (8003cd8 <HAL_DMA_Start_IT+0x1f4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d04a      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a33      	ldr	r2, [pc, #204]	@ (8003cdc <HAL_DMA_Start_IT+0x1f8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d045      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a31      	ldr	r2, [pc, #196]	@ (8003ce0 <HAL_DMA_Start_IT+0x1fc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d040      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a30      	ldr	r2, [pc, #192]	@ (8003ce4 <HAL_DMA_Start_IT+0x200>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d03b      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ce8 <HAL_DMA_Start_IT+0x204>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d036      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2d      	ldr	r2, [pc, #180]	@ (8003cec <HAL_DMA_Start_IT+0x208>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d031      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf0 <HAL_DMA_Start_IT+0x20c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d02c      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf4 <HAL_DMA_Start_IT+0x210>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d027      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a28      	ldr	r2, [pc, #160]	@ (8003cf8 <HAL_DMA_Start_IT+0x214>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d022      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a27      	ldr	r2, [pc, #156]	@ (8003cfc <HAL_DMA_Start_IT+0x218>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d01d      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a25      	ldr	r2, [pc, #148]	@ (8003d00 <HAL_DMA_Start_IT+0x21c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d018      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a24      	ldr	r2, [pc, #144]	@ (8003d04 <HAL_DMA_Start_IT+0x220>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d013      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a22      	ldr	r2, [pc, #136]	@ (8003d08 <HAL_DMA_Start_IT+0x224>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00e      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a21      	ldr	r2, [pc, #132]	@ (8003d0c <HAL_DMA_Start_IT+0x228>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d009      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1f      	ldr	r2, [pc, #124]	@ (8003d10 <HAL_DMA_Start_IT+0x22c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x1bc>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d14 <HAL_DMA_Start_IT+0x230>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d101      	bne.n	8003ca4 <HAL_DMA_Start_IT+0x1c0>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_DMA_Start_IT+0x1c2>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d036      	beq.n	8003d18 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 021e 	bic.w	r2, r3, #30
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0216 	orr.w	r2, r2, #22
 8003cbc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d03e      	beq.n	8003d44 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0208 	orr.w	r2, r2, #8
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e035      	b.n	8003d44 <HAL_DMA_Start_IT+0x260>
 8003cd8:	40020010 	.word	0x40020010
 8003cdc:	40020028 	.word	0x40020028
 8003ce0:	40020040 	.word	0x40020040
 8003ce4:	40020058 	.word	0x40020058
 8003ce8:	40020070 	.word	0x40020070
 8003cec:	40020088 	.word	0x40020088
 8003cf0:	400200a0 	.word	0x400200a0
 8003cf4:	400200b8 	.word	0x400200b8
 8003cf8:	40020410 	.word	0x40020410
 8003cfc:	40020428 	.word	0x40020428
 8003d00:	40020440 	.word	0x40020440
 8003d04:	40020458 	.word	0x40020458
 8003d08:	40020470 	.word	0x40020470
 8003d0c:	40020488 	.word	0x40020488
 8003d10:	400204a0 	.word	0x400204a0
 8003d14:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 020e 	bic.w	r2, r3, #14
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 020a 	orr.w	r2, r2, #10
 8003d2a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0204 	orr.w	r2, r2, #4
 8003d42:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a83      	ldr	r2, [pc, #524]	@ (8003f58 <HAL_DMA_Start_IT+0x474>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d072      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a82      	ldr	r2, [pc, #520]	@ (8003f5c <HAL_DMA_Start_IT+0x478>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d06d      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a80      	ldr	r2, [pc, #512]	@ (8003f60 <HAL_DMA_Start_IT+0x47c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d068      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a7f      	ldr	r2, [pc, #508]	@ (8003f64 <HAL_DMA_Start_IT+0x480>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d063      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a7d      	ldr	r2, [pc, #500]	@ (8003f68 <HAL_DMA_Start_IT+0x484>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d05e      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f6c <HAL_DMA_Start_IT+0x488>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d059      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a7a      	ldr	r2, [pc, #488]	@ (8003f70 <HAL_DMA_Start_IT+0x48c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d054      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a79      	ldr	r2, [pc, #484]	@ (8003f74 <HAL_DMA_Start_IT+0x490>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d04f      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a77      	ldr	r2, [pc, #476]	@ (8003f78 <HAL_DMA_Start_IT+0x494>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d04a      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a76      	ldr	r2, [pc, #472]	@ (8003f7c <HAL_DMA_Start_IT+0x498>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d045      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a74      	ldr	r2, [pc, #464]	@ (8003f80 <HAL_DMA_Start_IT+0x49c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d040      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a73      	ldr	r2, [pc, #460]	@ (8003f84 <HAL_DMA_Start_IT+0x4a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d03b      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a71      	ldr	r2, [pc, #452]	@ (8003f88 <HAL_DMA_Start_IT+0x4a4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d036      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a70      	ldr	r2, [pc, #448]	@ (8003f8c <HAL_DMA_Start_IT+0x4a8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d031      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f90 <HAL_DMA_Start_IT+0x4ac>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02c      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a6d      	ldr	r2, [pc, #436]	@ (8003f94 <HAL_DMA_Start_IT+0x4b0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d027      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f98 <HAL_DMA_Start_IT+0x4b4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d022      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f9c <HAL_DMA_Start_IT+0x4b8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d01d      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a68      	ldr	r2, [pc, #416]	@ (8003fa0 <HAL_DMA_Start_IT+0x4bc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d018      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a67      	ldr	r2, [pc, #412]	@ (8003fa4 <HAL_DMA_Start_IT+0x4c0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a65      	ldr	r2, [pc, #404]	@ (8003fa8 <HAL_DMA_Start_IT+0x4c4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a64      	ldr	r2, [pc, #400]	@ (8003fac <HAL_DMA_Start_IT+0x4c8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a62      	ldr	r2, [pc, #392]	@ (8003fb0 <HAL_DMA_Start_IT+0x4cc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_DMA_Start_IT+0x350>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a61      	ldr	r2, [pc, #388]	@ (8003fb4 <HAL_DMA_Start_IT+0x4d0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_DMA_Start_IT+0x354>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_DMA_Start_IT+0x356>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01a      	beq.n	8003e74 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e5a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e72:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a37      	ldr	r2, [pc, #220]	@ (8003f58 <HAL_DMA_Start_IT+0x474>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d04a      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a36      	ldr	r2, [pc, #216]	@ (8003f5c <HAL_DMA_Start_IT+0x478>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d045      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a34      	ldr	r2, [pc, #208]	@ (8003f60 <HAL_DMA_Start_IT+0x47c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d040      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a33      	ldr	r2, [pc, #204]	@ (8003f64 <HAL_DMA_Start_IT+0x480>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d03b      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a31      	ldr	r2, [pc, #196]	@ (8003f68 <HAL_DMA_Start_IT+0x484>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d036      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a30      	ldr	r2, [pc, #192]	@ (8003f6c <HAL_DMA_Start_IT+0x488>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d031      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2e      	ldr	r2, [pc, #184]	@ (8003f70 <HAL_DMA_Start_IT+0x48c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d02c      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8003f74 <HAL_DMA_Start_IT+0x490>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d027      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f78 <HAL_DMA_Start_IT+0x494>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d022      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f7c <HAL_DMA_Start_IT+0x498>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d01d      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a28      	ldr	r2, [pc, #160]	@ (8003f80 <HAL_DMA_Start_IT+0x49c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d018      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a27      	ldr	r2, [pc, #156]	@ (8003f84 <HAL_DMA_Start_IT+0x4a0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a25      	ldr	r2, [pc, #148]	@ (8003f88 <HAL_DMA_Start_IT+0x4a4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00e      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a24      	ldr	r2, [pc, #144]	@ (8003f8c <HAL_DMA_Start_IT+0x4a8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d009      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a22      	ldr	r2, [pc, #136]	@ (8003f90 <HAL_DMA_Start_IT+0x4ac>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_DMA_Start_IT+0x430>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a21      	ldr	r2, [pc, #132]	@ (8003f94 <HAL_DMA_Start_IT+0x4b0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d108      	bne.n	8003f26 <HAL_DMA_Start_IT+0x442>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e012      	b.n	8003f4c <HAL_DMA_Start_IT+0x468>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e009      	b.n	8003f4c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40020010 	.word	0x40020010
 8003f5c:	40020028 	.word	0x40020028
 8003f60:	40020040 	.word	0x40020040
 8003f64:	40020058 	.word	0x40020058
 8003f68:	40020070 	.word	0x40020070
 8003f6c:	40020088 	.word	0x40020088
 8003f70:	400200a0 	.word	0x400200a0
 8003f74:	400200b8 	.word	0x400200b8
 8003f78:	40020410 	.word	0x40020410
 8003f7c:	40020428 	.word	0x40020428
 8003f80:	40020440 	.word	0x40020440
 8003f84:	40020458 	.word	0x40020458
 8003f88:	40020470 	.word	0x40020470
 8003f8c:	40020488 	.word	0x40020488
 8003f90:	400204a0 	.word	0x400204a0
 8003f94:	400204b8 	.word	0x400204b8
 8003f98:	58025408 	.word	0x58025408
 8003f9c:	5802541c 	.word	0x5802541c
 8003fa0:	58025430 	.word	0x58025430
 8003fa4:	58025444 	.word	0x58025444
 8003fa8:	58025458 	.word	0x58025458
 8003fac:	5802546c 	.word	0x5802546c
 8003fb0:	58025480 	.word	0x58025480
 8003fb4:	58025494 	.word	0x58025494

08003fb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003fc0:	f7fe fe14 	bl	8002bec <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e2dc      	b.n	800458a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d008      	beq.n	8003fee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2280      	movs	r2, #128	@ 0x80
 8003fe0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e2cd      	b.n	800458a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a76      	ldr	r2, [pc, #472]	@ (80041cc <HAL_DMA_Abort+0x214>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d04a      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a74      	ldr	r2, [pc, #464]	@ (80041d0 <HAL_DMA_Abort+0x218>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d045      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a73      	ldr	r2, [pc, #460]	@ (80041d4 <HAL_DMA_Abort+0x21c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d040      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a71      	ldr	r2, [pc, #452]	@ (80041d8 <HAL_DMA_Abort+0x220>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d03b      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a70      	ldr	r2, [pc, #448]	@ (80041dc <HAL_DMA_Abort+0x224>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d036      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a6e      	ldr	r2, [pc, #440]	@ (80041e0 <HAL_DMA_Abort+0x228>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d031      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a6d      	ldr	r2, [pc, #436]	@ (80041e4 <HAL_DMA_Abort+0x22c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d02c      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a6b      	ldr	r2, [pc, #428]	@ (80041e8 <HAL_DMA_Abort+0x230>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d027      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6a      	ldr	r2, [pc, #424]	@ (80041ec <HAL_DMA_Abort+0x234>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d022      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a68      	ldr	r2, [pc, #416]	@ (80041f0 <HAL_DMA_Abort+0x238>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01d      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a67      	ldr	r2, [pc, #412]	@ (80041f4 <HAL_DMA_Abort+0x23c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d018      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a65      	ldr	r2, [pc, #404]	@ (80041f8 <HAL_DMA_Abort+0x240>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a64      	ldr	r2, [pc, #400]	@ (80041fc <HAL_DMA_Abort+0x244>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a62      	ldr	r2, [pc, #392]	@ (8004200 <HAL_DMA_Abort+0x248>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a61      	ldr	r2, [pc, #388]	@ (8004204 <HAL_DMA_Abort+0x24c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_DMA_Abort+0xd6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a5f      	ldr	r2, [pc, #380]	@ (8004208 <HAL_DMA_Abort+0x250>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_DMA_Abort+0xda>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_DMA_Abort+0xdc>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d013      	beq.n	80040c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 021e 	bic.w	r2, r2, #30
 80040a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e00a      	b.n	80040d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 020e 	bic.w	r2, r2, #14
 80040ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a3c      	ldr	r2, [pc, #240]	@ (80041cc <HAL_DMA_Abort+0x214>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d072      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a3a      	ldr	r2, [pc, #232]	@ (80041d0 <HAL_DMA_Abort+0x218>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d06d      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a39      	ldr	r2, [pc, #228]	@ (80041d4 <HAL_DMA_Abort+0x21c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d068      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a37      	ldr	r2, [pc, #220]	@ (80041d8 <HAL_DMA_Abort+0x220>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d063      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a36      	ldr	r2, [pc, #216]	@ (80041dc <HAL_DMA_Abort+0x224>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d05e      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a34      	ldr	r2, [pc, #208]	@ (80041e0 <HAL_DMA_Abort+0x228>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d059      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a33      	ldr	r2, [pc, #204]	@ (80041e4 <HAL_DMA_Abort+0x22c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d054      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a31      	ldr	r2, [pc, #196]	@ (80041e8 <HAL_DMA_Abort+0x230>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d04f      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a30      	ldr	r2, [pc, #192]	@ (80041ec <HAL_DMA_Abort+0x234>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d04a      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2e      	ldr	r2, [pc, #184]	@ (80041f0 <HAL_DMA_Abort+0x238>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d045      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2d      	ldr	r2, [pc, #180]	@ (80041f4 <HAL_DMA_Abort+0x23c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d040      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a2b      	ldr	r2, [pc, #172]	@ (80041f8 <HAL_DMA_Abort+0x240>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d03b      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2a      	ldr	r2, [pc, #168]	@ (80041fc <HAL_DMA_Abort+0x244>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d036      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a28      	ldr	r2, [pc, #160]	@ (8004200 <HAL_DMA_Abort+0x248>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d031      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a27      	ldr	r2, [pc, #156]	@ (8004204 <HAL_DMA_Abort+0x24c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d02c      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a25      	ldr	r2, [pc, #148]	@ (8004208 <HAL_DMA_Abort+0x250>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d027      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a24      	ldr	r2, [pc, #144]	@ (800420c <HAL_DMA_Abort+0x254>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d022      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a22      	ldr	r2, [pc, #136]	@ (8004210 <HAL_DMA_Abort+0x258>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01d      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a21      	ldr	r2, [pc, #132]	@ (8004214 <HAL_DMA_Abort+0x25c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d018      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1f      	ldr	r2, [pc, #124]	@ (8004218 <HAL_DMA_Abort+0x260>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1e      	ldr	r2, [pc, #120]	@ (800421c <HAL_DMA_Abort+0x264>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004220 <HAL_DMA_Abort+0x268>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004224 <HAL_DMA_Abort+0x26c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <HAL_DMA_Abort+0x20e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a19      	ldr	r2, [pc, #100]	@ (8004228 <HAL_DMA_Abort+0x270>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d132      	bne.n	800422c <HAL_DMA_Abort+0x274>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e031      	b.n	800422e <HAL_DMA_Abort+0x276>
 80041ca:	bf00      	nop
 80041cc:	40020010 	.word	0x40020010
 80041d0:	40020028 	.word	0x40020028
 80041d4:	40020040 	.word	0x40020040
 80041d8:	40020058 	.word	0x40020058
 80041dc:	40020070 	.word	0x40020070
 80041e0:	40020088 	.word	0x40020088
 80041e4:	400200a0 	.word	0x400200a0
 80041e8:	400200b8 	.word	0x400200b8
 80041ec:	40020410 	.word	0x40020410
 80041f0:	40020428 	.word	0x40020428
 80041f4:	40020440 	.word	0x40020440
 80041f8:	40020458 	.word	0x40020458
 80041fc:	40020470 	.word	0x40020470
 8004200:	40020488 	.word	0x40020488
 8004204:	400204a0 	.word	0x400204a0
 8004208:	400204b8 	.word	0x400204b8
 800420c:	58025408 	.word	0x58025408
 8004210:	5802541c 	.word	0x5802541c
 8004214:	58025430 	.word	0x58025430
 8004218:	58025444 	.word	0x58025444
 800421c:	58025458 	.word	0x58025458
 8004220:	5802546c 	.word	0x5802546c
 8004224:	58025480 	.word	0x58025480
 8004228:	58025494 	.word	0x58025494
 800422c:	2300      	movs	r3, #0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004240:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6d      	ldr	r2, [pc, #436]	@ (80043fc <HAL_DMA_Abort+0x444>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d04a      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6b      	ldr	r2, [pc, #428]	@ (8004400 <HAL_DMA_Abort+0x448>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d045      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6a      	ldr	r2, [pc, #424]	@ (8004404 <HAL_DMA_Abort+0x44c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d040      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a68      	ldr	r2, [pc, #416]	@ (8004408 <HAL_DMA_Abort+0x450>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d03b      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a67      	ldr	r2, [pc, #412]	@ (800440c <HAL_DMA_Abort+0x454>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d036      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a65      	ldr	r2, [pc, #404]	@ (8004410 <HAL_DMA_Abort+0x458>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d031      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a64      	ldr	r2, [pc, #400]	@ (8004414 <HAL_DMA_Abort+0x45c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d02c      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a62      	ldr	r2, [pc, #392]	@ (8004418 <HAL_DMA_Abort+0x460>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d027      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a61      	ldr	r2, [pc, #388]	@ (800441c <HAL_DMA_Abort+0x464>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d022      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a5f      	ldr	r2, [pc, #380]	@ (8004420 <HAL_DMA_Abort+0x468>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d01d      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004424 <HAL_DMA_Abort+0x46c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d018      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a5c      	ldr	r2, [pc, #368]	@ (8004428 <HAL_DMA_Abort+0x470>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a5b      	ldr	r2, [pc, #364]	@ (800442c <HAL_DMA_Abort+0x474>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a59      	ldr	r2, [pc, #356]	@ (8004430 <HAL_DMA_Abort+0x478>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a58      	ldr	r2, [pc, #352]	@ (8004434 <HAL_DMA_Abort+0x47c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_DMA_Abort+0x32a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a56      	ldr	r2, [pc, #344]	@ (8004438 <HAL_DMA_Abort+0x480>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <HAL_DMA_Abort+0x33c>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e007      	b.n	8004304 <HAL_DMA_Abort+0x34c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004304:	e013      	b.n	800432e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004306:	f7fe fc71 	bl	8002bec <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b05      	cmp	r3, #5
 8004312:	d90c      	bls.n	800432e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2203      	movs	r2, #3
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e12d      	b.n	800458a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e5      	bne.n	8004306 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2f      	ldr	r2, [pc, #188]	@ (80043fc <HAL_DMA_Abort+0x444>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d04a      	beq.n	80043da <HAL_DMA_Abort+0x422>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2d      	ldr	r2, [pc, #180]	@ (8004400 <HAL_DMA_Abort+0x448>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d045      	beq.n	80043da <HAL_DMA_Abort+0x422>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2c      	ldr	r2, [pc, #176]	@ (8004404 <HAL_DMA_Abort+0x44c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d040      	beq.n	80043da <HAL_DMA_Abort+0x422>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2a      	ldr	r2, [pc, #168]	@ (8004408 <HAL_DMA_Abort+0x450>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d03b      	beq.n	80043da <HAL_DMA_Abort+0x422>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a29      	ldr	r2, [pc, #164]	@ (800440c <HAL_DMA_Abort+0x454>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d036      	beq.n	80043da <HAL_DMA_Abort+0x422>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a27      	ldr	r2, [pc, #156]	@ (8004410 <HAL_DMA_Abort+0x458>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d031      	beq.n	80043da <HAL_DMA_Abort+0x422>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a26      	ldr	r2, [pc, #152]	@ (8004414 <HAL_DMA_Abort+0x45c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d02c      	beq.n	80043da <HAL_DMA_Abort+0x422>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a24      	ldr	r2, [pc, #144]	@ (8004418 <HAL_DMA_Abort+0x460>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d027      	beq.n	80043da <HAL_DMA_Abort+0x422>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a23      	ldr	r2, [pc, #140]	@ (800441c <HAL_DMA_Abort+0x464>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d022      	beq.n	80043da <HAL_DMA_Abort+0x422>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a21      	ldr	r2, [pc, #132]	@ (8004420 <HAL_DMA_Abort+0x468>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01d      	beq.n	80043da <HAL_DMA_Abort+0x422>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a20      	ldr	r2, [pc, #128]	@ (8004424 <HAL_DMA_Abort+0x46c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d018      	beq.n	80043da <HAL_DMA_Abort+0x422>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004428 <HAL_DMA_Abort+0x470>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_DMA_Abort+0x422>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1d      	ldr	r2, [pc, #116]	@ (800442c <HAL_DMA_Abort+0x474>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_DMA_Abort+0x422>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004430 <HAL_DMA_Abort+0x478>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_DMA_Abort+0x422>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004434 <HAL_DMA_Abort+0x47c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_DMA_Abort+0x422>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <HAL_DMA_Abort+0x480>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <HAL_DMA_Abort+0x426>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_DMA_Abort+0x428>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02b      	beq.n	800443c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	223f      	movs	r2, #63	@ 0x3f
 80043f4:	409a      	lsls	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	e02a      	b.n	8004452 <HAL_DMA_Abort+0x49a>
 80043fc:	40020010 	.word	0x40020010
 8004400:	40020028 	.word	0x40020028
 8004404:	40020040 	.word	0x40020040
 8004408:	40020058 	.word	0x40020058
 800440c:	40020070 	.word	0x40020070
 8004410:	40020088 	.word	0x40020088
 8004414:	400200a0 	.word	0x400200a0
 8004418:	400200b8 	.word	0x400200b8
 800441c:	40020410 	.word	0x40020410
 8004420:	40020428 	.word	0x40020428
 8004424:	40020440 	.word	0x40020440
 8004428:	40020458 	.word	0x40020458
 800442c:	40020470 	.word	0x40020470
 8004430:	40020488 	.word	0x40020488
 8004434:	400204a0 	.word	0x400204a0
 8004438:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2201      	movs	r2, #1
 800444c:	409a      	lsls	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a4f      	ldr	r2, [pc, #316]	@ (8004594 <HAL_DMA_Abort+0x5dc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d072      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a4d      	ldr	r2, [pc, #308]	@ (8004598 <HAL_DMA_Abort+0x5e0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d06d      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a4c      	ldr	r2, [pc, #304]	@ (800459c <HAL_DMA_Abort+0x5e4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d068      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a4a      	ldr	r2, [pc, #296]	@ (80045a0 <HAL_DMA_Abort+0x5e8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d063      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a49      	ldr	r2, [pc, #292]	@ (80045a4 <HAL_DMA_Abort+0x5ec>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d05e      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a47      	ldr	r2, [pc, #284]	@ (80045a8 <HAL_DMA_Abort+0x5f0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d059      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a46      	ldr	r2, [pc, #280]	@ (80045ac <HAL_DMA_Abort+0x5f4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d054      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a44      	ldr	r2, [pc, #272]	@ (80045b0 <HAL_DMA_Abort+0x5f8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d04f      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a43      	ldr	r2, [pc, #268]	@ (80045b4 <HAL_DMA_Abort+0x5fc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d04a      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a41      	ldr	r2, [pc, #260]	@ (80045b8 <HAL_DMA_Abort+0x600>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d045      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a40      	ldr	r2, [pc, #256]	@ (80045bc <HAL_DMA_Abort+0x604>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d040      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a3e      	ldr	r2, [pc, #248]	@ (80045c0 <HAL_DMA_Abort+0x608>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d03b      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a3d      	ldr	r2, [pc, #244]	@ (80045c4 <HAL_DMA_Abort+0x60c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d036      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a3b      	ldr	r2, [pc, #236]	@ (80045c8 <HAL_DMA_Abort+0x610>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d031      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a3a      	ldr	r2, [pc, #232]	@ (80045cc <HAL_DMA_Abort+0x614>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d02c      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a38      	ldr	r2, [pc, #224]	@ (80045d0 <HAL_DMA_Abort+0x618>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d027      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a37      	ldr	r2, [pc, #220]	@ (80045d4 <HAL_DMA_Abort+0x61c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a35      	ldr	r2, [pc, #212]	@ (80045d8 <HAL_DMA_Abort+0x620>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01d      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a34      	ldr	r2, [pc, #208]	@ (80045dc <HAL_DMA_Abort+0x624>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d018      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a32      	ldr	r2, [pc, #200]	@ (80045e0 <HAL_DMA_Abort+0x628>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a31      	ldr	r2, [pc, #196]	@ (80045e4 <HAL_DMA_Abort+0x62c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2f      	ldr	r2, [pc, #188]	@ (80045e8 <HAL_DMA_Abort+0x630>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2e      	ldr	r2, [pc, #184]	@ (80045ec <HAL_DMA_Abort+0x634>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_DMA_Abort+0x58a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a2c      	ldr	r2, [pc, #176]	@ (80045f0 <HAL_DMA_Abort+0x638>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d101      	bne.n	8004546 <HAL_DMA_Abort+0x58e>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <HAL_DMA_Abort+0x590>
 8004546:	2300      	movs	r3, #0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d015      	beq.n	8004578 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004554:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00c      	beq.n	8004578 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800456c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004576:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40020010 	.word	0x40020010
 8004598:	40020028 	.word	0x40020028
 800459c:	40020040 	.word	0x40020040
 80045a0:	40020058 	.word	0x40020058
 80045a4:	40020070 	.word	0x40020070
 80045a8:	40020088 	.word	0x40020088
 80045ac:	400200a0 	.word	0x400200a0
 80045b0:	400200b8 	.word	0x400200b8
 80045b4:	40020410 	.word	0x40020410
 80045b8:	40020428 	.word	0x40020428
 80045bc:	40020440 	.word	0x40020440
 80045c0:	40020458 	.word	0x40020458
 80045c4:	40020470 	.word	0x40020470
 80045c8:	40020488 	.word	0x40020488
 80045cc:	400204a0 	.word	0x400204a0
 80045d0:	400204b8 	.word	0x400204b8
 80045d4:	58025408 	.word	0x58025408
 80045d8:	5802541c 	.word	0x5802541c
 80045dc:	58025430 	.word	0x58025430
 80045e0:	58025444 	.word	0x58025444
 80045e4:	58025458 	.word	0x58025458
 80045e8:	5802546c 	.word	0x5802546c
 80045ec:	58025480 	.word	0x58025480
 80045f0:	58025494 	.word	0x58025494

080045f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e237      	b.n	8004a76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d004      	beq.n	800461c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2280      	movs	r2, #128	@ 0x80
 8004616:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e22c      	b.n	8004a76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5c      	ldr	r2, [pc, #368]	@ (8004794 <HAL_DMA_Abort_IT+0x1a0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d04a      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a5b      	ldr	r2, [pc, #364]	@ (8004798 <HAL_DMA_Abort_IT+0x1a4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d045      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a59      	ldr	r2, [pc, #356]	@ (800479c <HAL_DMA_Abort_IT+0x1a8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d040      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a58      	ldr	r2, [pc, #352]	@ (80047a0 <HAL_DMA_Abort_IT+0x1ac>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d03b      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a56      	ldr	r2, [pc, #344]	@ (80047a4 <HAL_DMA_Abort_IT+0x1b0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d036      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a55      	ldr	r2, [pc, #340]	@ (80047a8 <HAL_DMA_Abort_IT+0x1b4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d031      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a53      	ldr	r2, [pc, #332]	@ (80047ac <HAL_DMA_Abort_IT+0x1b8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d02c      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a52      	ldr	r2, [pc, #328]	@ (80047b0 <HAL_DMA_Abort_IT+0x1bc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d027      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a50      	ldr	r2, [pc, #320]	@ (80047b4 <HAL_DMA_Abort_IT+0x1c0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d022      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a4f      	ldr	r2, [pc, #316]	@ (80047b8 <HAL_DMA_Abort_IT+0x1c4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d01d      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a4d      	ldr	r2, [pc, #308]	@ (80047bc <HAL_DMA_Abort_IT+0x1c8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d018      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a4c      	ldr	r2, [pc, #304]	@ (80047c0 <HAL_DMA_Abort_IT+0x1cc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a4a      	ldr	r2, [pc, #296]	@ (80047c4 <HAL_DMA_Abort_IT+0x1d0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00e      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a49      	ldr	r2, [pc, #292]	@ (80047c8 <HAL_DMA_Abort_IT+0x1d4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a47      	ldr	r2, [pc, #284]	@ (80047cc <HAL_DMA_Abort_IT+0x1d8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_DMA_Abort_IT+0xc8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a46      	ldr	r2, [pc, #280]	@ (80047d0 <HAL_DMA_Abort_IT+0x1dc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_DMA_Abort_IT+0xcc>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_DMA_Abort_IT+0xce>
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8086 	beq.w	80047d4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2204      	movs	r2, #4
 80046cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004794 <HAL_DMA_Abort_IT+0x1a0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d04a      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2e      	ldr	r2, [pc, #184]	@ (8004798 <HAL_DMA_Abort_IT+0x1a4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d045      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2c      	ldr	r2, [pc, #176]	@ (800479c <HAL_DMA_Abort_IT+0x1a8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d040      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a2b      	ldr	r2, [pc, #172]	@ (80047a0 <HAL_DMA_Abort_IT+0x1ac>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d03b      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a29      	ldr	r2, [pc, #164]	@ (80047a4 <HAL_DMA_Abort_IT+0x1b0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d036      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a28      	ldr	r2, [pc, #160]	@ (80047a8 <HAL_DMA_Abort_IT+0x1b4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d031      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a26      	ldr	r2, [pc, #152]	@ (80047ac <HAL_DMA_Abort_IT+0x1b8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d02c      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a25      	ldr	r2, [pc, #148]	@ (80047b0 <HAL_DMA_Abort_IT+0x1bc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d027      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a23      	ldr	r2, [pc, #140]	@ (80047b4 <HAL_DMA_Abort_IT+0x1c0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d022      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a22      	ldr	r2, [pc, #136]	@ (80047b8 <HAL_DMA_Abort_IT+0x1c4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d01d      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a20      	ldr	r2, [pc, #128]	@ (80047bc <HAL_DMA_Abort_IT+0x1c8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d018      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1f      	ldr	r2, [pc, #124]	@ (80047c0 <HAL_DMA_Abort_IT+0x1cc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1d      	ldr	r2, [pc, #116]	@ (80047c4 <HAL_DMA_Abort_IT+0x1d0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00e      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1c      	ldr	r2, [pc, #112]	@ (80047c8 <HAL_DMA_Abort_IT+0x1d4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1a      	ldr	r2, [pc, #104]	@ (80047cc <HAL_DMA_Abort_IT+0x1d8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_DMA_Abort_IT+0x17c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a19      	ldr	r2, [pc, #100]	@ (80047d0 <HAL_DMA_Abort_IT+0x1dc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <HAL_DMA_Abort_IT+0x18e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e178      	b.n	8004a74 <HAL_DMA_Abort_IT+0x480>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0201 	bic.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e16f      	b.n	8004a74 <HAL_DMA_Abort_IT+0x480>
 8004794:	40020010 	.word	0x40020010
 8004798:	40020028 	.word	0x40020028
 800479c:	40020040 	.word	0x40020040
 80047a0:	40020058 	.word	0x40020058
 80047a4:	40020070 	.word	0x40020070
 80047a8:	40020088 	.word	0x40020088
 80047ac:	400200a0 	.word	0x400200a0
 80047b0:	400200b8 	.word	0x400200b8
 80047b4:	40020410 	.word	0x40020410
 80047b8:	40020428 	.word	0x40020428
 80047bc:	40020440 	.word	0x40020440
 80047c0:	40020458 	.word	0x40020458
 80047c4:	40020470 	.word	0x40020470
 80047c8:	40020488 	.word	0x40020488
 80047cc:	400204a0 	.word	0x400204a0
 80047d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 020e 	bic.w	r2, r2, #14
 80047e2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6c      	ldr	r2, [pc, #432]	@ (800499c <HAL_DMA_Abort_IT+0x3a8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d04a      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a6b      	ldr	r2, [pc, #428]	@ (80049a0 <HAL_DMA_Abort_IT+0x3ac>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d045      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a69      	ldr	r2, [pc, #420]	@ (80049a4 <HAL_DMA_Abort_IT+0x3b0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d040      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a68      	ldr	r2, [pc, #416]	@ (80049a8 <HAL_DMA_Abort_IT+0x3b4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d03b      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a66      	ldr	r2, [pc, #408]	@ (80049ac <HAL_DMA_Abort_IT+0x3b8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d036      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a65      	ldr	r2, [pc, #404]	@ (80049b0 <HAL_DMA_Abort_IT+0x3bc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d031      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a63      	ldr	r2, [pc, #396]	@ (80049b4 <HAL_DMA_Abort_IT+0x3c0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02c      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a62      	ldr	r2, [pc, #392]	@ (80049b8 <HAL_DMA_Abort_IT+0x3c4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d027      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a60      	ldr	r2, [pc, #384]	@ (80049bc <HAL_DMA_Abort_IT+0x3c8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d022      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a5f      	ldr	r2, [pc, #380]	@ (80049c0 <HAL_DMA_Abort_IT+0x3cc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d01d      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a5d      	ldr	r2, [pc, #372]	@ (80049c4 <HAL_DMA_Abort_IT+0x3d0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5c      	ldr	r2, [pc, #368]	@ (80049c8 <HAL_DMA_Abort_IT+0x3d4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a5a      	ldr	r2, [pc, #360]	@ (80049cc <HAL_DMA_Abort_IT+0x3d8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a59      	ldr	r2, [pc, #356]	@ (80049d0 <HAL_DMA_Abort_IT+0x3dc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a57      	ldr	r2, [pc, #348]	@ (80049d4 <HAL_DMA_Abort_IT+0x3e0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_DMA_Abort_IT+0x290>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a56      	ldr	r2, [pc, #344]	@ (80049d8 <HAL_DMA_Abort_IT+0x3e4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d108      	bne.n	8004896 <HAL_DMA_Abort_IT+0x2a2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0201 	bic.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e007      	b.n	80048a6 <HAL_DMA_Abort_IT+0x2b2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3c      	ldr	r2, [pc, #240]	@ (800499c <HAL_DMA_Abort_IT+0x3a8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d072      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a3a      	ldr	r2, [pc, #232]	@ (80049a0 <HAL_DMA_Abort_IT+0x3ac>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d06d      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a39      	ldr	r2, [pc, #228]	@ (80049a4 <HAL_DMA_Abort_IT+0x3b0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d068      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a37      	ldr	r2, [pc, #220]	@ (80049a8 <HAL_DMA_Abort_IT+0x3b4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d063      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a36      	ldr	r2, [pc, #216]	@ (80049ac <HAL_DMA_Abort_IT+0x3b8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d05e      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a34      	ldr	r2, [pc, #208]	@ (80049b0 <HAL_DMA_Abort_IT+0x3bc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d059      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a33      	ldr	r2, [pc, #204]	@ (80049b4 <HAL_DMA_Abort_IT+0x3c0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d054      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a31      	ldr	r2, [pc, #196]	@ (80049b8 <HAL_DMA_Abort_IT+0x3c4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d04f      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a30      	ldr	r2, [pc, #192]	@ (80049bc <HAL_DMA_Abort_IT+0x3c8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d04a      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2e      	ldr	r2, [pc, #184]	@ (80049c0 <HAL_DMA_Abort_IT+0x3cc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d045      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a2d      	ldr	r2, [pc, #180]	@ (80049c4 <HAL_DMA_Abort_IT+0x3d0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d040      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2b      	ldr	r2, [pc, #172]	@ (80049c8 <HAL_DMA_Abort_IT+0x3d4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d03b      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a2a      	ldr	r2, [pc, #168]	@ (80049cc <HAL_DMA_Abort_IT+0x3d8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d036      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a28      	ldr	r2, [pc, #160]	@ (80049d0 <HAL_DMA_Abort_IT+0x3dc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d031      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a27      	ldr	r2, [pc, #156]	@ (80049d4 <HAL_DMA_Abort_IT+0x3e0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d02c      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a25      	ldr	r2, [pc, #148]	@ (80049d8 <HAL_DMA_Abort_IT+0x3e4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d027      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a24      	ldr	r2, [pc, #144]	@ (80049dc <HAL_DMA_Abort_IT+0x3e8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a22      	ldr	r2, [pc, #136]	@ (80049e0 <HAL_DMA_Abort_IT+0x3ec>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01d      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a21      	ldr	r2, [pc, #132]	@ (80049e4 <HAL_DMA_Abort_IT+0x3f0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1f      	ldr	r2, [pc, #124]	@ (80049e8 <HAL_DMA_Abort_IT+0x3f4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1e      	ldr	r2, [pc, #120]	@ (80049ec <HAL_DMA_Abort_IT+0x3f8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1c      	ldr	r2, [pc, #112]	@ (80049f0 <HAL_DMA_Abort_IT+0x3fc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1b      	ldr	r2, [pc, #108]	@ (80049f4 <HAL_DMA_Abort_IT+0x400>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_DMA_Abort_IT+0x3a2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a19      	ldr	r2, [pc, #100]	@ (80049f8 <HAL_DMA_Abort_IT+0x404>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d132      	bne.n	80049fc <HAL_DMA_Abort_IT+0x408>
 8004996:	2301      	movs	r3, #1
 8004998:	e031      	b.n	80049fe <HAL_DMA_Abort_IT+0x40a>
 800499a:	bf00      	nop
 800499c:	40020010 	.word	0x40020010
 80049a0:	40020028 	.word	0x40020028
 80049a4:	40020040 	.word	0x40020040
 80049a8:	40020058 	.word	0x40020058
 80049ac:	40020070 	.word	0x40020070
 80049b0:	40020088 	.word	0x40020088
 80049b4:	400200a0 	.word	0x400200a0
 80049b8:	400200b8 	.word	0x400200b8
 80049bc:	40020410 	.word	0x40020410
 80049c0:	40020428 	.word	0x40020428
 80049c4:	40020440 	.word	0x40020440
 80049c8:	40020458 	.word	0x40020458
 80049cc:	40020470 	.word	0x40020470
 80049d0:	40020488 	.word	0x40020488
 80049d4:	400204a0 	.word	0x400204a0
 80049d8:	400204b8 	.word	0x400204b8
 80049dc:	58025408 	.word	0x58025408
 80049e0:	5802541c 	.word	0x5802541c
 80049e4:	58025430 	.word	0x58025430
 80049e8:	58025444 	.word	0x58025444
 80049ec:	58025458 	.word	0x58025458
 80049f0:	5802546c 	.word	0x5802546c
 80049f4:	58025480 	.word	0x58025480
 80049f8:	58025494 	.word	0x58025494
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d028      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2201      	movs	r2, #1
 8004a22:	409a      	lsls	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop

08004a80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	@ 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a8c:	4b67      	ldr	r3, [pc, #412]	@ (8004c2c <HAL_DMA_IRQHandler+0x1ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a67      	ldr	r2, [pc, #412]	@ (8004c30 <HAL_DMA_IRQHandler+0x1b0>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	0a9b      	lsrs	r3, r3, #10
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a5f      	ldr	r2, [pc, #380]	@ (8004c34 <HAL_DMA_IRQHandler+0x1b4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d04a      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c38 <HAL_DMA_IRQHandler+0x1b8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d045      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5c      	ldr	r2, [pc, #368]	@ (8004c3c <HAL_DMA_IRQHandler+0x1bc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d040      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8004c40 <HAL_DMA_IRQHandler+0x1c0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d03b      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a59      	ldr	r2, [pc, #356]	@ (8004c44 <HAL_DMA_IRQHandler+0x1c4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d036      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a57      	ldr	r2, [pc, #348]	@ (8004c48 <HAL_DMA_IRQHandler+0x1c8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d031      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a56      	ldr	r2, [pc, #344]	@ (8004c4c <HAL_DMA_IRQHandler+0x1cc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d02c      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a54      	ldr	r2, [pc, #336]	@ (8004c50 <HAL_DMA_IRQHandler+0x1d0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d027      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a53      	ldr	r2, [pc, #332]	@ (8004c54 <HAL_DMA_IRQHandler+0x1d4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d022      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a51      	ldr	r2, [pc, #324]	@ (8004c58 <HAL_DMA_IRQHandler+0x1d8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01d      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a50      	ldr	r2, [pc, #320]	@ (8004c5c <HAL_DMA_IRQHandler+0x1dc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a4e      	ldr	r2, [pc, #312]	@ (8004c60 <HAL_DMA_IRQHandler+0x1e0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8004c64 <HAL_DMA_IRQHandler+0x1e4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a4b      	ldr	r2, [pc, #300]	@ (8004c68 <HAL_DMA_IRQHandler+0x1e8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a4a      	ldr	r2, [pc, #296]	@ (8004c6c <HAL_DMA_IRQHandler+0x1ec>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xd2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a48      	ldr	r2, [pc, #288]	@ (8004c70 <HAL_DMA_IRQHandler+0x1f0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d101      	bne.n	8004b56 <HAL_DMA_IRQHandler+0xd6>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <HAL_DMA_IRQHandler+0xd8>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 842b 	beq.w	80053b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b62:	f003 031f 	and.w	r3, r3, #31
 8004b66:	2208      	movs	r2, #8
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80a2 	beq.w	8004cb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2e      	ldr	r2, [pc, #184]	@ (8004c34 <HAL_DMA_IRQHandler+0x1b4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d04a      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2d      	ldr	r2, [pc, #180]	@ (8004c38 <HAL_DMA_IRQHandler+0x1b8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d045      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c3c <HAL_DMA_IRQHandler+0x1bc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d040      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2a      	ldr	r2, [pc, #168]	@ (8004c40 <HAL_DMA_IRQHandler+0x1c0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d03b      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a28      	ldr	r2, [pc, #160]	@ (8004c44 <HAL_DMA_IRQHandler+0x1c4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d036      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a27      	ldr	r2, [pc, #156]	@ (8004c48 <HAL_DMA_IRQHandler+0x1c8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d031      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a25      	ldr	r2, [pc, #148]	@ (8004c4c <HAL_DMA_IRQHandler+0x1cc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d02c      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a24      	ldr	r2, [pc, #144]	@ (8004c50 <HAL_DMA_IRQHandler+0x1d0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d027      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a22      	ldr	r2, [pc, #136]	@ (8004c54 <HAL_DMA_IRQHandler+0x1d4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d022      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a21      	ldr	r2, [pc, #132]	@ (8004c58 <HAL_DMA_IRQHandler+0x1d8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d01d      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8004c5c <HAL_DMA_IRQHandler+0x1dc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d018      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c60 <HAL_DMA_IRQHandler+0x1e0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d013      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <HAL_DMA_IRQHandler+0x1e4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00e      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004c68 <HAL_DMA_IRQHandler+0x1e8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a19      	ldr	r2, [pc, #100]	@ (8004c6c <HAL_DMA_IRQHandler+0x1ec>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d004      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x194>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a18      	ldr	r2, [pc, #96]	@ (8004c70 <HAL_DMA_IRQHandler+0x1f0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d12f      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x1f4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf14      	ite	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	2300      	moveq	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	e02e      	b.n	8004c88 <HAL_DMA_IRQHandler+0x208>
 8004c2a:	bf00      	nop
 8004c2c:	24000000 	.word	0x24000000
 8004c30:	1b4e81b5 	.word	0x1b4e81b5
 8004c34:	40020010 	.word	0x40020010
 8004c38:	40020028 	.word	0x40020028
 8004c3c:	40020040 	.word	0x40020040
 8004c40:	40020058 	.word	0x40020058
 8004c44:	40020070 	.word	0x40020070
 8004c48:	40020088 	.word	0x40020088
 8004c4c:	400200a0 	.word	0x400200a0
 8004c50:	400200b8 	.word	0x400200b8
 8004c54:	40020410 	.word	0x40020410
 8004c58:	40020428 	.word	0x40020428
 8004c5c:	40020440 	.word	0x40020440
 8004c60:	40020458 	.word	0x40020458
 8004c64:	40020470 	.word	0x40020470
 8004c68:	40020488 	.word	0x40020488
 8004c6c:	400204a0 	.word	0x400204a0
 8004c70:	400204b8 	.word	0x400204b8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bf14      	ite	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	2300      	moveq	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d015      	beq.n	8004cb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0204 	bic.w	r2, r2, #4
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb0:	f043 0201 	orr.w	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d06e      	beq.n	8004dac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a69      	ldr	r2, [pc, #420]	@ (8004e78 <HAL_DMA_IRQHandler+0x3f8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d04a      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a67      	ldr	r2, [pc, #412]	@ (8004e7c <HAL_DMA_IRQHandler+0x3fc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d045      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a66      	ldr	r2, [pc, #408]	@ (8004e80 <HAL_DMA_IRQHandler+0x400>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d040      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a64      	ldr	r2, [pc, #400]	@ (8004e84 <HAL_DMA_IRQHandler+0x404>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d03b      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a63      	ldr	r2, [pc, #396]	@ (8004e88 <HAL_DMA_IRQHandler+0x408>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d036      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a61      	ldr	r2, [pc, #388]	@ (8004e8c <HAL_DMA_IRQHandler+0x40c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d031      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a60      	ldr	r2, [pc, #384]	@ (8004e90 <HAL_DMA_IRQHandler+0x410>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d02c      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5e      	ldr	r2, [pc, #376]	@ (8004e94 <HAL_DMA_IRQHandler+0x414>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d027      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a5d      	ldr	r2, [pc, #372]	@ (8004e98 <HAL_DMA_IRQHandler+0x418>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d022      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a5b      	ldr	r2, [pc, #364]	@ (8004e9c <HAL_DMA_IRQHandler+0x41c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01d      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a5a      	ldr	r2, [pc, #360]	@ (8004ea0 <HAL_DMA_IRQHandler+0x420>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d018      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a58      	ldr	r2, [pc, #352]	@ (8004ea4 <HAL_DMA_IRQHandler+0x424>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a57      	ldr	r2, [pc, #348]	@ (8004ea8 <HAL_DMA_IRQHandler+0x428>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a55      	ldr	r2, [pc, #340]	@ (8004eac <HAL_DMA_IRQHandler+0x42c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a54      	ldr	r2, [pc, #336]	@ (8004eb0 <HAL_DMA_IRQHandler+0x430>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x2ee>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a52      	ldr	r2, [pc, #328]	@ (8004eb4 <HAL_DMA_IRQHandler+0x434>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10a      	bne.n	8004d84 <HAL_DMA_IRQHandler+0x304>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	e003      	b.n	8004d8c <HAL_DMA_IRQHandler+0x30c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00d      	beq.n	8004dac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2201      	movs	r2, #1
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da4:	f043 0202 	orr.w	r2, r3, #2
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	2204      	movs	r2, #4
 8004db6:	409a      	lsls	r2, r3
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 808f 	beq.w	8004ee0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e78 <HAL_DMA_IRQHandler+0x3f8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d04a      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e7c <HAL_DMA_IRQHandler+0x3fc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d045      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a29      	ldr	r2, [pc, #164]	@ (8004e80 <HAL_DMA_IRQHandler+0x400>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d040      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a27      	ldr	r2, [pc, #156]	@ (8004e84 <HAL_DMA_IRQHandler+0x404>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d03b      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a26      	ldr	r2, [pc, #152]	@ (8004e88 <HAL_DMA_IRQHandler+0x408>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d036      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a24      	ldr	r2, [pc, #144]	@ (8004e8c <HAL_DMA_IRQHandler+0x40c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d031      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a23      	ldr	r2, [pc, #140]	@ (8004e90 <HAL_DMA_IRQHandler+0x410>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d02c      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a21      	ldr	r2, [pc, #132]	@ (8004e94 <HAL_DMA_IRQHandler+0x414>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d027      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a20      	ldr	r2, [pc, #128]	@ (8004e98 <HAL_DMA_IRQHandler+0x418>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d022      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	@ (8004e9c <HAL_DMA_IRQHandler+0x41c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01d      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea0 <HAL_DMA_IRQHandler+0x420>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d018      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <HAL_DMA_IRQHandler+0x424>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea8 <HAL_DMA_IRQHandler+0x428>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00e      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a18      	ldr	r2, [pc, #96]	@ (8004eac <HAL_DMA_IRQHandler+0x42c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d009      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a17      	ldr	r2, [pc, #92]	@ (8004eb0 <HAL_DMA_IRQHandler+0x430>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d004      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x3e2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	@ (8004eb4 <HAL_DMA_IRQHandler+0x434>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d12a      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0x438>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf14      	ite	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	2300      	moveq	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e023      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x440>
 8004e78:	40020010 	.word	0x40020010
 8004e7c:	40020028 	.word	0x40020028
 8004e80:	40020040 	.word	0x40020040
 8004e84:	40020058 	.word	0x40020058
 8004e88:	40020070 	.word	0x40020070
 8004e8c:	40020088 	.word	0x40020088
 8004e90:	400200a0 	.word	0x400200a0
 8004e94:	400200b8 	.word	0x400200b8
 8004e98:	40020410 	.word	0x40020410
 8004e9c:	40020428 	.word	0x40020428
 8004ea0:	40020440 	.word	0x40020440
 8004ea4:	40020458 	.word	0x40020458
 8004ea8:	40020470 	.word	0x40020470
 8004eac:	40020488 	.word	0x40020488
 8004eb0:	400204a0 	.word	0x400204a0
 8004eb4:	400204b8 	.word	0x400204b8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	2204      	movs	r2, #4
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed8:	f043 0204 	orr.w	r2, r3, #4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	2210      	movs	r2, #16
 8004eea:	409a      	lsls	r2, r3
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80a6 	beq.w	8005042 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a85      	ldr	r2, [pc, #532]	@ (8005110 <HAL_DMA_IRQHandler+0x690>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d04a      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a83      	ldr	r2, [pc, #524]	@ (8005114 <HAL_DMA_IRQHandler+0x694>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d045      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a82      	ldr	r2, [pc, #520]	@ (8005118 <HAL_DMA_IRQHandler+0x698>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d040      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a80      	ldr	r2, [pc, #512]	@ (800511c <HAL_DMA_IRQHandler+0x69c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d03b      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a7f      	ldr	r2, [pc, #508]	@ (8005120 <HAL_DMA_IRQHandler+0x6a0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d036      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a7d      	ldr	r2, [pc, #500]	@ (8005124 <HAL_DMA_IRQHandler+0x6a4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d031      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a7c      	ldr	r2, [pc, #496]	@ (8005128 <HAL_DMA_IRQHandler+0x6a8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d02c      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a7a      	ldr	r2, [pc, #488]	@ (800512c <HAL_DMA_IRQHandler+0x6ac>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d027      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a79      	ldr	r2, [pc, #484]	@ (8005130 <HAL_DMA_IRQHandler+0x6b0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a77      	ldr	r2, [pc, #476]	@ (8005134 <HAL_DMA_IRQHandler+0x6b4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01d      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a76      	ldr	r2, [pc, #472]	@ (8005138 <HAL_DMA_IRQHandler+0x6b8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a74      	ldr	r2, [pc, #464]	@ (800513c <HAL_DMA_IRQHandler+0x6bc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a73      	ldr	r2, [pc, #460]	@ (8005140 <HAL_DMA_IRQHandler+0x6c0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a71      	ldr	r2, [pc, #452]	@ (8005144 <HAL_DMA_IRQHandler+0x6c4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a70      	ldr	r2, [pc, #448]	@ (8005148 <HAL_DMA_IRQHandler+0x6c8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_DMA_IRQHandler+0x516>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a6e      	ldr	r2, [pc, #440]	@ (800514c <HAL_DMA_IRQHandler+0x6cc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10a      	bne.n	8004fac <HAL_DMA_IRQHandler+0x52c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	e009      	b.n	8004fc0 <HAL_DMA_IRQHandler+0x540>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf14      	ite	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	2300      	moveq	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d03e      	beq.n	8005042 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	2210      	movs	r2, #16
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d018      	beq.n	8005014 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d108      	bne.n	8005002 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d024      	beq.n	8005042 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	4798      	blx	r3
 8005000:	e01f      	b.n	8005042 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01b      	beq.n	8005042 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
 8005012:	e016      	b.n	8005042 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d107      	bne.n	8005032 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0208 	bic.w	r2, r2, #8
 8005030:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	2220      	movs	r2, #32
 800504c:	409a      	lsls	r2, r3
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8110 	beq.w	8005278 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a2c      	ldr	r2, [pc, #176]	@ (8005110 <HAL_DMA_IRQHandler+0x690>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d04a      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a2b      	ldr	r2, [pc, #172]	@ (8005114 <HAL_DMA_IRQHandler+0x694>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d045      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a29      	ldr	r2, [pc, #164]	@ (8005118 <HAL_DMA_IRQHandler+0x698>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d040      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a28      	ldr	r2, [pc, #160]	@ (800511c <HAL_DMA_IRQHandler+0x69c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d03b      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a26      	ldr	r2, [pc, #152]	@ (8005120 <HAL_DMA_IRQHandler+0x6a0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d036      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a25      	ldr	r2, [pc, #148]	@ (8005124 <HAL_DMA_IRQHandler+0x6a4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d031      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a23      	ldr	r2, [pc, #140]	@ (8005128 <HAL_DMA_IRQHandler+0x6a8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d02c      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a22      	ldr	r2, [pc, #136]	@ (800512c <HAL_DMA_IRQHandler+0x6ac>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d027      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a20      	ldr	r2, [pc, #128]	@ (8005130 <HAL_DMA_IRQHandler+0x6b0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d022      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005134 <HAL_DMA_IRQHandler+0x6b4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d01d      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005138 <HAL_DMA_IRQHandler+0x6b8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d018      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1c      	ldr	r2, [pc, #112]	@ (800513c <HAL_DMA_IRQHandler+0x6bc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005140 <HAL_DMA_IRQHandler+0x6c0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00e      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a19      	ldr	r2, [pc, #100]	@ (8005144 <HAL_DMA_IRQHandler+0x6c4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d009      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a17      	ldr	r2, [pc, #92]	@ (8005148 <HAL_DMA_IRQHandler+0x6c8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x678>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a16      	ldr	r2, [pc, #88]	@ (800514c <HAL_DMA_IRQHandler+0x6cc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d12b      	bne.n	8005150 <HAL_DMA_IRQHandler+0x6d0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf14      	ite	ne
 8005106:	2301      	movne	r3, #1
 8005108:	2300      	moveq	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	e02a      	b.n	8005164 <HAL_DMA_IRQHandler+0x6e4>
 800510e:	bf00      	nop
 8005110:	40020010 	.word	0x40020010
 8005114:	40020028 	.word	0x40020028
 8005118:	40020040 	.word	0x40020040
 800511c:	40020058 	.word	0x40020058
 8005120:	40020070 	.word	0x40020070
 8005124:	40020088 	.word	0x40020088
 8005128:	400200a0 	.word	0x400200a0
 800512c:	400200b8 	.word	0x400200b8
 8005130:	40020410 	.word	0x40020410
 8005134:	40020428 	.word	0x40020428
 8005138:	40020440 	.word	0x40020440
 800513c:	40020458 	.word	0x40020458
 8005140:	40020470 	.word	0x40020470
 8005144:	40020488 	.word	0x40020488
 8005148:	400204a0 	.word	0x400204a0
 800514c:	400204b8 	.word	0x400204b8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	bf14      	ite	ne
 800515e:	2301      	movne	r3, #1
 8005160:	2300      	moveq	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8087 	beq.w	8005278 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	2220      	movs	r2, #32
 8005174:	409a      	lsls	r2, r3
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b04      	cmp	r3, #4
 8005184:	d139      	bne.n	80051fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0216 	bic.w	r2, r2, #22
 8005194:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <HAL_DMA_IRQHandler+0x736>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0208 	bic.w	r2, r2, #8
 80051c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	223f      	movs	r2, #63	@ 0x3f
 80051d0:	409a      	lsls	r2, r3
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 834a 	beq.w	8005884 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4798      	blx	r3
          }
          return;
 80051f8:	e344      	b.n	8005884 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d018      	beq.n	800523a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d108      	bne.n	8005228 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521a:	2b00      	cmp	r3, #0
 800521c:	d02c      	beq.n	8005278 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
 8005226:	e027      	b.n	8005278 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d023      	beq.n	8005278 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
 8005238:	e01e      	b.n	8005278 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10f      	bne.n	8005268 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0210 	bic.w	r2, r2, #16
 8005256:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8306 	beq.w	800588e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8088 	beq.w	80053a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2204      	movs	r2, #4
 8005294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a7a      	ldr	r2, [pc, #488]	@ (8005488 <HAL_DMA_IRQHandler+0xa08>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d04a      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a79      	ldr	r2, [pc, #484]	@ (800548c <HAL_DMA_IRQHandler+0xa0c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d045      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a77      	ldr	r2, [pc, #476]	@ (8005490 <HAL_DMA_IRQHandler+0xa10>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d040      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a76      	ldr	r2, [pc, #472]	@ (8005494 <HAL_DMA_IRQHandler+0xa14>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d03b      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a74      	ldr	r2, [pc, #464]	@ (8005498 <HAL_DMA_IRQHandler+0xa18>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d036      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a73      	ldr	r2, [pc, #460]	@ (800549c <HAL_DMA_IRQHandler+0xa1c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d031      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a71      	ldr	r2, [pc, #452]	@ (80054a0 <HAL_DMA_IRQHandler+0xa20>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d02c      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a70      	ldr	r2, [pc, #448]	@ (80054a4 <HAL_DMA_IRQHandler+0xa24>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d027      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a6e      	ldr	r2, [pc, #440]	@ (80054a8 <HAL_DMA_IRQHandler+0xa28>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a6d      	ldr	r2, [pc, #436]	@ (80054ac <HAL_DMA_IRQHandler+0xa2c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d01d      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a6b      	ldr	r2, [pc, #428]	@ (80054b0 <HAL_DMA_IRQHandler+0xa30>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6a      	ldr	r2, [pc, #424]	@ (80054b4 <HAL_DMA_IRQHandler+0xa34>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a68      	ldr	r2, [pc, #416]	@ (80054b8 <HAL_DMA_IRQHandler+0xa38>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a67      	ldr	r2, [pc, #412]	@ (80054bc <HAL_DMA_IRQHandler+0xa3c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a65      	ldr	r2, [pc, #404]	@ (80054c0 <HAL_DMA_IRQHandler+0xa40>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_DMA_IRQHandler+0x8b8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a64      	ldr	r2, [pc, #400]	@ (80054c4 <HAL_DMA_IRQHandler+0xa44>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d108      	bne.n	800534a <HAL_DMA_IRQHandler+0x8ca>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e007      	b.n	800535a <HAL_DMA_IRQHandler+0x8da>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3301      	adds	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005362:	429a      	cmp	r2, r3
 8005364:	d307      	bcc.n	8005376 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f2      	bne.n	800535a <HAL_DMA_IRQHandler+0x8da>
 8005374:	e000      	b.n	8005378 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005376:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2203      	movs	r2, #3
 800538a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800538e:	e003      	b.n	8005398 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 8272 	beq.w	800588e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
 80053b2:	e26c      	b.n	800588e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a43      	ldr	r2, [pc, #268]	@ (80054c8 <HAL_DMA_IRQHandler+0xa48>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d022      	beq.n	8005404 <HAL_DMA_IRQHandler+0x984>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a42      	ldr	r2, [pc, #264]	@ (80054cc <HAL_DMA_IRQHandler+0xa4c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d01d      	beq.n	8005404 <HAL_DMA_IRQHandler+0x984>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a40      	ldr	r2, [pc, #256]	@ (80054d0 <HAL_DMA_IRQHandler+0xa50>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d018      	beq.n	8005404 <HAL_DMA_IRQHandler+0x984>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a3f      	ldr	r2, [pc, #252]	@ (80054d4 <HAL_DMA_IRQHandler+0xa54>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d013      	beq.n	8005404 <HAL_DMA_IRQHandler+0x984>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a3d      	ldr	r2, [pc, #244]	@ (80054d8 <HAL_DMA_IRQHandler+0xa58>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00e      	beq.n	8005404 <HAL_DMA_IRQHandler+0x984>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a3c      	ldr	r2, [pc, #240]	@ (80054dc <HAL_DMA_IRQHandler+0xa5c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_DMA_IRQHandler+0x984>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a3a      	ldr	r2, [pc, #232]	@ (80054e0 <HAL_DMA_IRQHandler+0xa60>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_DMA_IRQHandler+0x984>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a39      	ldr	r2, [pc, #228]	@ (80054e4 <HAL_DMA_IRQHandler+0xa64>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d101      	bne.n	8005408 <HAL_DMA_IRQHandler+0x988>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_DMA_IRQHandler+0x98a>
 8005408:	2300      	movs	r3, #0
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 823f 	beq.w	800588e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2204      	movs	r2, #4
 8005422:	409a      	lsls	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80cd 	beq.w	80055c8 <HAL_DMA_IRQHandler+0xb48>
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80c7 	beq.w	80055c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	2204      	movs	r2, #4
 8005444:	409a      	lsls	r2, r3
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d049      	beq.n	80054e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 8210 	beq.w	8005888 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005470:	e20a      	b.n	8005888 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 8206 	beq.w	8005888 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005484:	e200      	b.n	8005888 <HAL_DMA_IRQHandler+0xe08>
 8005486:	bf00      	nop
 8005488:	40020010 	.word	0x40020010
 800548c:	40020028 	.word	0x40020028
 8005490:	40020040 	.word	0x40020040
 8005494:	40020058 	.word	0x40020058
 8005498:	40020070 	.word	0x40020070
 800549c:	40020088 	.word	0x40020088
 80054a0:	400200a0 	.word	0x400200a0
 80054a4:	400200b8 	.word	0x400200b8
 80054a8:	40020410 	.word	0x40020410
 80054ac:	40020428 	.word	0x40020428
 80054b0:	40020440 	.word	0x40020440
 80054b4:	40020458 	.word	0x40020458
 80054b8:	40020470 	.word	0x40020470
 80054bc:	40020488 	.word	0x40020488
 80054c0:	400204a0 	.word	0x400204a0
 80054c4:	400204b8 	.word	0x400204b8
 80054c8:	58025408 	.word	0x58025408
 80054cc:	5802541c 	.word	0x5802541c
 80054d0:	58025430 	.word	0x58025430
 80054d4:	58025444 	.word	0x58025444
 80054d8:	58025458 	.word	0x58025458
 80054dc:	5802546c 	.word	0x5802546c
 80054e0:	58025480 	.word	0x58025480
 80054e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d160      	bne.n	80055b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a7f      	ldr	r2, [pc, #508]	@ (80056f4 <HAL_DMA_IRQHandler+0xc74>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d04a      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a7d      	ldr	r2, [pc, #500]	@ (80056f8 <HAL_DMA_IRQHandler+0xc78>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d045      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a7c      	ldr	r2, [pc, #496]	@ (80056fc <HAL_DMA_IRQHandler+0xc7c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d040      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a7a      	ldr	r2, [pc, #488]	@ (8005700 <HAL_DMA_IRQHandler+0xc80>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d03b      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a79      	ldr	r2, [pc, #484]	@ (8005704 <HAL_DMA_IRQHandler+0xc84>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d036      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a77      	ldr	r2, [pc, #476]	@ (8005708 <HAL_DMA_IRQHandler+0xc88>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d031      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a76      	ldr	r2, [pc, #472]	@ (800570c <HAL_DMA_IRQHandler+0xc8c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d02c      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a74      	ldr	r2, [pc, #464]	@ (8005710 <HAL_DMA_IRQHandler+0xc90>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d027      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a73      	ldr	r2, [pc, #460]	@ (8005714 <HAL_DMA_IRQHandler+0xc94>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d022      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a71      	ldr	r2, [pc, #452]	@ (8005718 <HAL_DMA_IRQHandler+0xc98>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01d      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a70      	ldr	r2, [pc, #448]	@ (800571c <HAL_DMA_IRQHandler+0xc9c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d018      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a6e      	ldr	r2, [pc, #440]	@ (8005720 <HAL_DMA_IRQHandler+0xca0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6d      	ldr	r2, [pc, #436]	@ (8005724 <HAL_DMA_IRQHandler+0xca4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00e      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a6b      	ldr	r2, [pc, #428]	@ (8005728 <HAL_DMA_IRQHandler+0xca8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d009      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a6a      	ldr	r2, [pc, #424]	@ (800572c <HAL_DMA_IRQHandler+0xcac>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d004      	beq.n	8005592 <HAL_DMA_IRQHandler+0xb12>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a68      	ldr	r2, [pc, #416]	@ (8005730 <HAL_DMA_IRQHandler+0xcb0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <HAL_DMA_IRQHandler+0xb24>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0208 	bic.w	r2, r2, #8
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e007      	b.n	80055b4 <HAL_DMA_IRQHandler+0xb34>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0204 	bic.w	r2, r2, #4
 80055b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 8165 	beq.w	8005888 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055c6:	e15f      	b.n	8005888 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2202      	movs	r2, #2
 80055d2:	409a      	lsls	r2, r3
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80c5 	beq.w	8005768 <HAL_DMA_IRQHandler+0xce8>
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80bf 	beq.w	8005768 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2202      	movs	r2, #2
 80055f4:	409a      	lsls	r2, r3
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d018      	beq.n	8005636 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 813a 	beq.w	800588c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005620:	e134      	b.n	800588c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 8130 	beq.w	800588c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005634:	e12a      	b.n	800588c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	f040 8089 	bne.w	8005754 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2b      	ldr	r2, [pc, #172]	@ (80056f4 <HAL_DMA_IRQHandler+0xc74>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d04a      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a29      	ldr	r2, [pc, #164]	@ (80056f8 <HAL_DMA_IRQHandler+0xc78>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d045      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a28      	ldr	r2, [pc, #160]	@ (80056fc <HAL_DMA_IRQHandler+0xc7c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d040      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a26      	ldr	r2, [pc, #152]	@ (8005700 <HAL_DMA_IRQHandler+0xc80>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d03b      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a25      	ldr	r2, [pc, #148]	@ (8005704 <HAL_DMA_IRQHandler+0xc84>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d036      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a23      	ldr	r2, [pc, #140]	@ (8005708 <HAL_DMA_IRQHandler+0xc88>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d031      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a22      	ldr	r2, [pc, #136]	@ (800570c <HAL_DMA_IRQHandler+0xc8c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d02c      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a20      	ldr	r2, [pc, #128]	@ (8005710 <HAL_DMA_IRQHandler+0xc90>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d027      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1f      	ldr	r2, [pc, #124]	@ (8005714 <HAL_DMA_IRQHandler+0xc94>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005718 <HAL_DMA_IRQHandler+0xc98>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01d      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1c      	ldr	r2, [pc, #112]	@ (800571c <HAL_DMA_IRQHandler+0xc9c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <HAL_DMA_IRQHandler+0xca0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a19      	ldr	r2, [pc, #100]	@ (8005724 <HAL_DMA_IRQHandler+0xca4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a17      	ldr	r2, [pc, #92]	@ (8005728 <HAL_DMA_IRQHandler+0xca8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a16      	ldr	r2, [pc, #88]	@ (800572c <HAL_DMA_IRQHandler+0xcac>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_DMA_IRQHandler+0xc62>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a14      	ldr	r2, [pc, #80]	@ (8005730 <HAL_DMA_IRQHandler+0xcb0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d128      	bne.n	8005734 <HAL_DMA_IRQHandler+0xcb4>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0214 	bic.w	r2, r2, #20
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e027      	b.n	8005744 <HAL_DMA_IRQHandler+0xcc4>
 80056f4:	40020010 	.word	0x40020010
 80056f8:	40020028 	.word	0x40020028
 80056fc:	40020040 	.word	0x40020040
 8005700:	40020058 	.word	0x40020058
 8005704:	40020070 	.word	0x40020070
 8005708:	40020088 	.word	0x40020088
 800570c:	400200a0 	.word	0x400200a0
 8005710:	400200b8 	.word	0x400200b8
 8005714:	40020410 	.word	0x40020410
 8005718:	40020428 	.word	0x40020428
 800571c:	40020440 	.word	0x40020440
 8005720:	40020458 	.word	0x40020458
 8005724:	40020470 	.word	0x40020470
 8005728:	40020488 	.word	0x40020488
 800572c:	400204a0 	.word	0x400204a0
 8005730:	400204b8 	.word	0x400204b8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 020a 	bic.w	r2, r2, #10
 8005742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8097 	beq.w	800588c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005766:	e091      	b.n	800588c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2208      	movs	r2, #8
 8005772:	409a      	lsls	r2, r3
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8088 	beq.w	800588e <HAL_DMA_IRQHandler+0xe0e>
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8082 	beq.w	800588e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a41      	ldr	r2, [pc, #260]	@ (8005894 <HAL_DMA_IRQHandler+0xe14>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d04a      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a3f      	ldr	r2, [pc, #252]	@ (8005898 <HAL_DMA_IRQHandler+0xe18>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d045      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a3e      	ldr	r2, [pc, #248]	@ (800589c <HAL_DMA_IRQHandler+0xe1c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d040      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a3c      	ldr	r2, [pc, #240]	@ (80058a0 <HAL_DMA_IRQHandler+0xe20>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d03b      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3b      	ldr	r2, [pc, #236]	@ (80058a4 <HAL_DMA_IRQHandler+0xe24>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d036      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a39      	ldr	r2, [pc, #228]	@ (80058a8 <HAL_DMA_IRQHandler+0xe28>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d031      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a38      	ldr	r2, [pc, #224]	@ (80058ac <HAL_DMA_IRQHandler+0xe2c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d02c      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a36      	ldr	r2, [pc, #216]	@ (80058b0 <HAL_DMA_IRQHandler+0xe30>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d027      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a35      	ldr	r2, [pc, #212]	@ (80058b4 <HAL_DMA_IRQHandler+0xe34>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d022      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a33      	ldr	r2, [pc, #204]	@ (80058b8 <HAL_DMA_IRQHandler+0xe38>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01d      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a32      	ldr	r2, [pc, #200]	@ (80058bc <HAL_DMA_IRQHandler+0xe3c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d018      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a30      	ldr	r2, [pc, #192]	@ (80058c0 <HAL_DMA_IRQHandler+0xe40>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a2f      	ldr	r2, [pc, #188]	@ (80058c4 <HAL_DMA_IRQHandler+0xe44>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2d      	ldr	r2, [pc, #180]	@ (80058c8 <HAL_DMA_IRQHandler+0xe48>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2c      	ldr	r2, [pc, #176]	@ (80058cc <HAL_DMA_IRQHandler+0xe4c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_DMA_IRQHandler+0xdaa>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2a      	ldr	r2, [pc, #168]	@ (80058d0 <HAL_DMA_IRQHandler+0xe50>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d108      	bne.n	800583c <HAL_DMA_IRQHandler+0xdbc>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 021c 	bic.w	r2, r2, #28
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e007      	b.n	800584c <HAL_DMA_IRQHandler+0xdcc>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 020e 	bic.w	r2, r2, #14
 800584a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	2201      	movs	r2, #1
 8005856:	409a      	lsls	r2, r3
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	4798      	blx	r3
 8005882:	e004      	b.n	800588e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005884:	bf00      	nop
 8005886:	e002      	b.n	800588e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005888:	bf00      	nop
 800588a:	e000      	b.n	800588e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800588c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800588e:	3728      	adds	r7, #40	@ 0x28
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40020010 	.word	0x40020010
 8005898:	40020028 	.word	0x40020028
 800589c:	40020040 	.word	0x40020040
 80058a0:	40020058 	.word	0x40020058
 80058a4:	40020070 	.word	0x40020070
 80058a8:	40020088 	.word	0x40020088
 80058ac:	400200a0 	.word	0x400200a0
 80058b0:	400200b8 	.word	0x400200b8
 80058b4:	40020410 	.word	0x40020410
 80058b8:	40020428 	.word	0x40020428
 80058bc:	40020440 	.word	0x40020440
 80058c0:	40020458 	.word	0x40020458
 80058c4:	40020470 	.word	0x40020470
 80058c8:	40020488 	.word	0x40020488
 80058cc:	400204a0 	.word	0x400204a0
 80058d0:	400204b8 	.word	0x400204b8

080058d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a7f      	ldr	r2, [pc, #508]	@ (8005af0 <DMA_SetConfig+0x21c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d072      	beq.n	80059de <DMA_SetConfig+0x10a>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a7d      	ldr	r2, [pc, #500]	@ (8005af4 <DMA_SetConfig+0x220>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d06d      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a7c      	ldr	r2, [pc, #496]	@ (8005af8 <DMA_SetConfig+0x224>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d068      	beq.n	80059de <DMA_SetConfig+0x10a>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a7a      	ldr	r2, [pc, #488]	@ (8005afc <DMA_SetConfig+0x228>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d063      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a79      	ldr	r2, [pc, #484]	@ (8005b00 <DMA_SetConfig+0x22c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d05e      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a77      	ldr	r2, [pc, #476]	@ (8005b04 <DMA_SetConfig+0x230>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d059      	beq.n	80059de <DMA_SetConfig+0x10a>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a76      	ldr	r2, [pc, #472]	@ (8005b08 <DMA_SetConfig+0x234>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d054      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a74      	ldr	r2, [pc, #464]	@ (8005b0c <DMA_SetConfig+0x238>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d04f      	beq.n	80059de <DMA_SetConfig+0x10a>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a73      	ldr	r2, [pc, #460]	@ (8005b10 <DMA_SetConfig+0x23c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d04a      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a71      	ldr	r2, [pc, #452]	@ (8005b14 <DMA_SetConfig+0x240>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d045      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a70      	ldr	r2, [pc, #448]	@ (8005b18 <DMA_SetConfig+0x244>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d040      	beq.n	80059de <DMA_SetConfig+0x10a>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a6e      	ldr	r2, [pc, #440]	@ (8005b1c <DMA_SetConfig+0x248>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d03b      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a6d      	ldr	r2, [pc, #436]	@ (8005b20 <DMA_SetConfig+0x24c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d036      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a6b      	ldr	r2, [pc, #428]	@ (8005b24 <DMA_SetConfig+0x250>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d031      	beq.n	80059de <DMA_SetConfig+0x10a>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a6a      	ldr	r2, [pc, #424]	@ (8005b28 <DMA_SetConfig+0x254>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d02c      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a68      	ldr	r2, [pc, #416]	@ (8005b2c <DMA_SetConfig+0x258>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d027      	beq.n	80059de <DMA_SetConfig+0x10a>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a67      	ldr	r2, [pc, #412]	@ (8005b30 <DMA_SetConfig+0x25c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d022      	beq.n	80059de <DMA_SetConfig+0x10a>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a65      	ldr	r2, [pc, #404]	@ (8005b34 <DMA_SetConfig+0x260>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d01d      	beq.n	80059de <DMA_SetConfig+0x10a>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a64      	ldr	r2, [pc, #400]	@ (8005b38 <DMA_SetConfig+0x264>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d018      	beq.n	80059de <DMA_SetConfig+0x10a>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a62      	ldr	r2, [pc, #392]	@ (8005b3c <DMA_SetConfig+0x268>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <DMA_SetConfig+0x10a>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a61      	ldr	r2, [pc, #388]	@ (8005b40 <DMA_SetConfig+0x26c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00e      	beq.n	80059de <DMA_SetConfig+0x10a>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a5f      	ldr	r2, [pc, #380]	@ (8005b44 <DMA_SetConfig+0x270>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d009      	beq.n	80059de <DMA_SetConfig+0x10a>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005b48 <DMA_SetConfig+0x274>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d004      	beq.n	80059de <DMA_SetConfig+0x10a>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a5c      	ldr	r2, [pc, #368]	@ (8005b4c <DMA_SetConfig+0x278>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d101      	bne.n	80059e2 <DMA_SetConfig+0x10e>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <DMA_SetConfig+0x110>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00d      	beq.n	8005a04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80059f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a39      	ldr	r2, [pc, #228]	@ (8005af0 <DMA_SetConfig+0x21c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d04a      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a38      	ldr	r2, [pc, #224]	@ (8005af4 <DMA_SetConfig+0x220>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d045      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a36      	ldr	r2, [pc, #216]	@ (8005af8 <DMA_SetConfig+0x224>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d040      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a35      	ldr	r2, [pc, #212]	@ (8005afc <DMA_SetConfig+0x228>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d03b      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a33      	ldr	r2, [pc, #204]	@ (8005b00 <DMA_SetConfig+0x22c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d036      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a32      	ldr	r2, [pc, #200]	@ (8005b04 <DMA_SetConfig+0x230>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d031      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a30      	ldr	r2, [pc, #192]	@ (8005b08 <DMA_SetConfig+0x234>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02c      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8005b0c <DMA_SetConfig+0x238>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d027      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2d      	ldr	r2, [pc, #180]	@ (8005b10 <DMA_SetConfig+0x23c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d022      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2c      	ldr	r2, [pc, #176]	@ (8005b14 <DMA_SetConfig+0x240>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d01d      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005b18 <DMA_SetConfig+0x244>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a29      	ldr	r2, [pc, #164]	@ (8005b1c <DMA_SetConfig+0x248>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a27      	ldr	r2, [pc, #156]	@ (8005b20 <DMA_SetConfig+0x24c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a26      	ldr	r2, [pc, #152]	@ (8005b24 <DMA_SetConfig+0x250>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a24      	ldr	r2, [pc, #144]	@ (8005b28 <DMA_SetConfig+0x254>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <DMA_SetConfig+0x1d0>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a23      	ldr	r2, [pc, #140]	@ (8005b2c <DMA_SetConfig+0x258>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <DMA_SetConfig+0x1d4>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <DMA_SetConfig+0x1d6>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d059      	beq.n	8005b62 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	223f      	movs	r2, #63	@ 0x3f
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005acc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b40      	cmp	r3, #64	@ 0x40
 8005adc:	d138      	bne.n	8005b50 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005aee:	e086      	b.n	8005bfe <DMA_SetConfig+0x32a>
 8005af0:	40020010 	.word	0x40020010
 8005af4:	40020028 	.word	0x40020028
 8005af8:	40020040 	.word	0x40020040
 8005afc:	40020058 	.word	0x40020058
 8005b00:	40020070 	.word	0x40020070
 8005b04:	40020088 	.word	0x40020088
 8005b08:	400200a0 	.word	0x400200a0
 8005b0c:	400200b8 	.word	0x400200b8
 8005b10:	40020410 	.word	0x40020410
 8005b14:	40020428 	.word	0x40020428
 8005b18:	40020440 	.word	0x40020440
 8005b1c:	40020458 	.word	0x40020458
 8005b20:	40020470 	.word	0x40020470
 8005b24:	40020488 	.word	0x40020488
 8005b28:	400204a0 	.word	0x400204a0
 8005b2c:	400204b8 	.word	0x400204b8
 8005b30:	58025408 	.word	0x58025408
 8005b34:	5802541c 	.word	0x5802541c
 8005b38:	58025430 	.word	0x58025430
 8005b3c:	58025444 	.word	0x58025444
 8005b40:	58025458 	.word	0x58025458
 8005b44:	5802546c 	.word	0x5802546c
 8005b48:	58025480 	.word	0x58025480
 8005b4c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]
}
 8005b60:	e04d      	b.n	8005bfe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a29      	ldr	r2, [pc, #164]	@ (8005c0c <DMA_SetConfig+0x338>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d022      	beq.n	8005bb2 <DMA_SetConfig+0x2de>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a27      	ldr	r2, [pc, #156]	@ (8005c10 <DMA_SetConfig+0x33c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01d      	beq.n	8005bb2 <DMA_SetConfig+0x2de>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a26      	ldr	r2, [pc, #152]	@ (8005c14 <DMA_SetConfig+0x340>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d018      	beq.n	8005bb2 <DMA_SetConfig+0x2de>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a24      	ldr	r2, [pc, #144]	@ (8005c18 <DMA_SetConfig+0x344>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <DMA_SetConfig+0x2de>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a23      	ldr	r2, [pc, #140]	@ (8005c1c <DMA_SetConfig+0x348>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00e      	beq.n	8005bb2 <DMA_SetConfig+0x2de>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a21      	ldr	r2, [pc, #132]	@ (8005c20 <DMA_SetConfig+0x34c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d009      	beq.n	8005bb2 <DMA_SetConfig+0x2de>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a20      	ldr	r2, [pc, #128]	@ (8005c24 <DMA_SetConfig+0x350>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d004      	beq.n	8005bb2 <DMA_SetConfig+0x2de>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1e      	ldr	r2, [pc, #120]	@ (8005c28 <DMA_SetConfig+0x354>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d101      	bne.n	8005bb6 <DMA_SetConfig+0x2e2>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <DMA_SetConfig+0x2e4>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d020      	beq.n	8005bfe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b40      	cmp	r3, #64	@ 0x40
 8005bda:	d108      	bne.n	8005bee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	60da      	str	r2, [r3, #12]
}
 8005bec:	e007      	b.n	8005bfe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	60da      	str	r2, [r3, #12]
}
 8005bfe:	bf00      	nop
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	58025408 	.word	0x58025408
 8005c10:	5802541c 	.word	0x5802541c
 8005c14:	58025430 	.word	0x58025430
 8005c18:	58025444 	.word	0x58025444
 8005c1c:	58025458 	.word	0x58025458
 8005c20:	5802546c 	.word	0x5802546c
 8005c24:	58025480 	.word	0x58025480
 8005c28:	58025494 	.word	0x58025494

08005c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a42      	ldr	r2, [pc, #264]	@ (8005d44 <DMA_CalcBaseAndBitshift+0x118>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d04a      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a41      	ldr	r2, [pc, #260]	@ (8005d48 <DMA_CalcBaseAndBitshift+0x11c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d045      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d4c <DMA_CalcBaseAndBitshift+0x120>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d040      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3e      	ldr	r2, [pc, #248]	@ (8005d50 <DMA_CalcBaseAndBitshift+0x124>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d03b      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a3c      	ldr	r2, [pc, #240]	@ (8005d54 <DMA_CalcBaseAndBitshift+0x128>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d036      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8005d58 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d031      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a39      	ldr	r2, [pc, #228]	@ (8005d5c <DMA_CalcBaseAndBitshift+0x130>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d02c      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a38      	ldr	r2, [pc, #224]	@ (8005d60 <DMA_CalcBaseAndBitshift+0x134>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d027      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a36      	ldr	r2, [pc, #216]	@ (8005d64 <DMA_CalcBaseAndBitshift+0x138>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d022      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a35      	ldr	r2, [pc, #212]	@ (8005d68 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d01d      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a33      	ldr	r2, [pc, #204]	@ (8005d6c <DMA_CalcBaseAndBitshift+0x140>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d018      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a32      	ldr	r2, [pc, #200]	@ (8005d70 <DMA_CalcBaseAndBitshift+0x144>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a30      	ldr	r2, [pc, #192]	@ (8005d74 <DMA_CalcBaseAndBitshift+0x148>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00e      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2f      	ldr	r2, [pc, #188]	@ (8005d78 <DMA_CalcBaseAndBitshift+0x14c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d009      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d7c <DMA_CalcBaseAndBitshift+0x150>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d004      	beq.n	8005cd4 <DMA_CalcBaseAndBitshift+0xa8>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a2c      	ldr	r2, [pc, #176]	@ (8005d80 <DMA_CalcBaseAndBitshift+0x154>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d101      	bne.n	8005cd8 <DMA_CalcBaseAndBitshift+0xac>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <DMA_CalcBaseAndBitshift+0xae>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d024      	beq.n	8005d28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	3b10      	subs	r3, #16
 8005ce6:	4a27      	ldr	r2, [pc, #156]	@ (8005d84 <DMA_CalcBaseAndBitshift+0x158>)
 8005ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	4a24      	ldr	r2, [pc, #144]	@ (8005d88 <DMA_CalcBaseAndBitshift+0x15c>)
 8005cf8:	5cd3      	ldrb	r3, [r2, r3]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d908      	bls.n	8005d18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8005d8c <DMA_CalcBaseAndBitshift+0x160>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	1d1a      	adds	r2, r3, #4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d16:	e00d      	b.n	8005d34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <DMA_CalcBaseAndBitshift+0x160>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d26:	e005      	b.n	8005d34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	40020010 	.word	0x40020010
 8005d48:	40020028 	.word	0x40020028
 8005d4c:	40020040 	.word	0x40020040
 8005d50:	40020058 	.word	0x40020058
 8005d54:	40020070 	.word	0x40020070
 8005d58:	40020088 	.word	0x40020088
 8005d5c:	400200a0 	.word	0x400200a0
 8005d60:	400200b8 	.word	0x400200b8
 8005d64:	40020410 	.word	0x40020410
 8005d68:	40020428 	.word	0x40020428
 8005d6c:	40020440 	.word	0x40020440
 8005d70:	40020458 	.word	0x40020458
 8005d74:	40020470 	.word	0x40020470
 8005d78:	40020488 	.word	0x40020488
 8005d7c:	400204a0 	.word	0x400204a0
 8005d80:	400204b8 	.word	0x400204b8
 8005d84:	aaaaaaab 	.word	0xaaaaaaab
 8005d88:	08017204 	.word	0x08017204
 8005d8c:	fffffc00 	.word	0xfffffc00

08005d90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d120      	bne.n	8005de6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d858      	bhi.n	8005e5e <DMA_CheckFifoParam+0xce>
 8005dac:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <DMA_CheckFifoParam+0x24>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005dc5 	.word	0x08005dc5
 8005db8:	08005dd7 	.word	0x08005dd7
 8005dbc:	08005dc5 	.word	0x08005dc5
 8005dc0:	08005e5f 	.word	0x08005e5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d048      	beq.n	8005e62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dd4:	e045      	b.n	8005e62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005dde:	d142      	bne.n	8005e66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005de4:	e03f      	b.n	8005e66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dee:	d123      	bne.n	8005e38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d838      	bhi.n	8005e6a <DMA_CheckFifoParam+0xda>
 8005df8:	a201      	add	r2, pc, #4	@ (adr r2, 8005e00 <DMA_CheckFifoParam+0x70>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e11 	.word	0x08005e11
 8005e04:	08005e17 	.word	0x08005e17
 8005e08:	08005e11 	.word	0x08005e11
 8005e0c:	08005e29 	.word	0x08005e29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
        break;
 8005e14:	e030      	b.n	8005e78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d025      	beq.n	8005e6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e26:	e022      	b.n	8005e6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e30:	d11f      	bne.n	8005e72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e36:	e01c      	b.n	8005e72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d902      	bls.n	8005e46 <DMA_CheckFifoParam+0xb6>
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	d003      	beq.n	8005e4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005e44:	e018      	b.n	8005e78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	73fb      	strb	r3, [r7, #15]
        break;
 8005e4a:	e015      	b.n	8005e78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00e      	beq.n	8005e76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e5c:	e00b      	b.n	8005e76 <DMA_CheckFifoParam+0xe6>
        break;
 8005e5e:	bf00      	nop
 8005e60:	e00a      	b.n	8005e78 <DMA_CheckFifoParam+0xe8>
        break;
 8005e62:	bf00      	nop
 8005e64:	e008      	b.n	8005e78 <DMA_CheckFifoParam+0xe8>
        break;
 8005e66:	bf00      	nop
 8005e68:	e006      	b.n	8005e78 <DMA_CheckFifoParam+0xe8>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e004      	b.n	8005e78 <DMA_CheckFifoParam+0xe8>
        break;
 8005e6e:	bf00      	nop
 8005e70:	e002      	b.n	8005e78 <DMA_CheckFifoParam+0xe8>
        break;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <DMA_CheckFifoParam+0xe8>
    break;
 8005e76:	bf00      	nop
    }
  }

  return status;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop

08005e88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a38      	ldr	r2, [pc, #224]	@ (8005f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a36      	ldr	r2, [pc, #216]	@ (8005f80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a35      	ldr	r2, [pc, #212]	@ (8005f84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a33      	ldr	r2, [pc, #204]	@ (8005f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a32      	ldr	r2, [pc, #200]	@ (8005f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a30      	ldr	r2, [pc, #192]	@ (8005f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8005f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01a      	beq.n	8005f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	3b08      	subs	r3, #8
 8005ef8:	4a28      	ldr	r2, [pc, #160]	@ (8005f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	091b      	lsrs	r3, r3, #4
 8005f00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4b26      	ldr	r3, [pc, #152]	@ (8005fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a24      	ldr	r2, [pc, #144]	@ (8005fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005f14:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005f24:	e024      	b.n	8005f70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	3b10      	subs	r3, #16
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005f30:	fba2 2303 	umull	r2, r3, r2, r3
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005fac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d806      	bhi.n	8005f4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d902      	bls.n	8005f4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4b18      	ldr	r3, [pc, #96]	@ (8005fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	461a      	mov	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a16      	ldr	r2, [pc, #88]	@ (8005fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f60:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2201      	movs	r2, #1
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	58025408 	.word	0x58025408
 8005f80:	5802541c 	.word	0x5802541c
 8005f84:	58025430 	.word	0x58025430
 8005f88:	58025444 	.word	0x58025444
 8005f8c:	58025458 	.word	0x58025458
 8005f90:	5802546c 	.word	0x5802546c
 8005f94:	58025480 	.word	0x58025480
 8005f98:	58025494 	.word	0x58025494
 8005f9c:	cccccccd 	.word	0xcccccccd
 8005fa0:	16009600 	.word	0x16009600
 8005fa4:	58025880 	.word	0x58025880
 8005fa8:	aaaaaaab 	.word	0xaaaaaaab
 8005fac:	400204b8 	.word	0x400204b8
 8005fb0:	4002040f 	.word	0x4002040f
 8005fb4:	10008200 	.word	0x10008200
 8005fb8:	40020880 	.word	0x40020880

08005fbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d04a      	beq.n	8006068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d847      	bhi.n	8006068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a25      	ldr	r2, [pc, #148]	@ (8006074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d022      	beq.n	8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a24      	ldr	r2, [pc, #144]	@ (8006078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d01d      	beq.n	8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a22      	ldr	r2, [pc, #136]	@ (800607c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a21      	ldr	r2, [pc, #132]	@ (8006080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1f      	ldr	r2, [pc, #124]	@ (8006084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1e      	ldr	r2, [pc, #120]	@ (8006088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1c      	ldr	r2, [pc, #112]	@ (800608c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1b      	ldr	r2, [pc, #108]	@ (8006090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d101      	bne.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4b17      	ldr	r3, [pc, #92]	@ (8006094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	461a      	mov	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a15      	ldr	r2, [pc, #84]	@ (8006098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006044:	671a      	str	r2, [r3, #112]	@ 0x70
 8006046:	e009      	b.n	800605c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4b14      	ldr	r3, [pc, #80]	@ (800609c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	461a      	mov	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a11      	ldr	r2, [pc, #68]	@ (80060a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800605a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3b01      	subs	r3, #1
 8006060:	2201      	movs	r2, #1
 8006062:	409a      	lsls	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	58025408 	.word	0x58025408
 8006078:	5802541c 	.word	0x5802541c
 800607c:	58025430 	.word	0x58025430
 8006080:	58025444 	.word	0x58025444
 8006084:	58025458 	.word	0x58025458
 8006088:	5802546c 	.word	0x5802546c
 800608c:	58025480 	.word	0x58025480
 8006090:	58025494 	.word	0x58025494
 8006094:	1600963f 	.word	0x1600963f
 8006098:	58025940 	.word	0x58025940
 800609c:	1000823f 	.word	0x1000823f
 80060a0:	40020940 	.word	0x40020940

080060a4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b80      	cmp	r3, #128	@ 0x80
 80060bc:	d105      	bne.n	80060ca <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e315      	b.n	80066f6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e30e      	b.n	80066f6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	f040 82fd 	bne.w	80066e8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a82      	ldr	r2, [pc, #520]	@ (800630c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d04a      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a81      	ldr	r2, [pc, #516]	@ (8006310 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d045      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a7f      	ldr	r2, [pc, #508]	@ (8006314 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d040      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a7e      	ldr	r2, [pc, #504]	@ (8006318 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d03b      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a7c      	ldr	r2, [pc, #496]	@ (800631c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d036      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a7b      	ldr	r2, [pc, #492]	@ (8006320 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d031      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a79      	ldr	r2, [pc, #484]	@ (8006324 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d02c      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a78      	ldr	r2, [pc, #480]	@ (8006328 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d027      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a76      	ldr	r2, [pc, #472]	@ (800632c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d022      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a75      	ldr	r2, [pc, #468]	@ (8006330 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d01d      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a73      	ldr	r2, [pc, #460]	@ (8006334 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d018      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a72      	ldr	r2, [pc, #456]	@ (8006338 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d013      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a70      	ldr	r2, [pc, #448]	@ (800633c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00e      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6f      	ldr	r2, [pc, #444]	@ (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a6d      	ldr	r2, [pc, #436]	@ (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a6c      	ldr	r2, [pc, #432]	@ (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d101      	bne.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80061a0:	2300      	movs	r3, #0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d018      	beq.n	80061d8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80061b4:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c2:	3308      	adds	r3, #8
 80061c4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	223f      	movs	r2, #63	@ 0x3f
 80061d0:	409a      	lsls	r2, r3
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e018      	b.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6819      	ldr	r1, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	f248 0320 	movw	r3, #32800	@ 0x8020
 80061e6:	430b      	orrs	r3, r1
 80061e8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f6:	3304      	adds	r3, #4
 80061f8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	2201      	movs	r2, #1
 8006204:	409a      	lsls	r2, r3
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fb41 	bl	8006898 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a3c      	ldr	r2, [pc, #240]	@ (800630c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d072      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a3a      	ldr	r2, [pc, #232]	@ (8006310 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d06d      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a39      	ldr	r2, [pc, #228]	@ (8006314 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d068      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a37      	ldr	r2, [pc, #220]	@ (8006318 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d063      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a36      	ldr	r2, [pc, #216]	@ (800631c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d05e      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a34      	ldr	r2, [pc, #208]	@ (8006320 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d059      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a33      	ldr	r2, [pc, #204]	@ (8006324 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d054      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a31      	ldr	r2, [pc, #196]	@ (8006328 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d04f      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a30      	ldr	r2, [pc, #192]	@ (800632c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d04a      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2e      	ldr	r2, [pc, #184]	@ (8006330 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d045      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2d      	ldr	r2, [pc, #180]	@ (8006334 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d040      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2b      	ldr	r2, [pc, #172]	@ (8006338 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d03b      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2a      	ldr	r2, [pc, #168]	@ (800633c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d036      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a28      	ldr	r2, [pc, #160]	@ (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d031      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a27      	ldr	r2, [pc, #156]	@ (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d02c      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a25      	ldr	r2, [pc, #148]	@ (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d027      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a24      	ldr	r2, [pc, #144]	@ (800634c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a22      	ldr	r2, [pc, #136]	@ (8006350 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01d      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a21      	ldr	r2, [pc, #132]	@ (8006354 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006358 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1e      	ldr	r2, [pc, #120]	@ (800635c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006360 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006364 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a19      	ldr	r2, [pc, #100]	@ (8006368 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d132      	bne.n	800636c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8006306:	2301      	movs	r3, #1
 8006308:	e031      	b.n	800636e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800630a:	bf00      	nop
 800630c:	40020010 	.word	0x40020010
 8006310:	40020028 	.word	0x40020028
 8006314:	40020040 	.word	0x40020040
 8006318:	40020058 	.word	0x40020058
 800631c:	40020070 	.word	0x40020070
 8006320:	40020088 	.word	0x40020088
 8006324:	400200a0 	.word	0x400200a0
 8006328:	400200b8 	.word	0x400200b8
 800632c:	40020410 	.word	0x40020410
 8006330:	40020428 	.word	0x40020428
 8006334:	40020440 	.word	0x40020440
 8006338:	40020458 	.word	0x40020458
 800633c:	40020470 	.word	0x40020470
 8006340:	40020488 	.word	0x40020488
 8006344:	400204a0 	.word	0x400204a0
 8006348:	400204b8 	.word	0x400204b8
 800634c:	58025408 	.word	0x58025408
 8006350:	5802541c 	.word	0x5802541c
 8006354:	58025430 	.word	0x58025430
 8006358:	58025444 	.word	0x58025444
 800635c:	58025458 	.word	0x58025458
 8006360:	5802546c 	.word	0x5802546c
 8006364:	58025480 	.word	0x58025480
 8006368:	58025494 	.word	0x58025494
 800636c:	2300      	movs	r3, #0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800637a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800638c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a3b      	ldr	r2, [pc, #236]	@ (8006480 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d04a      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a39      	ldr	r2, [pc, #228]	@ (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d045      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a38      	ldr	r2, [pc, #224]	@ (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d040      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a36      	ldr	r2, [pc, #216]	@ (800648c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d03b      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a35      	ldr	r2, [pc, #212]	@ (8006490 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d036      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a33      	ldr	r2, [pc, #204]	@ (8006494 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d031      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a32      	ldr	r2, [pc, #200]	@ (8006498 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d02c      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a30      	ldr	r2, [pc, #192]	@ (800649c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d027      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2f      	ldr	r2, [pc, #188]	@ (80064a0 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d022      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2d      	ldr	r2, [pc, #180]	@ (80064a4 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01d      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2c      	ldr	r2, [pc, #176]	@ (80064a8 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d018      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2a      	ldr	r2, [pc, #168]	@ (80064ac <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a29      	ldr	r2, [pc, #164]	@ (80064b0 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00e      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a27      	ldr	r2, [pc, #156]	@ (80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d009      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a26      	ldr	r2, [pc, #152]	@ (80064b8 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d004      	beq.n	800642e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a24      	ldr	r2, [pc, #144]	@ (80064bc <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d101      	bne.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8006432:	2300      	movs	r3, #0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d043      	beq.n	80064c0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 021e 	bic.w	r2, r3, #30
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0216 	orr.w	r2, r2, #22
 800644a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800645a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d103      	bne.n	800646c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006468:	2b00      	cmp	r3, #0
 800646a:	d043      	beq.n	80064f4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0208 	orr.w	r2, r2, #8
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e03a      	b.n	80064f4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800647e:	bf00      	nop
 8006480:	40020010 	.word	0x40020010
 8006484:	40020028 	.word	0x40020028
 8006488:	40020040 	.word	0x40020040
 800648c:	40020058 	.word	0x40020058
 8006490:	40020070 	.word	0x40020070
 8006494:	40020088 	.word	0x40020088
 8006498:	400200a0 	.word	0x400200a0
 800649c:	400200b8 	.word	0x400200b8
 80064a0:	40020410 	.word	0x40020410
 80064a4:	40020428 	.word	0x40020428
 80064a8:	40020440 	.word	0x40020440
 80064ac:	40020458 	.word	0x40020458
 80064b0:	40020470 	.word	0x40020470
 80064b4:	40020488 	.word	0x40020488
 80064b8:	400204a0 	.word	0x400204a0
 80064bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f023 020e 	bic.w	r2, r3, #14
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 020a 	orr.w	r2, r2, #10
 80064d2:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d103      	bne.n	80064e4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0204 	orr.w	r2, r2, #4
 80064f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a81      	ldr	r2, [pc, #516]	@ (8006700 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d072      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a80      	ldr	r2, [pc, #512]	@ (8006704 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d06d      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a7e      	ldr	r2, [pc, #504]	@ (8006708 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d068      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a7d      	ldr	r2, [pc, #500]	@ (800670c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d063      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a7b      	ldr	r2, [pc, #492]	@ (8006710 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d05e      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a7a      	ldr	r2, [pc, #488]	@ (8006714 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d059      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a78      	ldr	r2, [pc, #480]	@ (8006718 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d054      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a77      	ldr	r2, [pc, #476]	@ (800671c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d04f      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a75      	ldr	r2, [pc, #468]	@ (8006720 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d04a      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a74      	ldr	r2, [pc, #464]	@ (8006724 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d045      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a72      	ldr	r2, [pc, #456]	@ (8006728 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d040      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a71      	ldr	r2, [pc, #452]	@ (800672c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d03b      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a6f      	ldr	r2, [pc, #444]	@ (8006730 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d036      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a6e      	ldr	r2, [pc, #440]	@ (8006734 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d031      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a6c      	ldr	r2, [pc, #432]	@ (8006738 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d02c      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a6b      	ldr	r2, [pc, #428]	@ (800673c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d027      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a69      	ldr	r2, [pc, #420]	@ (8006740 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d022      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a68      	ldr	r2, [pc, #416]	@ (8006744 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d01d      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a66      	ldr	r2, [pc, #408]	@ (8006748 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d018      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a65      	ldr	r2, [pc, #404]	@ (800674c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d013      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a63      	ldr	r2, [pc, #396]	@ (8006750 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a62      	ldr	r2, [pc, #392]	@ (8006754 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d009      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a60      	ldr	r2, [pc, #384]	@ (8006758 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a5f      	ldr	r2, [pc, #380]	@ (800675c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d101      	bne.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80065e8:	2300      	movs	r3, #0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01a      	beq.n	8006624 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006606:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800660a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800661e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006622:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a35      	ldr	r2, [pc, #212]	@ (8006700 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d04a      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a34      	ldr	r2, [pc, #208]	@ (8006704 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d045      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a32      	ldr	r2, [pc, #200]	@ (8006708 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d040      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a31      	ldr	r2, [pc, #196]	@ (800670c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d03b      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2f      	ldr	r2, [pc, #188]	@ (8006710 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d036      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2e      	ldr	r2, [pc, #184]	@ (8006714 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d031      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2c      	ldr	r2, [pc, #176]	@ (8006718 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d02c      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2b      	ldr	r2, [pc, #172]	@ (800671c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d027      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a29      	ldr	r2, [pc, #164]	@ (8006720 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d022      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a28      	ldr	r2, [pc, #160]	@ (8006724 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01d      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a26      	ldr	r2, [pc, #152]	@ (8006728 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d018      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a25      	ldr	r2, [pc, #148]	@ (800672c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a23      	ldr	r2, [pc, #140]	@ (8006730 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00e      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a22      	ldr	r2, [pc, #136]	@ (8006734 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d009      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a20      	ldr	r2, [pc, #128]	@ (8006738 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1f      	ldr	r2, [pc, #124]	@ (800673c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d108      	bne.n	80066d6 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0201 	orr.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e00e      	b.n	80066f4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0201 	orr.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e005      	b.n	80066f4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40020010 	.word	0x40020010
 8006704:	40020028 	.word	0x40020028
 8006708:	40020040 	.word	0x40020040
 800670c:	40020058 	.word	0x40020058
 8006710:	40020070 	.word	0x40020070
 8006714:	40020088 	.word	0x40020088
 8006718:	400200a0 	.word	0x400200a0
 800671c:	400200b8 	.word	0x400200b8
 8006720:	40020410 	.word	0x40020410
 8006724:	40020428 	.word	0x40020428
 8006728:	40020440 	.word	0x40020440
 800672c:	40020458 	.word	0x40020458
 8006730:	40020470 	.word	0x40020470
 8006734:	40020488 	.word	0x40020488
 8006738:	400204a0 	.word	0x400204a0
 800673c:	400204b8 	.word	0x400204b8
 8006740:	58025408 	.word	0x58025408
 8006744:	5802541c 	.word	0x5802541c
 8006748:	58025430 	.word	0x58025430
 800674c:	58025444 	.word	0x58025444
 8006750:	58025458 	.word	0x58025458
 8006754:	5802546c 	.word	0x5802546c
 8006758:	58025480 	.word	0x58025480
 800675c:	58025494 	.word	0x58025494

08006760 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a39      	ldr	r2, [pc, #228]	@ (8006858 <HAL_DMAEx_ChangeMemory+0xf8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d04a      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a37      	ldr	r2, [pc, #220]	@ (800685c <HAL_DMAEx_ChangeMemory+0xfc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d045      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a36      	ldr	r2, [pc, #216]	@ (8006860 <HAL_DMAEx_ChangeMemory+0x100>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d040      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a34      	ldr	r2, [pc, #208]	@ (8006864 <HAL_DMAEx_ChangeMemory+0x104>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d03b      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a33      	ldr	r2, [pc, #204]	@ (8006868 <HAL_DMAEx_ChangeMemory+0x108>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d036      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a31      	ldr	r2, [pc, #196]	@ (800686c <HAL_DMAEx_ChangeMemory+0x10c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d031      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a30      	ldr	r2, [pc, #192]	@ (8006870 <HAL_DMAEx_ChangeMemory+0x110>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d02c      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006874 <HAL_DMAEx_ChangeMemory+0x114>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d027      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2d      	ldr	r2, [pc, #180]	@ (8006878 <HAL_DMAEx_ChangeMemory+0x118>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d022      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a2b      	ldr	r2, [pc, #172]	@ (800687c <HAL_DMAEx_ChangeMemory+0x11c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01d      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006880 <HAL_DMAEx_ChangeMemory+0x120>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d018      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a28      	ldr	r2, [pc, #160]	@ (8006884 <HAL_DMAEx_ChangeMemory+0x124>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a27      	ldr	r2, [pc, #156]	@ (8006888 <HAL_DMAEx_ChangeMemory+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00e      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a25      	ldr	r2, [pc, #148]	@ (800688c <HAL_DMAEx_ChangeMemory+0x12c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d009      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a24      	ldr	r2, [pc, #144]	@ (8006890 <HAL_DMAEx_ChangeMemory+0x130>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d004      	beq.n	800680e <HAL_DMAEx_ChangeMemory+0xae>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a22      	ldr	r2, [pc, #136]	@ (8006894 <HAL_DMAEx_ChangeMemory+0x134>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d101      	bne.n	8006812 <HAL_DMAEx_ChangeMemory+0xb2>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <HAL_DMAEx_ChangeMemory+0xb4>
 8006812:	2300      	movs	r3, #0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00c      	beq.n	8006832 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d104      	bne.n	8006828 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	60da      	str	r2, [r3, #12]
 8006826:	e010      	b.n	800684a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	611a      	str	r2, [r3, #16]
 8006830:	e00b      	b.n	800684a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	60da      	str	r2, [r3, #12]
 8006840:	e003      	b.n	800684a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	40020010 	.word	0x40020010
 800685c:	40020028 	.word	0x40020028
 8006860:	40020040 	.word	0x40020040
 8006864:	40020058 	.word	0x40020058
 8006868:	40020070 	.word	0x40020070
 800686c:	40020088 	.word	0x40020088
 8006870:	400200a0 	.word	0x400200a0
 8006874:	400200b8 	.word	0x400200b8
 8006878:	40020410 	.word	0x40020410
 800687c:	40020428 	.word	0x40020428
 8006880:	40020440 	.word	0x40020440
 8006884:	40020458 	.word	0x40020458
 8006888:	40020470 	.word	0x40020470
 800688c:	40020488 	.word	0x40020488
 8006890:	400204a0 	.word	0x400204a0
 8006894:	400204b8 	.word	0x400204b8

08006898 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a46      	ldr	r2, [pc, #280]	@ (80069c4 <DMA_MultiBufferSetConfig+0x12c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d04a      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a44      	ldr	r2, [pc, #272]	@ (80069c8 <DMA_MultiBufferSetConfig+0x130>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d045      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a43      	ldr	r2, [pc, #268]	@ (80069cc <DMA_MultiBufferSetConfig+0x134>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d040      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a41      	ldr	r2, [pc, #260]	@ (80069d0 <DMA_MultiBufferSetConfig+0x138>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d03b      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a40      	ldr	r2, [pc, #256]	@ (80069d4 <DMA_MultiBufferSetConfig+0x13c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d036      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a3e      	ldr	r2, [pc, #248]	@ (80069d8 <DMA_MultiBufferSetConfig+0x140>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d031      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a3d      	ldr	r2, [pc, #244]	@ (80069dc <DMA_MultiBufferSetConfig+0x144>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d02c      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a3b      	ldr	r2, [pc, #236]	@ (80069e0 <DMA_MultiBufferSetConfig+0x148>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d027      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a3a      	ldr	r2, [pc, #232]	@ (80069e4 <DMA_MultiBufferSetConfig+0x14c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a38      	ldr	r2, [pc, #224]	@ (80069e8 <DMA_MultiBufferSetConfig+0x150>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01d      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a37      	ldr	r2, [pc, #220]	@ (80069ec <DMA_MultiBufferSetConfig+0x154>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d018      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a35      	ldr	r2, [pc, #212]	@ (80069f0 <DMA_MultiBufferSetConfig+0x158>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a34      	ldr	r2, [pc, #208]	@ (80069f4 <DMA_MultiBufferSetConfig+0x15c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a32      	ldr	r2, [pc, #200]	@ (80069f8 <DMA_MultiBufferSetConfig+0x160>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a31      	ldr	r2, [pc, #196]	@ (80069fc <DMA_MultiBufferSetConfig+0x164>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <DMA_MultiBufferSetConfig+0xae>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2f      	ldr	r2, [pc, #188]	@ (8006a00 <DMA_MultiBufferSetConfig+0x168>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d101      	bne.n	800694a <DMA_MultiBufferSetConfig+0xb2>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <DMA_MultiBufferSetConfig+0xb4>
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d019      	beq.n	8006984 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b40      	cmp	r3, #64	@ 0x40
 800695e:	d108      	bne.n	8006972 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006970:	e021      	b.n	80069b6 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	60da      	str	r2, [r3, #12]
}
 8006982:	e018      	b.n	80069b6 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b40      	cmp	r3, #64	@ 0x40
 8006992:	d108      	bne.n	80069a6 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	60da      	str	r2, [r3, #12]
}
 80069a4:	e007      	b.n	80069b6 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	60da      	str	r2, [r3, #12]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40020010 	.word	0x40020010
 80069c8:	40020028 	.word	0x40020028
 80069cc:	40020040 	.word	0x40020040
 80069d0:	40020058 	.word	0x40020058
 80069d4:	40020070 	.word	0x40020070
 80069d8:	40020088 	.word	0x40020088
 80069dc:	400200a0 	.word	0x400200a0
 80069e0:	400200b8 	.word	0x400200b8
 80069e4:	40020410 	.word	0x40020410
 80069e8:	40020428 	.word	0x40020428
 80069ec:	40020440 	.word	0x40020440
 80069f0:	40020458 	.word	0x40020458
 80069f4:	40020470 	.word	0x40020470
 80069f8:	40020488 	.word	0x40020488
 80069fc:	400204a0 	.word	0x400204a0
 8006a00:	400204b8 	.word	0x400204b8

08006a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b089      	sub	sp, #36	@ 0x24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a12:	4b89      	ldr	r3, [pc, #548]	@ (8006c38 <HAL_GPIO_Init+0x234>)
 8006a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a16:	e194      	b.n	8006d42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	fa01 f303 	lsl.w	r3, r1, r3
 8006a24:	4013      	ands	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8186 	beq.w	8006d3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f003 0303 	and.w	r3, r3, #3
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d005      	beq.n	8006a48 <HAL_GPIO_Init+0x44>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d130      	bne.n	8006aaa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	2203      	movs	r2, #3
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a7e:	2201      	movs	r2, #1
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	f003 0201 	and.w	r2, r3, #1
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d017      	beq.n	8006ae6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	43db      	mvns	r3, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	4013      	ands	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d123      	bne.n	8006b3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	08da      	lsrs	r2, r3, #3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3208      	adds	r2, #8
 8006afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	220f      	movs	r2, #15
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	43db      	mvns	r3, r3
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	4013      	ands	r3, r2
 8006b14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	08da      	lsrs	r2, r3, #3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3208      	adds	r2, #8
 8006b34:	69b9      	ldr	r1, [r7, #24]
 8006b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	2203      	movs	r2, #3
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 0203 	and.w	r2, r3, #3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 80e0 	beq.w	8006d3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8006c3c <HAL_GPIO_Init+0x238>)
 8006b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b82:	4a2e      	ldr	r2, [pc, #184]	@ (8006c3c <HAL_GPIO_Init+0x238>)
 8006b84:	f043 0302 	orr.w	r3, r3, #2
 8006b88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c3c <HAL_GPIO_Init+0x238>)
 8006b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b9a:	4a29      	ldr	r2, [pc, #164]	@ (8006c40 <HAL_GPIO_Init+0x23c>)
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	089b      	lsrs	r3, r3, #2
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	220f      	movs	r2, #15
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a20      	ldr	r2, [pc, #128]	@ (8006c44 <HAL_GPIO_Init+0x240>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d052      	beq.n	8006c6c <HAL_GPIO_Init+0x268>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006c48 <HAL_GPIO_Init+0x244>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d031      	beq.n	8006c32 <HAL_GPIO_Init+0x22e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8006c4c <HAL_GPIO_Init+0x248>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02b      	beq.n	8006c2e <HAL_GPIO_Init+0x22a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <HAL_GPIO_Init+0x24c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d025      	beq.n	8006c2a <HAL_GPIO_Init+0x226>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <HAL_GPIO_Init+0x250>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01f      	beq.n	8006c26 <HAL_GPIO_Init+0x222>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <HAL_GPIO_Init+0x254>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d019      	beq.n	8006c22 <HAL_GPIO_Init+0x21e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8006c5c <HAL_GPIO_Init+0x258>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <HAL_GPIO_Init+0x21a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a19      	ldr	r2, [pc, #100]	@ (8006c60 <HAL_GPIO_Init+0x25c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00d      	beq.n	8006c1a <HAL_GPIO_Init+0x216>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a18      	ldr	r2, [pc, #96]	@ (8006c64 <HAL_GPIO_Init+0x260>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <HAL_GPIO_Init+0x212>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a17      	ldr	r2, [pc, #92]	@ (8006c68 <HAL_GPIO_Init+0x264>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d101      	bne.n	8006c12 <HAL_GPIO_Init+0x20e>
 8006c0e:	2309      	movs	r3, #9
 8006c10:	e02d      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c12:	230a      	movs	r3, #10
 8006c14:	e02b      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c16:	2308      	movs	r3, #8
 8006c18:	e029      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c1a:	2307      	movs	r3, #7
 8006c1c:	e027      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c1e:	2306      	movs	r3, #6
 8006c20:	e025      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c22:	2305      	movs	r3, #5
 8006c24:	e023      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c26:	2304      	movs	r3, #4
 8006c28:	e021      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e01f      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e01d      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e01b      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c36:	bf00      	nop
 8006c38:	58000080 	.word	0x58000080
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	58000400 	.word	0x58000400
 8006c44:	58020000 	.word	0x58020000
 8006c48:	58020400 	.word	0x58020400
 8006c4c:	58020800 	.word	0x58020800
 8006c50:	58020c00 	.word	0x58020c00
 8006c54:	58021000 	.word	0x58021000
 8006c58:	58021400 	.word	0x58021400
 8006c5c:	58021800 	.word	0x58021800
 8006c60:	58021c00 	.word	0x58021c00
 8006c64:	58022000 	.word	0x58022000
 8006c68:	58022400 	.word	0x58022400
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	f002 0203 	and.w	r2, r2, #3
 8006c74:	0092      	lsls	r2, r2, #2
 8006c76:	4093      	lsls	r3, r2
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c7e:	4938      	ldr	r1, [pc, #224]	@ (8006d60 <HAL_GPIO_Init+0x35c>)
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	089b      	lsrs	r3, r3, #2
 8006c84:	3302      	adds	r3, #2
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	43db      	mvns	r3, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f47f ae63 	bne.w	8006a18 <HAL_GPIO_Init+0x14>
  }
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	3724      	adds	r7, #36	@ 0x24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	58000400 	.word	0x58000400

08006d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	807b      	strh	r3, [r7, #2]
 8006d70:	4613      	mov	r3, r2
 8006d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d74:	787b      	ldrb	r3, [r7, #1]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d7a:	887a      	ldrh	r2, [r7, #2]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d80:	e003      	b.n	8006d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d82:	887b      	ldrh	r3, [r7, #2]
 8006d84:	041a      	lsls	r2, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	619a      	str	r2, [r3, #24]
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af02      	add	r7, sp, #8
 8006d9c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0fe      	b.n	8006fa6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f00e fc3b 	bl	8015638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f008 fe5b 	bl	800fa8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7c1a      	ldrb	r2, [r3, #16]
 8006ddc:	f88d 2000 	strb.w	r2, [sp]
 8006de0:	3304      	adds	r3, #4
 8006de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006de4:	f008 fd2c 	bl	800f840 <USB_CoreInit>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e0d5      	b.n	8006fa6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f008 fe53 	bl	800faac <USB_SetCurrentMode>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0c6      	b.n	8006fa6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]
 8006e1c:	e04a      	b.n	8006eb4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e1e:	7bfa      	ldrb	r2, [r7, #15]
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3315      	adds	r3, #21
 8006e2e:	2201      	movs	r2, #1
 8006e30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e32:	7bfa      	ldrb	r2, [r7, #15]
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	3314      	adds	r3, #20
 8006e42:	7bfa      	ldrb	r2, [r7, #15]
 8006e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e46:	7bfa      	ldrb	r2, [r7, #15]
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	b298      	uxth	r0, r3
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	332e      	adds	r3, #46	@ 0x2e
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e5e:	7bfa      	ldrb	r2, [r7, #15]
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	3318      	adds	r3, #24
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e72:	7bfa      	ldrb	r2, [r7, #15]
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	331c      	adds	r3, #28
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e86:	7bfa      	ldrb	r2, [r7, #15]
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	3320      	adds	r3, #32
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e9a:	7bfa      	ldrb	r2, [r7, #15]
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	3324      	adds	r3, #36	@ 0x24
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	73fb      	strb	r3, [r7, #15]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	791b      	ldrb	r3, [r3, #4]
 8006eb8:	7bfa      	ldrb	r2, [r7, #15]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d3af      	bcc.n	8006e1e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
 8006ec2:	e044      	b.n	8006f4e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ec4:	7bfa      	ldrb	r2, [r7, #15]
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006eda:	7bfa      	ldrb	r2, [r7, #15]
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006eec:	7bfa      	ldrb	r2, [r7, #15]
 8006eee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ef0:	7bfa      	ldrb	r2, [r7, #15]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006f02:	2200      	movs	r2, #0
 8006f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f06:	7bfa      	ldrb	r2, [r7, #15]
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f1c:	7bfa      	ldrb	r2, [r7, #15]
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f32:	7bfa      	ldrb	r2, [r7, #15]
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	73fb      	strb	r3, [r7, #15]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	791b      	ldrb	r3, [r3, #4]
 8006f52:	7bfa      	ldrb	r2, [r7, #15]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d3b5      	bcc.n	8006ec4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	7c1a      	ldrb	r2, [r3, #16]
 8006f60:	f88d 2000 	strb.w	r2, [sp]
 8006f64:	3304      	adds	r3, #4
 8006f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f68:	f008 fdec 	bl	800fb44 <USB_DevInit>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e013      	b.n	8006fa6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7b1b      	ldrb	r3, [r3, #12]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d102      	bne.n	8006f9a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f957 	bl	8008248 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f009 fe2f 	bl	8010c02 <USB_DevDisconnect>

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_PCD_Start+0x1c>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e022      	b.n	8007010 <HAL_PCD_Start+0x62>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d009      	beq.n	8006ff2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d105      	bne.n	8006ff2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f008 fd36 	bl	800fa68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4618      	mov	r0, r3
 8007002:	f009 fddd 	bl	8010bc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b08d      	sub	sp, #52	@ 0x34
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f009 fe9b 	bl	8010d6a <USB_GetMode>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 84b9 	bne.w	80079ae <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f009 fdff 	bl	8010c44 <USB_ReadInterrupts>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 84af 	beq.w	80079ac <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	0a1b      	lsrs	r3, r3, #8
 8007058:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f009 fdec 	bl	8010c44 <USB_ReadInterrupts>
 800706c:	4603      	mov	r3, r0
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b02      	cmp	r3, #2
 8007074:	d107      	bne.n	8007086 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695a      	ldr	r2, [r3, #20]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f002 0202 	and.w	r2, r2, #2
 8007084:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f009 fdda 	bl	8010c44 <USB_ReadInterrupts>
 8007090:	4603      	mov	r3, r0
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b10      	cmp	r3, #16
 8007098:	d161      	bne.n	800715e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699a      	ldr	r2, [r3, #24]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0210 	bic.w	r2, r2, #16
 80070a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f003 020f 	and.w	r2, r3, #15
 80070b6:	4613      	mov	r3, r2
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4413      	add	r3, r2
 80070c6:	3304      	adds	r3, #4
 80070c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80070d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070d4:	d124      	bne.n	8007120 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80070dc:	4013      	ands	r3, r2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d035      	beq.n	800714e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	091b      	lsrs	r3, r3, #4
 80070ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80070ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	6a38      	ldr	r0, [r7, #32]
 80070f6:	f009 fc11 	bl	801091c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	091b      	lsrs	r3, r3, #4
 8007102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007106:	441a      	add	r2, r3
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	091b      	lsrs	r3, r3, #4
 8007114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007118:	441a      	add	r2, r3
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	615a      	str	r2, [r3, #20]
 800711e:	e016      	b.n	800714e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007126:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800712a:	d110      	bne.n	800714e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007132:	2208      	movs	r2, #8
 8007134:	4619      	mov	r1, r3
 8007136:	6a38      	ldr	r0, [r7, #32]
 8007138:	f009 fbf0 	bl	801091c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	695a      	ldr	r2, [r3, #20]
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	091b      	lsrs	r3, r3, #4
 8007144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007148:	441a      	add	r2, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699a      	ldr	r2, [r3, #24]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0210 	orr.w	r2, r2, #16
 800715c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f009 fd6e 	bl	8010c44 <USB_ReadInterrupts>
 8007168:	4603      	mov	r3, r0
 800716a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800716e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007172:	f040 80a7 	bne.w	80072c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f009 fd73 	bl	8010c6a <USB_ReadDevAllOutEpInterrupt>
 8007184:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007186:	e099      	b.n	80072bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 808e 	beq.w	80072b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	4611      	mov	r1, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	f009 fd97 	bl	8010cd2 <USB_ReadDevOutEPInterrupt>
 80071a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00c      	beq.n	80071ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071bc:	461a      	mov	r2, r3
 80071be:	2301      	movs	r3, #1
 80071c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80071c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 feb9 	bl	8007f3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00c      	beq.n	80071ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e0:	461a      	mov	r2, r3
 80071e2:	2308      	movs	r3, #8
 80071e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80071e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 ff8f 	bl	800810c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007204:	461a      	mov	r2, r3
 8007206:	2310      	movs	r3, #16
 8007208:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d030      	beq.n	8007276 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800721c:	2b80      	cmp	r3, #128	@ 0x80
 800721e:	d109      	bne.n	8007234 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800722e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007232:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007236:	4613      	mov	r3, r2
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	4413      	add	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4413      	add	r3, r2
 8007246:	3304      	adds	r3, #4
 8007248:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	78db      	ldrb	r3, [r3, #3]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d108      	bne.n	8007264 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2200      	movs	r2, #0
 8007256:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	b2db      	uxtb	r3, r3
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f00e fb10 	bl	8015884 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007270:	461a      	mov	r2, r3
 8007272:	2302      	movs	r3, #2
 8007274:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728c:	461a      	mov	r2, r3
 800728e:	2320      	movs	r3, #32
 8007290:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d009      	beq.n	80072b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a8:	461a      	mov	r2, r3
 80072aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80072ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	3301      	adds	r3, #1
 80072b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80072bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f47f af62 	bne.w	8007188 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f009 fcbb 	bl	8010c44 <USB_ReadInterrupts>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072d8:	f040 80db 	bne.w	8007492 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f009 fcdc 	bl	8010c9e <USB_ReadDevAllInEpInterrupt>
 80072e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80072ec:	e0cd      	b.n	800748a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80072ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80c2 	beq.w	800747e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	4611      	mov	r1, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f009 fd02 	bl	8010d0e <USB_ReadDevInEPInterrupt>
 800730a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d057      	beq.n	80073c6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	2201      	movs	r2, #1
 800731e:	fa02 f303 	lsl.w	r3, r2, r3
 8007322:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800732a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	43db      	mvns	r3, r3
 8007330:	69f9      	ldr	r1, [r7, #28]
 8007332:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007336:	4013      	ands	r3, r2
 8007338:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007346:	461a      	mov	r2, r3
 8007348:	2301      	movs	r3, #1
 800734a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	799b      	ldrb	r3, [r3, #6]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d132      	bne.n	80073ba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007358:	4613      	mov	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	3320      	adds	r3, #32
 8007364:	6819      	ldr	r1, [r3, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800736a:	4613      	mov	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4403      	add	r3, r0
 8007374:	331c      	adds	r3, #28
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4419      	add	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800737e:	4613      	mov	r3, r2
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4403      	add	r3, r0
 8007388:	3320      	adds	r3, #32
 800738a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	2b00      	cmp	r3, #0
 8007390:	d113      	bne.n	80073ba <HAL_PCD_IRQHandler+0x3a2>
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007396:	4613      	mov	r3, r2
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	3324      	adds	r3, #36	@ 0x24
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d108      	bne.n	80073ba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80073b2:	461a      	mov	r2, r3
 80073b4:	2101      	movs	r1, #1
 80073b6:	f009 fd0b 	bl	8010dd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f00e f9da 	bl	801577a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073dc:	461a      	mov	r2, r3
 80073de:	2308      	movs	r3, #8
 80073e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d008      	beq.n	80073fe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f8:	461a      	mov	r2, r3
 80073fa:	2310      	movs	r3, #16
 80073fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	d008      	beq.n	800741a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007414:	461a      	mov	r2, r3
 8007416:	2340      	movs	r3, #64	@ 0x40
 8007418:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d023      	beq.n	800746c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007424:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007426:	6a38      	ldr	r0, [r7, #32]
 8007428:	f008 fcea 	bl	800fe00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800742c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800742e:	4613      	mov	r3, r2
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	3310      	adds	r3, #16
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	4413      	add	r3, r2
 800743c:	3304      	adds	r3, #4
 800743e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	78db      	ldrb	r3, [r3, #3]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d108      	bne.n	800745a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2200      	movs	r2, #0
 800744c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	b2db      	uxtb	r3, r3
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f00e fa27 	bl	80158a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007466:	461a      	mov	r2, r3
 8007468:	2302      	movs	r3, #2
 800746a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007476:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fcd2 	bl	8007e22 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	3301      	adds	r3, #1
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	2b00      	cmp	r3, #0
 800748e:	f47f af2e 	bne.w	80072ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f009 fbd4 	bl	8010c44 <USB_ReadInterrupts>
 800749c:	4603      	mov	r3, r0
 800749e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074a6:	d122      	bne.n	80074ee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074b6:	f023 0301 	bic.w	r3, r3, #1
 80074ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d108      	bne.n	80074d8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80074ce:	2100      	movs	r1, #0
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fedd 	bl	8008290 <HAL_PCDEx_LPM_Callback>
 80074d6:	e002      	b.n	80074de <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f00e f9c5 	bl	8015868 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	695a      	ldr	r2, [r3, #20]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80074ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f009 fba6 	bl	8010c44 <USB_ReadInterrupts>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007502:	d112      	bne.n	800752a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b01      	cmp	r3, #1
 8007512:	d102      	bne.n	800751a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f00e f981 	bl	801581c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695a      	ldr	r2, [r3, #20]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007528:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f009 fb88 	bl	8010c44 <USB_ReadInterrupts>
 8007534:	4603      	mov	r3, r0
 8007536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800753a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800753e:	d121      	bne.n	8007584 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695a      	ldr	r2, [r3, #20]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800754e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007556:	2b00      	cmp	r3, #0
 8007558:	d111      	bne.n	800757e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007568:	089b      	lsrs	r3, r3, #2
 800756a:	f003 020f 	and.w	r2, r3, #15
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007574:	2101      	movs	r1, #1
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fe8a 	bl	8008290 <HAL_PCDEx_LPM_Callback>
 800757c:	e002      	b.n	8007584 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f00e f94c 	bl	801581c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4618      	mov	r0, r3
 800758a:	f009 fb5b 	bl	8010c44 <USB_ReadInterrupts>
 800758e:	4603      	mov	r3, r0
 8007590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007598:	f040 80b7 	bne.w	800770a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075aa:	f023 0301 	bic.w	r3, r3, #1
 80075ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2110      	movs	r1, #16
 80075b6:	4618      	mov	r0, r3
 80075b8:	f008 fc22 	bl	800fe00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075bc:	2300      	movs	r3, #0
 80075be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c0:	e046      	b.n	8007650 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80075c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ce:	461a      	mov	r2, r3
 80075d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80075f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007602:	461a      	mov	r2, r3
 8007604:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007608:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800760a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007624:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007628:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800762a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007644:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007648:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800764a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764c:	3301      	adds	r3, #1
 800764e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	791b      	ldrb	r3, [r3, #4]
 8007654:	461a      	mov	r2, r3
 8007656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007658:	4293      	cmp	r3, r2
 800765a:	d3b2      	bcc.n	80075c2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800766a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800766e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	7bdb      	ldrb	r3, [r3, #15]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d016      	beq.n	80076a6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800767e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007688:	f043 030b 	orr.w	r3, r3, #11
 800768c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007698:	69fa      	ldr	r2, [r7, #28]
 800769a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800769e:	f043 030b 	orr.w	r3, r3, #11
 80076a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80076a4:	e015      	b.n	80076d2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ac:	695a      	ldr	r2, [r3, #20]
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b4:	4619      	mov	r1, r3
 80076b6:	f242 032b 	movw	r3, #8235	@ 0x202b
 80076ba:	4313      	orrs	r3, r2
 80076bc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076cc:	f043 030b 	orr.w	r3, r3, #11
 80076d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076e0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80076e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076f4:	461a      	mov	r2, r3
 80076f6:	f009 fb6b 	bl	8010dd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695a      	ldr	r2, [r3, #20]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4618      	mov	r0, r3
 8007710:	f009 fa98 	bl	8010c44 <USB_ReadInterrupts>
 8007714:	4603      	mov	r3, r0
 8007716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800771a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800771e:	d123      	bne.n	8007768 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f009 fb2f 	bl	8010d88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f008 fbdf 	bl	800fef2 <USB_GetDevSpeed>
 8007734:	4603      	mov	r3, r0
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681c      	ldr	r4, [r3, #0]
 8007740:	f001 fdf0 	bl	8009324 <HAL_RCC_GetHCLKFreq>
 8007744:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800774a:	461a      	mov	r2, r3
 800774c:	4620      	mov	r0, r4
 800774e:	f008 f8e9 	bl	800f924 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f00e f839 	bl	80157ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695a      	ldr	r2, [r3, #20]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007766:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f009 fa69 	bl	8010c44 <USB_ReadInterrupts>
 8007772:	4603      	mov	r3, r0
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b08      	cmp	r3, #8
 800777a:	d10a      	bne.n	8007792 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f00e f816 	bl	80157ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695a      	ldr	r2, [r3, #20]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f002 0208 	and.w	r2, r2, #8
 8007790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f009 fa54 	bl	8010c44 <USB_ReadInterrupts>
 800779c:	4603      	mov	r3, r0
 800779e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077a2:	2b80      	cmp	r3, #128	@ 0x80
 80077a4:	d123      	bne.n	80077ee <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077b2:	2301      	movs	r3, #1
 80077b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077b6:	e014      	b.n	80077e2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d105      	bne.n	80077dc <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 faf2 	bl	8007dc0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077de:	3301      	adds	r3, #1
 80077e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	791b      	ldrb	r3, [r3, #4]
 80077e6:	461a      	mov	r2, r3
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d3e4      	bcc.n	80077b8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f009 fa26 	bl	8010c44 <USB_ReadInterrupts>
 80077f8:	4603      	mov	r3, r0
 80077fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007802:	d13c      	bne.n	800787e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007804:	2301      	movs	r3, #1
 8007806:	627b      	str	r3, [r7, #36]	@ 0x24
 8007808:	e02b      	b.n	8007862 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800781e:	4613      	mov	r3, r2
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	440b      	add	r3, r1
 8007828:	3318      	adds	r3, #24
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d115      	bne.n	800785c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007830:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007832:	2b00      	cmp	r3, #0
 8007834:	da12      	bge.n	800785c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800783a:	4613      	mov	r3, r2
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	440b      	add	r3, r1
 8007844:	3317      	adds	r3, #23
 8007846:	2201      	movs	r2, #1
 8007848:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007852:	b2db      	uxtb	r3, r3
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fab2 	bl	8007dc0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	3301      	adds	r3, #1
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	791b      	ldrb	r3, [r3, #4]
 8007866:	461a      	mov	r2, r3
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	4293      	cmp	r3, r2
 800786c:	d3cd      	bcc.n	800780a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695a      	ldr	r2, [r3, #20]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800787c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f009 f9de 	bl	8010c44 <USB_ReadInterrupts>
 8007888:	4603      	mov	r3, r0
 800788a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800788e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007892:	d156      	bne.n	8007942 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007894:	2301      	movs	r3, #1
 8007896:	627b      	str	r3, [r7, #36]	@ 0x24
 8007898:	e045      	b.n	8007926 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ae:	4613      	mov	r3, r2
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	440b      	add	r3, r1
 80078b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d12e      	bne.n	8007920 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80078c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	da2b      	bge.n	8007920 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	0c1a      	lsrs	r2, r3, #16
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80078d2:	4053      	eors	r3, r2
 80078d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d121      	bne.n	8007920 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e0:	4613      	mov	r3, r2
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80078ee:	2201      	movs	r2, #1
 80078f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007918:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800791c:	6053      	str	r3, [r2, #4]
            break;
 800791e:	e008      	b.n	8007932 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	3301      	adds	r3, #1
 8007924:	627b      	str	r3, [r7, #36]	@ 0x24
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	791b      	ldrb	r3, [r3, #4]
 800792a:	461a      	mov	r2, r3
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	4293      	cmp	r3, r2
 8007930:	d3b3      	bcc.n	800789a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	695a      	ldr	r2, [r3, #20]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f009 f97c 	bl	8010c44 <USB_ReadInterrupts>
 800794c:	4603      	mov	r3, r0
 800794e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007956:	d10a      	bne.n	800796e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f00d ffb7 	bl	80158cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695a      	ldr	r2, [r3, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800796c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f009 f966 	bl	8010c44 <USB_ReadInterrupts>
 8007978:	4603      	mov	r3, r0
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b04      	cmp	r3, #4
 8007980:	d115      	bne.n	80079ae <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f00d ffa7 	bl	80158e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6859      	ldr	r1, [r3, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]
 80079aa:	e000      	b.n	80079ae <HAL_PCD_IRQHandler+0x996>
      return;
 80079ac:	bf00      	nop
    }
  }
}
 80079ae:	3734      	adds	r7, #52	@ 0x34
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd90      	pop	{r4, r7, pc}

080079b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_PCD_SetAddress+0x1a>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e012      	b.n	80079f4 <HAL_PCD_SetAddress+0x40>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	78fa      	ldrb	r2, [r7, #3]
 80079da:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	78fa      	ldrb	r2, [r7, #3]
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f009 f8c5 	bl	8010b74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	4608      	mov	r0, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	461a      	mov	r2, r3
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	70fb      	strb	r3, [r7, #3]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	803b      	strh	r3, [r7, #0]
 8007a12:	4613      	mov	r3, r2
 8007a14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	da0f      	bge.n	8007a42 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	f003 020f 	and.w	r2, r3, #15
 8007a28:	4613      	mov	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	3310      	adds	r3, #16
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	4413      	add	r3, r2
 8007a36:	3304      	adds	r3, #4
 8007a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	705a      	strb	r2, [r3, #1]
 8007a40:	e00f      	b.n	8007a62 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	f003 020f 	and.w	r2, r3, #15
 8007a48:	4613      	mov	r3, r2
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	4413      	add	r3, r2
 8007a58:	3304      	adds	r3, #4
 8007a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007a6e:	883b      	ldrh	r3, [r7, #0]
 8007a70:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	78ba      	ldrb	r2, [r7, #2]
 8007a7c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a90:	78bb      	ldrb	r3, [r7, #2]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d102      	bne.n	8007a9c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_PCD_EP_Open+0xae>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e00e      	b.n	8007ac8 <HAL_PCD_EP_Open+0xcc>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f008 fa3f 	bl	800ff3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da0f      	bge.n	8007b04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	f003 020f 	and.w	r2, r3, #15
 8007aea:	4613      	mov	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	3310      	adds	r3, #16
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	4413      	add	r3, r2
 8007af8:	3304      	adds	r3, #4
 8007afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	705a      	strb	r2, [r3, #1]
 8007b02:	e00f      	b.n	8007b24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	f003 020f 	and.w	r2, r3, #15
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_PCD_EP_Close+0x6e>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e00e      	b.n	8007b5c <HAL_PCD_EP_Close+0x8c>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68f9      	ldr	r1, [r7, #12]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f008 fa7d 	bl	801004c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	460b      	mov	r3, r1
 8007b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	f003 020f 	and.w	r2, r3, #15
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	799b      	ldrb	r3, [r3, #6]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d102      	bne.n	8007bc0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	799b      	ldrb	r3, [r3, #6]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6979      	ldr	r1, [r7, #20]
 8007bcc:	f008 fb1a 	bl	8010204 <USB_EPStartXfer>

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	603b      	str	r3, [r7, #0]
 8007be6:	460b      	mov	r3, r1
 8007be8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	3310      	adds	r3, #16
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3304      	adds	r3, #4
 8007c00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2200      	movs	r2, #0
 8007c12:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2201      	movs	r2, #1
 8007c18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	f003 030f 	and.w	r3, r3, #15
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	799b      	ldrb	r3, [r3, #6]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d102      	bne.n	8007c34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	799b      	ldrb	r3, [r3, #6]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6979      	ldr	r1, [r7, #20]
 8007c40:	f008 fae0 	bl	8010204 <USB_EPStartXfer>

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7912      	ldrb	r2, [r2, #4]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d901      	bls.n	8007c6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e04f      	b.n	8007d0c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	da0f      	bge.n	8007c94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	f003 020f 	and.w	r2, r3, #15
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	3310      	adds	r3, #16
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	705a      	strb	r2, [r3, #1]
 8007c92:	e00d      	b.n	8007cb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	4613      	mov	r3, r2
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	f003 030f 	and.w	r3, r3, #15
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_PCD_EP_SetStall+0x82>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e01d      	b.n	8007d0c <HAL_PCD_EP_SetStall+0xbe>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68f9      	ldr	r1, [r7, #12]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f008 fe74 	bl	80109cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	7999      	ldrb	r1, [r3, #6]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f009 f867 	bl	8010dd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	7912      	ldrb	r2, [r2, #4]
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d901      	bls.n	8007d32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e042      	b.n	8007db8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da0f      	bge.n	8007d5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	f003 020f 	and.w	r2, r3, #15
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	3310      	adds	r3, #16
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3304      	adds	r3, #4
 8007d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	705a      	strb	r2, [r3, #1]
 8007d58:	e00f      	b.n	8007d7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	f003 020f 	and.w	r2, r3, #15
 8007d60:	4613      	mov	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	4413      	add	r3, r2
 8007d70:	3304      	adds	r3, #4
 8007d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d101      	bne.n	8007d9a <HAL_PCD_EP_ClrStall+0x86>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e00e      	b.n	8007db8 <HAL_PCD_EP_ClrStall+0xa4>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68f9      	ldr	r1, [r7, #12]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f008 fe7d 	bl	8010aa8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	da0c      	bge.n	8007dee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	f003 020f 	and.w	r2, r3, #15
 8007dda:	4613      	mov	r3, r2
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	3310      	adds	r3, #16
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	4413      	add	r3, r2
 8007de8:	3304      	adds	r3, #4
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e00c      	b.n	8007e08 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	f003 020f 	and.w	r2, r3, #15
 8007df4:	4613      	mov	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	4413      	add	r3, r2
 8007e04:	3304      	adds	r3, #4
 8007e06:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68f9      	ldr	r1, [r7, #12]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f008 fc9c 	bl	801074c <USB_EPStopXfer>
 8007e14:	4603      	mov	r3, r0
 8007e16:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b08a      	sub	sp, #40	@ 0x28
 8007e26:	af02      	add	r7, sp, #8
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	3310      	adds	r3, #16
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	4413      	add	r3, r2
 8007e46:	3304      	adds	r3, #4
 8007e48:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	695a      	ldr	r2, [r3, #20]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d901      	bls.n	8007e5a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e06b      	b.n	8007f32 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	69fa      	ldr	r2, [r7, #28]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d902      	bls.n	8007e76 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	3303      	adds	r3, #3
 8007e7a:	089b      	lsrs	r3, r3, #2
 8007e7c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e7e:	e02a      	b.n	8007ed6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d902      	bls.n	8007e9c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	3303      	adds	r3, #3
 8007ea0:	089b      	lsrs	r3, r3, #2
 8007ea2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68d9      	ldr	r1, [r3, #12]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	6978      	ldr	r0, [r7, #20]
 8007eba:	f008 fcf1 	bl	80108a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	695a      	ldr	r2, [r3, #20]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d809      	bhi.n	8007f00 <PCD_WriteEmptyTxFifo+0xde>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	695a      	ldr	r2, [r3, #20]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d203      	bcs.n	8007f00 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1bf      	bne.n	8007e80 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d811      	bhi.n	8007f30 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	2201      	movs	r2, #1
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	6939      	ldr	r1, [r7, #16]
 8007f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	333c      	adds	r3, #60	@ 0x3c
 8007f54:	3304      	adds	r3, #4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	799b      	ldrb	r3, [r3, #6]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d17b      	bne.n	800806a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f003 0308 	and.w	r3, r3, #8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d015      	beq.n	8007fa8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	4a61      	ldr	r2, [pc, #388]	@ (8008104 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	f240 80b9 	bls.w	80080f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 80b3 	beq.w	80080f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fa4:	6093      	str	r3, [r2, #8]
 8007fa6:	e0a7      	b.n	80080f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	6093      	str	r3, [r2, #8]
 8007fc4:	e098      	b.n	80080f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 8093 	bne.w	80080f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8008104 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d90f      	bls.n	8007ffa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ff6:	6093      	str	r3, [r2, #8]
 8007ff8:	e07e      	b.n	80080f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	3304      	adds	r3, #4
 800800e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a1a      	ldr	r2, [r3, #32]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	0159      	lsls	r1, r3, #5
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	440b      	add	r3, r1
 800801c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008026:	1ad2      	subs	r2, r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d114      	bne.n	800805c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008044:	461a      	mov	r2, r3
 8008046:	2101      	movs	r1, #1
 8008048:	f008 fec2 	bl	8010dd0 <USB_EP0_OutStart>
 800804c:	e006      	b.n	800805c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	441a      	add	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f00d fb6e 	bl	8015744 <HAL_PCD_DataOutStageCallback>
 8008068:	e046      	b.n	80080f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4a26      	ldr	r2, [pc, #152]	@ (8008108 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d124      	bne.n	80080bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00a      	beq.n	8008092 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008088:	461a      	mov	r2, r3
 800808a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800808e:	6093      	str	r3, [r2, #8]
 8008090:	e032      	b.n	80080f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f003 0320 	and.w	r3, r3, #32
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a8:	461a      	mov	r2, r3
 80080aa:	2320      	movs	r3, #32
 80080ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f00d fb45 	bl	8015744 <HAL_PCD_DataOutStageCallback>
 80080ba:	e01d      	b.n	80080f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d114      	bne.n	80080ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	4613      	mov	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d108      	bne.n	80080ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080e4:	461a      	mov	r2, r3
 80080e6:	2100      	movs	r1, #0
 80080e8:	f008 fe72 	bl	8010dd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f00d fb26 	bl	8015744 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	4f54300a 	.word	0x4f54300a
 8008108:	4f54310a 	.word	0x4f54310a

0800810c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	333c      	adds	r3, #60	@ 0x3c
 8008124:	3304      	adds	r3, #4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4a15      	ldr	r2, [pc, #84]	@ (8008194 <PCD_EP_OutSetupPacket_int+0x88>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d90e      	bls.n	8008160 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008158:	461a      	mov	r2, r3
 800815a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800815e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f00d fadd 	bl	8015720 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a0a      	ldr	r2, [pc, #40]	@ (8008194 <PCD_EP_OutSetupPacket_int+0x88>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d90c      	bls.n	8008188 <PCD_EP_OutSetupPacket_int+0x7c>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	799b      	ldrb	r3, [r3, #6]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d108      	bne.n	8008188 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008180:	461a      	mov	r2, r3
 8008182:	2101      	movs	r1, #1
 8008184:	f008 fe24 	bl	8010dd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	4f54300a 	.word	0x4f54300a

08008198 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
 80081a4:	4613      	mov	r3, r2
 80081a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d107      	bne.n	80081c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80081b6:	883b      	ldrh	r3, [r7, #0]
 80081b8:	0419      	lsls	r1, r3, #16
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80081c4:	e028      	b.n	8008218 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4413      	add	r3, r2
 80081d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
 80081d8:	e00d      	b.n	80081f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	3340      	adds	r3, #64	@ 0x40
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	0c1b      	lsrs	r3, r3, #16
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	3301      	adds	r3, #1
 80081f4:	73fb      	strb	r3, [r7, #15]
 80081f6:	7bfa      	ldrb	r2, [r7, #15]
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d3ec      	bcc.n	80081da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008200:	883b      	ldrh	r3, [r7, #0]
 8008202:	0418      	lsls	r0, r3, #16
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6819      	ldr	r1, [r3, #0]
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	3b01      	subs	r3, #1
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	4302      	orrs	r2, r0
 8008210:	3340      	adds	r3, #64	@ 0x40
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	887a      	ldrh	r2, [r7, #2]
 8008238:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008276:	4b05      	ldr	r3, [pc, #20]	@ (800828c <HAL_PCDEx_ActivateLPM+0x44>)
 8008278:	4313      	orrs	r3, r2
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	10000003 	.word	0x10000003

08008290 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80082b0:	4b19      	ldr	r3, [pc, #100]	@ (8008318 <HAL_PWREx_ConfigSupply+0x70>)
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d00a      	beq.n	80082d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80082bc:	4b16      	ldr	r3, [pc, #88]	@ (8008318 <HAL_PWREx_ConfigSupply+0x70>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d001      	beq.n	80082ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e01f      	b.n	800830e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e01d      	b.n	800830e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082d2:	4b11      	ldr	r3, [pc, #68]	@ (8008318 <HAL_PWREx_ConfigSupply+0x70>)
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f023 0207 	bic.w	r2, r3, #7
 80082da:	490f      	ldr	r1, [pc, #60]	@ (8008318 <HAL_PWREx_ConfigSupply+0x70>)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80082e2:	f7fa fc83 	bl	8002bec <HAL_GetTick>
 80082e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082e8:	e009      	b.n	80082fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082ea:	f7fa fc7f 	bl	8002bec <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082f8:	d901      	bls.n	80082fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e007      	b.n	800830e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082fe:	4b06      	ldr	r3, [pc, #24]	@ (8008318 <HAL_PWREx_ConfigSupply+0x70>)
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800830a:	d1ee      	bne.n	80082ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	58024800 	.word	0x58024800

0800831c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008320:	4b05      	ldr	r3, [pc, #20]	@ (8008338 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4a04      	ldr	r2, [pc, #16]	@ (8008338 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800832a:	60d3      	str	r3, [r2, #12]
}
 800832c:	bf00      	nop
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	58024800 	.word	0x58024800

0800833c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08c      	sub	sp, #48	@ 0x30
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d102      	bne.n	8008350 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f000 bc48 	b.w	8008be0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 8088 	beq.w	800846e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800835e:	4b99      	ldr	r3, [pc, #612]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008368:	4b96      	ldr	r3, [pc, #600]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800836a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800836e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008370:	2b10      	cmp	r3, #16
 8008372:	d007      	beq.n	8008384 <HAL_RCC_OscConfig+0x48>
 8008374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008376:	2b18      	cmp	r3, #24
 8008378:	d111      	bne.n	800839e <HAL_RCC_OscConfig+0x62>
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	f003 0303 	and.w	r3, r3, #3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d10c      	bne.n	800839e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008384:	4b8f      	ldr	r3, [pc, #572]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d06d      	beq.n	800846c <HAL_RCC_OscConfig+0x130>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d169      	bne.n	800846c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	f000 bc21 	b.w	8008be0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083a6:	d106      	bne.n	80083b6 <HAL_RCC_OscConfig+0x7a>
 80083a8:	4b86      	ldr	r3, [pc, #536]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a85      	ldr	r2, [pc, #532]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	e02e      	b.n	8008414 <HAL_RCC_OscConfig+0xd8>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10c      	bne.n	80083d8 <HAL_RCC_OscConfig+0x9c>
 80083be:	4b81      	ldr	r3, [pc, #516]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a80      	ldr	r2, [pc, #512]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	4b7e      	ldr	r3, [pc, #504]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a7d      	ldr	r2, [pc, #500]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	e01d      	b.n	8008414 <HAL_RCC_OscConfig+0xd8>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083e0:	d10c      	bne.n	80083fc <HAL_RCC_OscConfig+0xc0>
 80083e2:	4b78      	ldr	r3, [pc, #480]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a77      	ldr	r2, [pc, #476]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	4b75      	ldr	r3, [pc, #468]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a74      	ldr	r2, [pc, #464]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083f8:	6013      	str	r3, [r2, #0]
 80083fa:	e00b      	b.n	8008414 <HAL_RCC_OscConfig+0xd8>
 80083fc:	4b71      	ldr	r3, [pc, #452]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a70      	ldr	r2, [pc, #448]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	4b6e      	ldr	r3, [pc, #440]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a6d      	ldr	r2, [pc, #436]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800840e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d013      	beq.n	8008444 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841c:	f7fa fbe6 	bl	8002bec <HAL_GetTick>
 8008420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008424:	f7fa fbe2 	bl	8002bec <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b64      	cmp	r3, #100	@ 0x64
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e3d4      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008436:	4b63      	ldr	r3, [pc, #396]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0f0      	beq.n	8008424 <HAL_RCC_OscConfig+0xe8>
 8008442:	e014      	b.n	800846e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008444:	f7fa fbd2 	bl	8002bec <HAL_GetTick>
 8008448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800844c:	f7fa fbce 	bl	8002bec <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b64      	cmp	r3, #100	@ 0x64
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e3c0      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800845e:	4b59      	ldr	r3, [pc, #356]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1f0      	bne.n	800844c <HAL_RCC_OscConfig+0x110>
 800846a:	e000      	b.n	800846e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800846c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 80ca 	beq.w	8008610 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800847c:	4b51      	ldr	r3, [pc, #324]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008484:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008486:	4b4f      	ldr	r3, [pc, #316]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <HAL_RCC_OscConfig+0x166>
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	2b18      	cmp	r3, #24
 8008496:	d156      	bne.n	8008546 <HAL_RCC_OscConfig+0x20a>
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	f003 0303 	and.w	r3, r3, #3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d151      	bne.n	8008546 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a2:	4b48      	ldr	r3, [pc, #288]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0304 	and.w	r3, r3, #4
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_RCC_OscConfig+0x17e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e392      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084ba:	4b42      	ldr	r3, [pc, #264]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f023 0219 	bic.w	r2, r3, #25
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	493f      	ldr	r1, [pc, #252]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084cc:	f7fa fb8e 	bl	8002bec <HAL_GetTick>
 80084d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084d2:	e008      	b.n	80084e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084d4:	f7fa fb8a 	bl	8002bec <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e37c      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e6:	4b37      	ldr	r3, [pc, #220]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0304 	and.w	r3, r3, #4
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0f0      	beq.n	80084d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f2:	f7fa fbab 	bl	8002c4c <HAL_GetREVID>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d817      	bhi.n	8008530 <HAL_RCC_OscConfig+0x1f4>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	2b40      	cmp	r3, #64	@ 0x40
 8008506:	d108      	bne.n	800851a <HAL_RCC_OscConfig+0x1de>
 8008508:	4b2e      	ldr	r3, [pc, #184]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008510:	4a2c      	ldr	r2, [pc, #176]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008516:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008518:	e07a      	b.n	8008610 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800851a:	4b2a      	ldr	r3, [pc, #168]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	031b      	lsls	r3, r3, #12
 8008528:	4926      	ldr	r1, [pc, #152]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800852a:	4313      	orrs	r3, r2
 800852c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800852e:	e06f      	b.n	8008610 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008530:	4b24      	ldr	r3, [pc, #144]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	061b      	lsls	r3, r3, #24
 800853e:	4921      	ldr	r1, [pc, #132]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008540:	4313      	orrs	r3, r2
 8008542:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008544:	e064      	b.n	8008610 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d047      	beq.n	80085de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800854e:	4b1d      	ldr	r3, [pc, #116]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f023 0219 	bic.w	r2, r3, #25
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	491a      	ldr	r1, [pc, #104]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800855c:	4313      	orrs	r3, r2
 800855e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008560:	f7fa fb44 	bl	8002bec <HAL_GetTick>
 8008564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008568:	f7fa fb40 	bl	8002bec <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e332      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800857a:	4b12      	ldr	r3, [pc, #72]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0f0      	beq.n	8008568 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008586:	f7fa fb61 	bl	8002c4c <HAL_GetREVID>
 800858a:	4603      	mov	r3, r0
 800858c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008590:	4293      	cmp	r3, r2
 8008592:	d819      	bhi.n	80085c8 <HAL_RCC_OscConfig+0x28c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b40      	cmp	r3, #64	@ 0x40
 800859a:	d108      	bne.n	80085ae <HAL_RCC_OscConfig+0x272>
 800859c:	4b09      	ldr	r3, [pc, #36]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80085a4:	4a07      	ldr	r2, [pc, #28]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80085a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085aa:	6053      	str	r3, [r2, #4]
 80085ac:	e030      	b.n	8008610 <HAL_RCC_OscConfig+0x2d4>
 80085ae:	4b05      	ldr	r3, [pc, #20]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	031b      	lsls	r3, r3, #12
 80085bc:	4901      	ldr	r1, [pc, #4]	@ (80085c4 <HAL_RCC_OscConfig+0x288>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	604b      	str	r3, [r1, #4]
 80085c2:	e025      	b.n	8008610 <HAL_RCC_OscConfig+0x2d4>
 80085c4:	58024400 	.word	0x58024400
 80085c8:	4b9a      	ldr	r3, [pc, #616]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	061b      	lsls	r3, r3, #24
 80085d6:	4997      	ldr	r1, [pc, #604]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80085d8:	4313      	orrs	r3, r2
 80085da:	604b      	str	r3, [r1, #4]
 80085dc:	e018      	b.n	8008610 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085de:	4b95      	ldr	r3, [pc, #596]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a94      	ldr	r2, [pc, #592]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ea:	f7fa faff 	bl	8002bec <HAL_GetTick>
 80085ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085f0:	e008      	b.n	8008604 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085f2:	f7fa fafb 	bl	8002bec <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d901      	bls.n	8008604 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e2ed      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008604:	4b8b      	ldr	r3, [pc, #556]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1f0      	bne.n	80085f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 80a9 	beq.w	8008770 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800861e:	4b85      	ldr	r3, [pc, #532]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008626:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008628:	4b82      	ldr	r3, [pc, #520]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 800862a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	2b08      	cmp	r3, #8
 8008632:	d007      	beq.n	8008644 <HAL_RCC_OscConfig+0x308>
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	2b18      	cmp	r3, #24
 8008638:	d13a      	bne.n	80086b0 <HAL_RCC_OscConfig+0x374>
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	2b01      	cmp	r3, #1
 8008642:	d135      	bne.n	80086b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008644:	4b7b      	ldr	r3, [pc, #492]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <HAL_RCC_OscConfig+0x320>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	2b80      	cmp	r3, #128	@ 0x80
 8008656:	d001      	beq.n	800865c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e2c1      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800865c:	f7fa faf6 	bl	8002c4c <HAL_GetREVID>
 8008660:	4603      	mov	r3, r0
 8008662:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008666:	4293      	cmp	r3, r2
 8008668:	d817      	bhi.n	800869a <HAL_RCC_OscConfig+0x35e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	2b20      	cmp	r3, #32
 8008670:	d108      	bne.n	8008684 <HAL_RCC_OscConfig+0x348>
 8008672:	4b70      	ldr	r3, [pc, #448]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800867a:	4a6e      	ldr	r2, [pc, #440]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 800867c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008680:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008682:	e075      	b.n	8008770 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008684:	4b6b      	ldr	r3, [pc, #428]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	069b      	lsls	r3, r3, #26
 8008692:	4968      	ldr	r1, [pc, #416]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008694:	4313      	orrs	r3, r2
 8008696:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008698:	e06a      	b.n	8008770 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800869a:	4b66      	ldr	r3, [pc, #408]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	061b      	lsls	r3, r3, #24
 80086a8:	4962      	ldr	r1, [pc, #392]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086ae:	e05f      	b.n	8008770 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d042      	beq.n	800873e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086b8:	4b5e      	ldr	r3, [pc, #376]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a5d      	ldr	r2, [pc, #372]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80086be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c4:	f7fa fa92 	bl	8002bec <HAL_GetTick>
 80086c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086ca:	e008      	b.n	80086de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086cc:	f7fa fa8e 	bl	8002bec <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e280      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086de:	4b55      	ldr	r3, [pc, #340]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f0      	beq.n	80086cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086ea:	f7fa faaf 	bl	8002c4c <HAL_GetREVID>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d817      	bhi.n	8008728 <HAL_RCC_OscConfig+0x3ec>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	d108      	bne.n	8008712 <HAL_RCC_OscConfig+0x3d6>
 8008700:	4b4c      	ldr	r3, [pc, #304]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008708:	4a4a      	ldr	r2, [pc, #296]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 800870a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800870e:	6053      	str	r3, [r2, #4]
 8008710:	e02e      	b.n	8008770 <HAL_RCC_OscConfig+0x434>
 8008712:	4b48      	ldr	r3, [pc, #288]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	069b      	lsls	r3, r3, #26
 8008720:	4944      	ldr	r1, [pc, #272]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008722:	4313      	orrs	r3, r2
 8008724:	604b      	str	r3, [r1, #4]
 8008726:	e023      	b.n	8008770 <HAL_RCC_OscConfig+0x434>
 8008728:	4b42      	ldr	r3, [pc, #264]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	061b      	lsls	r3, r3, #24
 8008736:	493f      	ldr	r1, [pc, #252]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008738:	4313      	orrs	r3, r2
 800873a:	60cb      	str	r3, [r1, #12]
 800873c:	e018      	b.n	8008770 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800873e:	4b3d      	ldr	r3, [pc, #244]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a3c      	ldr	r2, [pc, #240]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874a:	f7fa fa4f 	bl	8002bec <HAL_GetTick>
 800874e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008750:	e008      	b.n	8008764 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008752:	f7fa fa4b 	bl	8002bec <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b02      	cmp	r3, #2
 800875e:	d901      	bls.n	8008764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e23d      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008764:	4b33      	ldr	r3, [pc, #204]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f0      	bne.n	8008752 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d036      	beq.n	80087ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d019      	beq.n	80087b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008784:	4b2b      	ldr	r3, [pc, #172]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008788:	4a2a      	ldr	r2, [pc, #168]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 800878a:	f043 0301 	orr.w	r3, r3, #1
 800878e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008790:	f7fa fa2c 	bl	8002bec <HAL_GetTick>
 8008794:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008798:	f7fa fa28 	bl	8002bec <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e21a      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087aa:	4b22      	ldr	r3, [pc, #136]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80087ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f0      	beq.n	8008798 <HAL_RCC_OscConfig+0x45c>
 80087b6:	e018      	b.n	80087ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80087ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c4:	f7fa fa12 	bl	8002bec <HAL_GetTick>
 80087c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087cc:	f7fa fa0e 	bl	8002bec <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e200      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087de:	4b15      	ldr	r3, [pc, #84]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 80087e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1f0      	bne.n	80087cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d039      	beq.n	800886a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d01c      	beq.n	8008838 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a0c      	ldr	r2, [pc, #48]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008804:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008808:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800880a:	f7fa f9ef 	bl	8002bec <HAL_GetTick>
 800880e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008810:	e008      	b.n	8008824 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008812:	f7fa f9eb 	bl	8002bec <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e1dd      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008824:	4b03      	ldr	r3, [pc, #12]	@ (8008834 <HAL_RCC_OscConfig+0x4f8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0f0      	beq.n	8008812 <HAL_RCC_OscConfig+0x4d6>
 8008830:	e01b      	b.n	800886a <HAL_RCC_OscConfig+0x52e>
 8008832:	bf00      	nop
 8008834:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008838:	4b9b      	ldr	r3, [pc, #620]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a9a      	ldr	r2, [pc, #616]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 800883e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008842:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008844:	f7fa f9d2 	bl	8002bec <HAL_GetTick>
 8008848:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800884c:	f7fa f9ce 	bl	8002bec <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e1c0      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800885e:	4b92      	ldr	r3, [pc, #584]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1f0      	bne.n	800884c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 8081 	beq.w	800897a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008878:	4b8c      	ldr	r3, [pc, #560]	@ (8008aac <HAL_RCC_OscConfig+0x770>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a8b      	ldr	r2, [pc, #556]	@ (8008aac <HAL_RCC_OscConfig+0x770>)
 800887e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008882:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008884:	f7fa f9b2 	bl	8002bec <HAL_GetTick>
 8008888:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800888c:	f7fa f9ae 	bl	8002bec <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b64      	cmp	r3, #100	@ 0x64
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e1a0      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800889e:	4b83      	ldr	r3, [pc, #524]	@ (8008aac <HAL_RCC_OscConfig+0x770>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f0      	beq.n	800888c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d106      	bne.n	80088c0 <HAL_RCC_OscConfig+0x584>
 80088b2:	4b7d      	ldr	r3, [pc, #500]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088b6:	4a7c      	ldr	r2, [pc, #496]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80088be:	e02d      	b.n	800891c <HAL_RCC_OscConfig+0x5e0>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10c      	bne.n	80088e2 <HAL_RCC_OscConfig+0x5a6>
 80088c8:	4b77      	ldr	r3, [pc, #476]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088cc:	4a76      	ldr	r2, [pc, #472]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80088d4:	4b74      	ldr	r3, [pc, #464]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d8:	4a73      	ldr	r2, [pc, #460]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088da:	f023 0304 	bic.w	r3, r3, #4
 80088de:	6713      	str	r3, [r2, #112]	@ 0x70
 80088e0:	e01c      	b.n	800891c <HAL_RCC_OscConfig+0x5e0>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	d10c      	bne.n	8008904 <HAL_RCC_OscConfig+0x5c8>
 80088ea:	4b6f      	ldr	r3, [pc, #444]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ee:	4a6e      	ldr	r2, [pc, #440]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088f0:	f043 0304 	orr.w	r3, r3, #4
 80088f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80088f6:	4b6c      	ldr	r3, [pc, #432]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fa:	4a6b      	ldr	r2, [pc, #428]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80088fc:	f043 0301 	orr.w	r3, r3, #1
 8008900:	6713      	str	r3, [r2, #112]	@ 0x70
 8008902:	e00b      	b.n	800891c <HAL_RCC_OscConfig+0x5e0>
 8008904:	4b68      	ldr	r3, [pc, #416]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008908:	4a67      	ldr	r2, [pc, #412]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 800890a:	f023 0301 	bic.w	r3, r3, #1
 800890e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008910:	4b65      	ldr	r3, [pc, #404]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008914:	4a64      	ldr	r2, [pc, #400]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008916:	f023 0304 	bic.w	r3, r3, #4
 800891a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d015      	beq.n	8008950 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008924:	f7fa f962 	bl	8002bec <HAL_GetTick>
 8008928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800892a:	e00a      	b.n	8008942 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800892c:	f7fa f95e 	bl	8002bec <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800893a:	4293      	cmp	r3, r2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e14e      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008942:	4b59      	ldr	r3, [pc, #356]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0ee      	beq.n	800892c <HAL_RCC_OscConfig+0x5f0>
 800894e:	e014      	b.n	800897a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008950:	f7fa f94c 	bl	8002bec <HAL_GetTick>
 8008954:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008956:	e00a      	b.n	800896e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008958:	f7fa f948 	bl	8002bec <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008966:	4293      	cmp	r3, r2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e138      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800896e:	4b4e      	ldr	r3, [pc, #312]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1ee      	bne.n	8008958 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 812d 	beq.w	8008bde <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008984:	4b48      	ldr	r3, [pc, #288]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800898c:	2b18      	cmp	r3, #24
 800898e:	f000 80bd 	beq.w	8008b0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008996:	2b02      	cmp	r3, #2
 8008998:	f040 809e 	bne.w	8008ad8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800899c:	4b42      	ldr	r3, [pc, #264]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a41      	ldr	r2, [pc, #260]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80089a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a8:	f7fa f920 	bl	8002bec <HAL_GetTick>
 80089ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089ae:	e008      	b.n	80089c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089b0:	f7fa f91c 	bl	8002bec <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d901      	bls.n	80089c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e10e      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089c2:	4b39      	ldr	r3, [pc, #228]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1f0      	bne.n	80089b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089ce:	4b36      	ldr	r3, [pc, #216]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80089d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089d2:	4b37      	ldr	r3, [pc, #220]	@ (8008ab0 <HAL_RCC_OscConfig+0x774>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80089de:	0112      	lsls	r2, r2, #4
 80089e0:	430a      	orrs	r2, r1
 80089e2:	4931      	ldr	r1, [pc, #196]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ec:	3b01      	subs	r3, #1
 80089ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f6:	3b01      	subs	r3, #1
 80089f8:	025b      	lsls	r3, r3, #9
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	431a      	orrs	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a02:	3b01      	subs	r3, #1
 8008a04:	041b      	lsls	r3, r3, #16
 8008a06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a10:	3b01      	subs	r3, #1
 8008a12:	061b      	lsls	r3, r3, #24
 8008a14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a18:	4923      	ldr	r1, [pc, #140]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a1e:	4b22      	ldr	r3, [pc, #136]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a22:	4a21      	ldr	r2, [pc, #132]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a2e:	4b21      	ldr	r3, [pc, #132]	@ (8008ab4 <HAL_RCC_OscConfig+0x778>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a36:	00d2      	lsls	r2, r2, #3
 8008a38:	491b      	ldr	r1, [pc, #108]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	f023 020c 	bic.w	r2, r3, #12
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4a:	4917      	ldr	r1, [pc, #92]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a50:	4b15      	ldr	r3, [pc, #84]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	f023 0202 	bic.w	r2, r3, #2
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5c:	4912      	ldr	r1, [pc, #72]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a62:	4b11      	ldr	r3, [pc, #68]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a66:	4a10      	ldr	r2, [pc, #64]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a72:	4a0d      	ldr	r2, [pc, #52]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a86:	4b08      	ldr	r3, [pc, #32]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8a:	4a07      	ldr	r2, [pc, #28]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a8c:	f043 0301 	orr.w	r3, r3, #1
 8008a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a92:	4b05      	ldr	r3, [pc, #20]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a04      	ldr	r2, [pc, #16]	@ (8008aa8 <HAL_RCC_OscConfig+0x76c>)
 8008a98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9e:	f7fa f8a5 	bl	8002bec <HAL_GetTick>
 8008aa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008aa4:	e011      	b.n	8008aca <HAL_RCC_OscConfig+0x78e>
 8008aa6:	bf00      	nop
 8008aa8:	58024400 	.word	0x58024400
 8008aac:	58024800 	.word	0x58024800
 8008ab0:	fffffc0c 	.word	0xfffffc0c
 8008ab4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab8:	f7fa f898 	bl	8002bec <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d901      	bls.n	8008aca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e08a      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008aca:	4b47      	ldr	r3, [pc, #284]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0f0      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x77c>
 8008ad6:	e082      	b.n	8008bde <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ad8:	4b43      	ldr	r3, [pc, #268]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a42      	ldr	r2, [pc, #264]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae4:	f7fa f882 	bl	8002bec <HAL_GetTick>
 8008ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aec:	f7fa f87e 	bl	8002bec <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e070      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008afe:	4b3a      	ldr	r3, [pc, #232]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1f0      	bne.n	8008aec <HAL_RCC_OscConfig+0x7b0>
 8008b0a:	e068      	b.n	8008bde <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b0c:	4b36      	ldr	r3, [pc, #216]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b12:	4b35      	ldr	r3, [pc, #212]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d031      	beq.n	8008b84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f003 0203 	and.w	r2, r3, #3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d12a      	bne.n	8008b84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	091b      	lsrs	r3, r3, #4
 8008b32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d122      	bne.n	8008b84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d11a      	bne.n	8008b84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	0a5b      	lsrs	r3, r3, #9
 8008b52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d111      	bne.n	8008b84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	0c1b      	lsrs	r3, r3, #16
 8008b64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d108      	bne.n	8008b84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	0e1b      	lsrs	r3, r3, #24
 8008b76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d001      	beq.n	8008b88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e02b      	b.n	8008be0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b88:	4b17      	ldr	r3, [pc, #92]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b8c:	08db      	lsrs	r3, r3, #3
 8008b8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d01f      	beq.n	8008bde <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b9e:	4b12      	ldr	r3, [pc, #72]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	4a11      	ldr	r2, [pc, #68]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008ba4:	f023 0301 	bic.w	r3, r3, #1
 8008ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008baa:	f7fa f81f 	bl	8002bec <HAL_GetTick>
 8008bae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008bb0:	bf00      	nop
 8008bb2:	f7fa f81b 	bl	8002bec <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d0f9      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bec <HAL_RCC_OscConfig+0x8b0>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008bca:	00d2      	lsls	r2, r2, #3
 8008bcc:	4906      	ldr	r1, [pc, #24]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008bd2:	4b05      	ldr	r3, [pc, #20]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd6:	4a04      	ldr	r2, [pc, #16]	@ (8008be8 <HAL_RCC_OscConfig+0x8ac>)
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3730      	adds	r7, #48	@ 0x30
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	58024400 	.word	0x58024400
 8008bec:	ffff0007 	.word	0xffff0007

08008bf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e19c      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c04:	4b8a      	ldr	r3, [pc, #552]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 030f 	and.w	r3, r3, #15
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d910      	bls.n	8008c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c12:	4b87      	ldr	r3, [pc, #540]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f023 020f 	bic.w	r2, r3, #15
 8008c1a:	4985      	ldr	r1, [pc, #532]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c22:	4b83      	ldr	r3, [pc, #524]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d001      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e184      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d010      	beq.n	8008c62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	4b7b      	ldr	r3, [pc, #492]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d908      	bls.n	8008c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c50:	4b78      	ldr	r3, [pc, #480]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	4975      	ldr	r1, [pc, #468]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d010      	beq.n	8008c90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695a      	ldr	r2, [r3, #20]
 8008c72:	4b70      	ldr	r3, [pc, #448]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d908      	bls.n	8008c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	496a      	ldr	r1, [pc, #424]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0310 	and.w	r3, r3, #16
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d010      	beq.n	8008cbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	4b64      	ldr	r3, [pc, #400]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d908      	bls.n	8008cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cac:	4b61      	ldr	r3, [pc, #388]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	495e      	ldr	r1, [pc, #376]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d010      	beq.n	8008cec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	69da      	ldr	r2, [r3, #28]
 8008cce:	4b59      	ldr	r3, [pc, #356]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d908      	bls.n	8008cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cda:	4b56      	ldr	r3, [pc, #344]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	4953      	ldr	r1, [pc, #332]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d010      	beq.n	8008d1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f003 030f 	and.w	r3, r3, #15
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d908      	bls.n	8008d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d08:	4b4a      	ldr	r3, [pc, #296]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f023 020f 	bic.w	r2, r3, #15
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	4947      	ldr	r1, [pc, #284]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d055      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d26:	4b43      	ldr	r3, [pc, #268]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	4940      	ldr	r1, [pc, #256]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d40:	4b3c      	ldr	r3, [pc, #240]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d121      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0f6      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d107      	bne.n	8008d68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d58:	4b36      	ldr	r3, [pc, #216]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d115      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0ea      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d107      	bne.n	8008d80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d70:	4b30      	ldr	r3, [pc, #192]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d109      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e0de      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d80:	4b2c      	ldr	r3, [pc, #176]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0d6      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d90:	4b28      	ldr	r3, [pc, #160]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f023 0207 	bic.w	r2, r3, #7
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4925      	ldr	r1, [pc, #148]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008da2:	f7f9 ff23 	bl	8002bec <HAL_GetTick>
 8008da6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da8:	e00a      	b.n	8008dc0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008daa:	f7f9 ff1f 	bl	8002bec <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e0be      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d1eb      	bne.n	8008daa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d010      	beq.n	8008e00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	4b14      	ldr	r3, [pc, #80]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d208      	bcs.n	8008e00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dee:	4b11      	ldr	r3, [pc, #68]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f023 020f 	bic.w	r2, r3, #15
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	490e      	ldr	r1, [pc, #56]	@ (8008e34 <HAL_RCC_ClockConfig+0x244>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d214      	bcs.n	8008e38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e0e:	4b08      	ldr	r3, [pc, #32]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f023 020f 	bic.w	r2, r3, #15
 8008e16:	4906      	ldr	r1, [pc, #24]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e1e:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <HAL_RCC_ClockConfig+0x240>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 030f 	and.w	r3, r3, #15
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d005      	beq.n	8008e38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e086      	b.n	8008f3e <HAL_RCC_ClockConfig+0x34e>
 8008e30:	52002000 	.word	0x52002000
 8008e34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d010      	beq.n	8008e66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	4b3f      	ldr	r3, [pc, #252]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d208      	bcs.n	8008e66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e54:	4b3c      	ldr	r3, [pc, #240]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	4939      	ldr	r1, [pc, #228]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d010      	beq.n	8008e94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695a      	ldr	r2, [r3, #20]
 8008e76:	4b34      	ldr	r3, [pc, #208]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d208      	bcs.n	8008e94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e82:	4b31      	ldr	r3, [pc, #196]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	492e      	ldr	r1, [pc, #184]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0310 	and.w	r3, r3, #16
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d010      	beq.n	8008ec2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	4b28      	ldr	r3, [pc, #160]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d208      	bcs.n	8008ec2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008eb0:	4b25      	ldr	r3, [pc, #148]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	4922      	ldr	r1, [pc, #136]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d010      	beq.n	8008ef0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69da      	ldr	r2, [r3, #28]
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d208      	bcs.n	8008ef0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ede:	4b1a      	ldr	r3, [pc, #104]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	4917      	ldr	r1, [pc, #92]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ef0:	f000 f89e 	bl	8009030 <HAL_RCC_GetSysClockFreq>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	4b14      	ldr	r3, [pc, #80]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	0a1b      	lsrs	r3, r3, #8
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	4912      	ldr	r1, [pc, #72]	@ (8008f4c <HAL_RCC_ClockConfig+0x35c>)
 8008f02:	5ccb      	ldrb	r3, [r1, r3]
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f48 <HAL_RCC_ClockConfig+0x358>)
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	4a0d      	ldr	r2, [pc, #52]	@ (8008f4c <HAL_RCC_ClockConfig+0x35c>)
 8008f18:	5cd3      	ldrb	r3, [r2, r3]
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	fa22 f303 	lsr.w	r3, r2, r3
 8008f24:	4a0a      	ldr	r2, [pc, #40]	@ (8008f50 <HAL_RCC_ClockConfig+0x360>)
 8008f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f28:	4a0a      	ldr	r2, [pc, #40]	@ (8008f54 <HAL_RCC_ClockConfig+0x364>)
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f58 <HAL_RCC_ClockConfig+0x368>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7f8 fbf2 	bl	800171c <HAL_InitTick>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	58024400 	.word	0x58024400
 8008f4c:	080171ac 	.word	0x080171ac
 8008f50:	24000004 	.word	0x24000004
 8008f54:	24000000 	.word	0x24000000
 8008f58:	2400000c 	.word	0x2400000c

08008f5c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08c      	sub	sp, #48	@ 0x30
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d12a      	bne.n	8008fc4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8008f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f74:	4a2b      	ldr	r2, [pc, #172]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008f7e:	4b29      	ldr	r3, [pc, #164]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8008f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008f8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f92:	2302      	movs	r3, #2
 8008f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f96:	2303      	movs	r3, #3
 8008f98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008fa2:	f107 031c 	add.w	r3, r7, #28
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	481f      	ldr	r0, [pc, #124]	@ (8009028 <HAL_RCC_MCOConfig+0xcc>)
 8008faa:	f7fd fd2b 	bl	8006a04 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008fae:	4b1d      	ldr	r3, [pc, #116]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	430b      	orrs	r3, r1
 8008fbc:	4919      	ldr	r1, [pc, #100]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008fc2:	e02a      	b.n	800901a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008fc4:	4b17      	ldr	r3, [pc, #92]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8008fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fca:	4a16      	ldr	r2, [pc, #88]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8008fcc:	f043 0304 	orr.w	r3, r3, #4
 8008fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008fd4:	4b13      	ldr	r3, [pc, #76]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8008fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fda:	f003 0304 	and.w	r3, r3, #4
 8008fde:	617b      	str	r3, [r7, #20]
 8008fe0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fe8:	2302      	movs	r3, #2
 8008fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fec:	2303      	movs	r3, #3
 8008fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008ff8:	f107 031c 	add.w	r3, r7, #28
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	480b      	ldr	r0, [pc, #44]	@ (800902c <HAL_RCC_MCOConfig+0xd0>)
 8009000:	f7fd fd00 	bl	8006a04 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009004:	4b07      	ldr	r3, [pc, #28]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	01d9      	lsls	r1, r3, #7
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	430b      	orrs	r3, r1
 8009014:	4903      	ldr	r1, [pc, #12]	@ (8009024 <HAL_RCC_MCOConfig+0xc8>)
 8009016:	4313      	orrs	r3, r2
 8009018:	610b      	str	r3, [r1, #16]
}
 800901a:	bf00      	nop
 800901c:	3730      	adds	r7, #48	@ 0x30
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	58024400 	.word	0x58024400
 8009028:	58020000 	.word	0x58020000
 800902c:	58020800 	.word	0x58020800

08009030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009030:	b480      	push	{r7}
 8009032:	b089      	sub	sp, #36	@ 0x24
 8009034:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009036:	4bb3      	ldr	r3, [pc, #716]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800903e:	2b18      	cmp	r3, #24
 8009040:	f200 8155 	bhi.w	80092ee <HAL_RCC_GetSysClockFreq+0x2be>
 8009044:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904a:	bf00      	nop
 800904c:	080090b1 	.word	0x080090b1
 8009050:	080092ef 	.word	0x080092ef
 8009054:	080092ef 	.word	0x080092ef
 8009058:	080092ef 	.word	0x080092ef
 800905c:	080092ef 	.word	0x080092ef
 8009060:	080092ef 	.word	0x080092ef
 8009064:	080092ef 	.word	0x080092ef
 8009068:	080092ef 	.word	0x080092ef
 800906c:	080090d7 	.word	0x080090d7
 8009070:	080092ef 	.word	0x080092ef
 8009074:	080092ef 	.word	0x080092ef
 8009078:	080092ef 	.word	0x080092ef
 800907c:	080092ef 	.word	0x080092ef
 8009080:	080092ef 	.word	0x080092ef
 8009084:	080092ef 	.word	0x080092ef
 8009088:	080092ef 	.word	0x080092ef
 800908c:	080090dd 	.word	0x080090dd
 8009090:	080092ef 	.word	0x080092ef
 8009094:	080092ef 	.word	0x080092ef
 8009098:	080092ef 	.word	0x080092ef
 800909c:	080092ef 	.word	0x080092ef
 80090a0:	080092ef 	.word	0x080092ef
 80090a4:	080092ef 	.word	0x080092ef
 80090a8:	080092ef 	.word	0x080092ef
 80090ac:	080090e3 	.word	0x080090e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090b0:	4b94      	ldr	r3, [pc, #592]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d009      	beq.n	80090d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090bc:	4b91      	ldr	r3, [pc, #580]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	08db      	lsrs	r3, r3, #3
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	4a90      	ldr	r2, [pc, #576]	@ (8009308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
 80090cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80090ce:	e111      	b.n	80092f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80090d0:	4b8d      	ldr	r3, [pc, #564]	@ (8009308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090d2:	61bb      	str	r3, [r7, #24]
      break;
 80090d4:	e10e      	b.n	80092f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80090d6:	4b8d      	ldr	r3, [pc, #564]	@ (800930c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090d8:	61bb      	str	r3, [r7, #24]
      break;
 80090da:	e10b      	b.n	80092f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80090dc:	4b8c      	ldr	r3, [pc, #560]	@ (8009310 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80090de:	61bb      	str	r3, [r7, #24]
      break;
 80090e0:	e108      	b.n	80092f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090e2:	4b88      	ldr	r3, [pc, #544]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	f003 0303 	and.w	r3, r3, #3
 80090ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80090ec:	4b85      	ldr	r3, [pc, #532]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f0:	091b      	lsrs	r3, r3, #4
 80090f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80090f8:	4b82      	ldr	r3, [pc, #520]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009102:	4b80      	ldr	r3, [pc, #512]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009106:	08db      	lsrs	r3, r3, #3
 8009108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	fb02 f303 	mul.w	r3, r2, r3
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800911a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	f000 80e1 	beq.w	80092e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b02      	cmp	r3, #2
 800912a:	f000 8083 	beq.w	8009234 <HAL_RCC_GetSysClockFreq+0x204>
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b02      	cmp	r3, #2
 8009132:	f200 80a1 	bhi.w	8009278 <HAL_RCC_GetSysClockFreq+0x248>
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <HAL_RCC_GetSysClockFreq+0x114>
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d056      	beq.n	80091f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009142:	e099      	b.n	8009278 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009144:	4b6f      	ldr	r3, [pc, #444]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0320 	and.w	r3, r3, #32
 800914c:	2b00      	cmp	r3, #0
 800914e:	d02d      	beq.n	80091ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009150:	4b6c      	ldr	r3, [pc, #432]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	08db      	lsrs	r3, r3, #3
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	4a6b      	ldr	r2, [pc, #428]	@ (8009308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800915c:	fa22 f303 	lsr.w	r3, r2, r3
 8009160:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	ee07 3a90 	vmov	s15, r3
 8009168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917a:	4b62      	ldr	r3, [pc, #392]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800917c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918a:	ed97 6a02 	vldr	s12, [r7, #8]
 800918e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009314 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800919e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80091aa:	e087      	b.n	80092bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009318 <HAL_RCC_GetSysClockFreq+0x2e8>
 80091ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091be:	4b51      	ldr	r3, [pc, #324]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80091d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009314 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091ee:	e065      	b.n	80092bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	ee07 3a90 	vmov	s15, r3
 80091f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800931c <HAL_RCC_GetSysClockFreq+0x2ec>
 80091fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009202:	4b40      	ldr	r3, [pc, #256]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009212:	ed97 6a02 	vldr	s12, [r7, #8]
 8009216:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009314 <HAL_RCC_GetSysClockFreq+0x2e4>
 800921a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800921e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009232:	e043      	b.n	80092bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009320 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009246:	4b2f      	ldr	r3, [pc, #188]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800924a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009256:	ed97 6a02 	vldr	s12, [r7, #8]
 800925a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009314 <HAL_RCC_GetSysClockFreq+0x2e4>
 800925e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800926a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800926e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009272:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009276:	e021      	b.n	80092bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	ee07 3a90 	vmov	s15, r3
 800927e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009282:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800931c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928a:	4b1e      	ldr	r3, [pc, #120]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800928c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800928e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009292:	ee07 3a90 	vmov	s15, r3
 8009296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929a:	ed97 6a02 	vldr	s12, [r7, #8]
 800929e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009314 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80092bc:	4b11      	ldr	r3, [pc, #68]	@ (8009304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c0:	0a5b      	lsrs	r3, r3, #9
 80092c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092c6:	3301      	adds	r3, #1
 80092c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	ee07 3a90 	vmov	s15, r3
 80092d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80092d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092e0:	ee17 3a90 	vmov	r3, s15
 80092e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80092e6:	e005      	b.n	80092f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61bb      	str	r3, [r7, #24]
      break;
 80092ec:	e002      	b.n	80092f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80092ee:	4b07      	ldr	r3, [pc, #28]	@ (800930c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092f0:	61bb      	str	r3, [r7, #24]
      break;
 80092f2:	bf00      	nop
  }

  return sysclockfreq;
 80092f4:	69bb      	ldr	r3, [r7, #24]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3724      	adds	r7, #36	@ 0x24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	58024400 	.word	0x58024400
 8009308:	03d09000 	.word	0x03d09000
 800930c:	003d0900 	.word	0x003d0900
 8009310:	017d7840 	.word	0x017d7840
 8009314:	46000000 	.word	0x46000000
 8009318:	4c742400 	.word	0x4c742400
 800931c:	4a742400 	.word	0x4a742400
 8009320:	4bbebc20 	.word	0x4bbebc20

08009324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800932a:	f7ff fe81 	bl	8009030 <HAL_RCC_GetSysClockFreq>
 800932e:	4602      	mov	r2, r0
 8009330:	4b10      	ldr	r3, [pc, #64]	@ (8009374 <HAL_RCC_GetHCLKFreq+0x50>)
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	0a1b      	lsrs	r3, r3, #8
 8009336:	f003 030f 	and.w	r3, r3, #15
 800933a:	490f      	ldr	r1, [pc, #60]	@ (8009378 <HAL_RCC_GetHCLKFreq+0x54>)
 800933c:	5ccb      	ldrb	r3, [r1, r3]
 800933e:	f003 031f 	and.w	r3, r3, #31
 8009342:	fa22 f303 	lsr.w	r3, r2, r3
 8009346:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009348:	4b0a      	ldr	r3, [pc, #40]	@ (8009374 <HAL_RCC_GetHCLKFreq+0x50>)
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	4a09      	ldr	r2, [pc, #36]	@ (8009378 <HAL_RCC_GetHCLKFreq+0x54>)
 8009352:	5cd3      	ldrb	r3, [r2, r3]
 8009354:	f003 031f 	and.w	r3, r3, #31
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	fa22 f303 	lsr.w	r3, r2, r3
 800935e:	4a07      	ldr	r2, [pc, #28]	@ (800937c <HAL_RCC_GetHCLKFreq+0x58>)
 8009360:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009362:	4a07      	ldr	r2, [pc, #28]	@ (8009380 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009368:	4b04      	ldr	r3, [pc, #16]	@ (800937c <HAL_RCC_GetHCLKFreq+0x58>)
 800936a:	681b      	ldr	r3, [r3, #0]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	58024400 	.word	0x58024400
 8009378:	080171ac 	.word	0x080171ac
 800937c:	24000004 	.word	0x24000004
 8009380:	24000000 	.word	0x24000000

08009384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009388:	f7ff ffcc 	bl	8009324 <HAL_RCC_GetHCLKFreq>
 800938c:	4602      	mov	r2, r0
 800938e:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	091b      	lsrs	r3, r3, #4
 8009394:	f003 0307 	and.w	r3, r3, #7
 8009398:	4904      	ldr	r1, [pc, #16]	@ (80093ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800939a:	5ccb      	ldrb	r3, [r1, r3]
 800939c:	f003 031f 	and.w	r3, r3, #31
 80093a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	58024400 	.word	0x58024400
 80093ac:	080171ac 	.word	0x080171ac

080093b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80093b4:	f7ff ffb6 	bl	8009324 <HAL_RCC_GetHCLKFreq>
 80093b8:	4602      	mov	r2, r0
 80093ba:	4b06      	ldr	r3, [pc, #24]	@ (80093d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	f003 0307 	and.w	r3, r3, #7
 80093c4:	4904      	ldr	r1, [pc, #16]	@ (80093d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80093c6:	5ccb      	ldrb	r3, [r1, r3]
 80093c8:	f003 031f 	and.w	r3, r3, #31
 80093cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	58024400 	.word	0x58024400
 80093d8:	080171ac 	.word	0x080171ac

080093dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	223f      	movs	r2, #63	@ 0x3f
 80093ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009458 <HAL_RCC_GetClockConfig+0x7c>)
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f003 0207 	and.w	r2, r3, #7
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80093f8:	4b17      	ldr	r3, [pc, #92]	@ (8009458 <HAL_RCC_GetClockConfig+0x7c>)
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009404:	4b14      	ldr	r3, [pc, #80]	@ (8009458 <HAL_RCC_GetClockConfig+0x7c>)
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	f003 020f 	and.w	r2, r3, #15
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009410:	4b11      	ldr	r3, [pc, #68]	@ (8009458 <HAL_RCC_GetClockConfig+0x7c>)
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800941c:	4b0e      	ldr	r3, [pc, #56]	@ (8009458 <HAL_RCC_GetClockConfig+0x7c>)
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009428:	4b0b      	ldr	r3, [pc, #44]	@ (8009458 <HAL_RCC_GetClockConfig+0x7c>)
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009434:	4b08      	ldr	r3, [pc, #32]	@ (8009458 <HAL_RCC_GetClockConfig+0x7c>)
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009440:	4b06      	ldr	r3, [pc, #24]	@ (800945c <HAL_RCC_GetClockConfig+0x80>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 020f 	and.w	r2, r3, #15
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	601a      	str	r2, [r3, #0]
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	58024400 	.word	0x58024400
 800945c:	52002000 	.word	0x52002000

08009460 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009464:	b0ca      	sub	sp, #296	@ 0x128
 8009466:	af00      	add	r7, sp, #0
 8009468:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800946c:	2300      	movs	r3, #0
 800946e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009472:	2300      	movs	r3, #0
 8009474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009484:	2500      	movs	r5, #0
 8009486:	ea54 0305 	orrs.w	r3, r4, r5
 800948a:	d049      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800948c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009490:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009492:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009496:	d02f      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009498:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800949c:	d828      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800949e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094a2:	d01a      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80094a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094a8:	d822      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80094ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094b2:	d007      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80094b4:	e01c      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b6:	4bb8      	ldr	r3, [pc, #736]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ba:	4ab7      	ldr	r2, [pc, #732]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094c2:	e01a      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c8:	3308      	adds	r3, #8
 80094ca:	2102      	movs	r1, #2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f001 fc8f 	bl	800adf0 <RCCEx_PLL2_Config>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094d8:	e00f      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094de:	3328      	adds	r3, #40	@ 0x28
 80094e0:	2102      	movs	r1, #2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 fd36 	bl	800af54 <RCCEx_PLL3_Config>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094ee:	e004      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094f6:	e000      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80094f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009502:	4ba5      	ldr	r3, [pc, #660]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009506:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800950a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009510:	4aa1      	ldr	r2, [pc, #644]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009512:	430b      	orrs	r3, r1
 8009514:	6513      	str	r3, [r2, #80]	@ 0x50
 8009516:	e003      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800951c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800952c:	f04f 0900 	mov.w	r9, #0
 8009530:	ea58 0309 	orrs.w	r3, r8, r9
 8009534:	d047      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800953c:	2b04      	cmp	r3, #4
 800953e:	d82a      	bhi.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009540:	a201      	add	r2, pc, #4	@ (adr r2, 8009548 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009546:	bf00      	nop
 8009548:	0800955d 	.word	0x0800955d
 800954c:	0800956b 	.word	0x0800956b
 8009550:	08009581 	.word	0x08009581
 8009554:	0800959f 	.word	0x0800959f
 8009558:	0800959f 	.word	0x0800959f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800955c:	4b8e      	ldr	r3, [pc, #568]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	4a8d      	ldr	r2, [pc, #564]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009568:	e01a      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956e:	3308      	adds	r3, #8
 8009570:	2100      	movs	r1, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f001 fc3c 	bl	800adf0 <RCCEx_PLL2_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800957e:	e00f      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009584:	3328      	adds	r3, #40	@ 0x28
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f001 fce3 	bl	800af54 <RCCEx_PLL3_Config>
 800958e:	4603      	mov	r3, r0
 8009590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009594:	e004      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800959c:	e000      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800959e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10a      	bne.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095a8:	4b7b      	ldr	r3, [pc, #492]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ac:	f023 0107 	bic.w	r1, r3, #7
 80095b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095b6:	4a78      	ldr	r2, [pc, #480]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095b8:	430b      	orrs	r3, r1
 80095ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80095bc:	e003      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80095c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80095d2:	f04f 0b00 	mov.w	fp, #0
 80095d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80095da:	d04c      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80095dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095e6:	d030      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80095e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095ec:	d829      	bhi.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80095ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80095f0:	d02d      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80095f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80095f4:	d825      	bhi.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80095f6:	2b80      	cmp	r3, #128	@ 0x80
 80095f8:	d018      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80095fa:	2b80      	cmp	r3, #128	@ 0x80
 80095fc:	d821      	bhi.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009602:	2b40      	cmp	r3, #64	@ 0x40
 8009604:	d007      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009606:	e01c      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009608:	4b63      	ldr	r3, [pc, #396]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800960a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960c:	4a62      	ldr	r2, [pc, #392]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800960e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009614:	e01c      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961a:	3308      	adds	r3, #8
 800961c:	2100      	movs	r1, #0
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fbe6 	bl	800adf0 <RCCEx_PLL2_Config>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800962a:	e011      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800962c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009630:	3328      	adds	r3, #40	@ 0x28
 8009632:	2100      	movs	r1, #0
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fc8d 	bl	800af54 <RCCEx_PLL3_Config>
 800963a:	4603      	mov	r3, r0
 800963c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009640:	e006      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009648:	e002      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800964a:	bf00      	nop
 800964c:	e000      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800964e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009658:	4b4f      	ldr	r3, [pc, #316]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800965a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800965c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009666:	4a4c      	ldr	r2, [pc, #304]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009668:	430b      	orrs	r3, r1
 800966a:	6513      	str	r3, [r2, #80]	@ 0x50
 800966c:	e003      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009682:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009686:	2300      	movs	r3, #0
 8009688:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800968c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009690:	460b      	mov	r3, r1
 8009692:	4313      	orrs	r3, r2
 8009694:	d053      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800969e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80096a2:	d035      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80096a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80096a8:	d82e      	bhi.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80096aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80096ae:	d031      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80096b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80096b4:	d828      	bhi.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80096b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096ba:	d01a      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80096bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096c0:	d822      	bhi.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80096c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096ca:	d007      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80096cc:	e01c      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ce:	4b32      	ldr	r3, [pc, #200]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	4a31      	ldr	r2, [pc, #196]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096da:	e01c      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e0:	3308      	adds	r3, #8
 80096e2:	2100      	movs	r1, #0
 80096e4:	4618      	mov	r0, r3
 80096e6:	f001 fb83 	bl	800adf0 <RCCEx_PLL2_Config>
 80096ea:	4603      	mov	r3, r0
 80096ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80096f0:	e011      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f6:	3328      	adds	r3, #40	@ 0x28
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 fc2a 	bl	800af54 <RCCEx_PLL3_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009706:	e006      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800970e:	e002      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009710:	bf00      	nop
 8009712:	e000      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10b      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800971e:	4b1e      	ldr	r3, [pc, #120]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009722:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800972e:	4a1a      	ldr	r2, [pc, #104]	@ (8009798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009730:	430b      	orrs	r3, r1
 8009732:	6593      	str	r3, [r2, #88]	@ 0x58
 8009734:	e003      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800973a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800973e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800974a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800974e:	2300      	movs	r3, #0
 8009750:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009754:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009758:	460b      	mov	r3, r1
 800975a:	4313      	orrs	r3, r2
 800975c:	d056      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800975e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009762:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009766:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800976a:	d038      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800976c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009770:	d831      	bhi.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009772:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009776:	d034      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009778:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800977c:	d82b      	bhi.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800977e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009782:	d01d      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009784:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009788:	d825      	bhi.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d006      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800978e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009792:	d00a      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009794:	e01f      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009796:	bf00      	nop
 8009798:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800979c:	4ba2      	ldr	r3, [pc, #648]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800979e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a0:	4aa1      	ldr	r2, [pc, #644]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097a8:	e01c      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ae:	3308      	adds	r3, #8
 80097b0:	2100      	movs	r1, #0
 80097b2:	4618      	mov	r0, r3
 80097b4:	f001 fb1c 	bl	800adf0 <RCCEx_PLL2_Config>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80097be:	e011      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c4:	3328      	adds	r3, #40	@ 0x28
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f001 fbc3 	bl	800af54 <RCCEx_PLL3_Config>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097d4:	e006      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097dc:	e002      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80097de:	bf00      	nop
 80097e0:	e000      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80097e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10b      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80097ec:	4b8e      	ldr	r3, [pc, #568]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80097fc:	4a8a      	ldr	r2, [pc, #552]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097fe:	430b      	orrs	r3, r1
 8009800:	6593      	str	r3, [r2, #88]	@ 0x58
 8009802:	e003      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800980c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800981c:	2300      	movs	r3, #0
 800981e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009822:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009826:	460b      	mov	r3, r1
 8009828:	4313      	orrs	r3, r2
 800982a:	d03a      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800982c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009832:	2b30      	cmp	r3, #48	@ 0x30
 8009834:	d01f      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009836:	2b30      	cmp	r3, #48	@ 0x30
 8009838:	d819      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800983a:	2b20      	cmp	r3, #32
 800983c:	d00c      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800983e:	2b20      	cmp	r3, #32
 8009840:	d815      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d019      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009846:	2b10      	cmp	r3, #16
 8009848:	d111      	bne.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800984a:	4b77      	ldr	r3, [pc, #476]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800984c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984e:	4a76      	ldr	r2, [pc, #472]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009854:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009856:	e011      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800985c:	3308      	adds	r3, #8
 800985e:	2102      	movs	r1, #2
 8009860:	4618      	mov	r0, r3
 8009862:	f001 fac5 	bl	800adf0 <RCCEx_PLL2_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800986c:	e006      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009874:	e002      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009876:	bf00      	nop
 8009878:	e000      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800987a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800987c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009884:	4b68      	ldr	r3, [pc, #416]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009888:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800988c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009892:	4a65      	ldr	r2, [pc, #404]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009894:	430b      	orrs	r3, r1
 8009896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009898:	e003      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800989e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80098a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80098ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80098b2:	2300      	movs	r3, #0
 80098b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80098b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80098bc:	460b      	mov	r3, r1
 80098be:	4313      	orrs	r3, r2
 80098c0:	d051      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098cc:	d035      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80098ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098d2:	d82e      	bhi.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80098d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098d8:	d031      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80098da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098de:	d828      	bhi.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80098e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098e4:	d01a      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80098e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ea:	d822      	bhi.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d003      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80098f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f4:	d007      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80098f6:	e01c      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098f8:	4b4b      	ldr	r3, [pc, #300]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fc:	4a4a      	ldr	r2, [pc, #296]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009904:	e01c      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990a:	3308      	adds	r3, #8
 800990c:	2100      	movs	r1, #0
 800990e:	4618      	mov	r0, r3
 8009910:	f001 fa6e 	bl	800adf0 <RCCEx_PLL2_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800991a:	e011      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800991c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009920:	3328      	adds	r3, #40	@ 0x28
 8009922:	2100      	movs	r1, #0
 8009924:	4618      	mov	r0, r3
 8009926:	f001 fb15 	bl	800af54 <RCCEx_PLL3_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009930:	e006      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009938:	e002      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800993a:	bf00      	nop
 800993c:	e000      	b.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800993e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10a      	bne.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009948:	4b37      	ldr	r3, [pc, #220]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800994a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800994c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009956:	4a34      	ldr	r2, [pc, #208]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009958:	430b      	orrs	r3, r1
 800995a:	6513      	str	r3, [r2, #80]	@ 0x50
 800995c:	e003      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009972:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009976:	2300      	movs	r3, #0
 8009978:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800997c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009980:	460b      	mov	r3, r1
 8009982:	4313      	orrs	r3, r2
 8009984:	d056      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800998c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009990:	d033      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009992:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009996:	d82c      	bhi.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009998:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800999c:	d02f      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800999e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80099a2:	d826      	bhi.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80099a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099a8:	d02b      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80099aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099ae:	d820      	bhi.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80099b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099b4:	d012      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80099b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099ba:	d81a      	bhi.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d022      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80099c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099c4:	d115      	bne.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ca:	3308      	adds	r3, #8
 80099cc:	2101      	movs	r1, #1
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 fa0e 	bl	800adf0 <RCCEx_PLL2_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80099da:	e015      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e0:	3328      	adds	r3, #40	@ 0x28
 80099e2:	2101      	movs	r1, #1
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 fab5 	bl	800af54 <RCCEx_PLL3_Config>
 80099ea:	4603      	mov	r3, r0
 80099ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80099f0:	e00a      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099f8:	e006      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80099fa:	bf00      	nop
 80099fc:	e004      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80099fe:	bf00      	nop
 8009a00:	e002      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009a02:	bf00      	nop
 8009a04:	e000      	b.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10d      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009a10:	4b05      	ldr	r3, [pc, #20]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a1e:	4a02      	ldr	r2, [pc, #8]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a20:	430b      	orrs	r3, r1
 8009a22:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a24:	e006      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009a26:	bf00      	nop
 8009a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009a40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4313      	orrs	r3, r2
 8009a52:	d055      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a60:	d033      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a66:	d82c      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6c:	d02f      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a72:	d826      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009a74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a78:	d02b      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009a7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a7e:	d820      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a84:	d012      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a8a:	d81a      	bhi.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d022      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a94:	d115      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f001 f9a6 	bl	800adf0 <RCCEx_PLL2_Config>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009aaa:	e015      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab0:	3328      	adds	r3, #40	@ 0x28
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 fa4d 	bl	800af54 <RCCEx_PLL3_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009ac0:	e00a      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ac8:	e006      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009aca:	bf00      	nop
 8009acc:	e004      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ace:	bf00      	nop
 8009ad0:	e002      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ad2:	bf00      	nop
 8009ad4:	e000      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10b      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ae0:	4ba3      	ldr	r3, [pc, #652]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ae4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009af0:	4a9f      	ldr	r2, [pc, #636]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009af2:	430b      	orrs	r3, r1
 8009af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009af6:	e003      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b10:	2300      	movs	r3, #0
 8009b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	d037      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b2a:	d00e      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b30:	d816      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d018      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b3a:	d111      	bne.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b40:	4a8b      	ldr	r2, [pc, #556]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009b48:	e00f      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b4e:	3308      	adds	r3, #8
 8009b50:	2101      	movs	r1, #1
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 f94c 	bl	800adf0 <RCCEx_PLL2_Config>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009b5e:	e004      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b66:	e000      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10a      	bne.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b72:	4b7f      	ldr	r3, [pc, #508]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b76:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b80:	4a7b      	ldr	r2, [pc, #492]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b82:	430b      	orrs	r3, r1
 8009b84:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b86:	e003      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009ba6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4313      	orrs	r3, r2
 8009bae:	d039      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d81c      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009bba:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009bfd 	.word	0x08009bfd
 8009bc4:	08009bd1 	.word	0x08009bd1
 8009bc8:	08009bdf 	.word	0x08009bdf
 8009bcc:	08009bfd 	.word	0x08009bfd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd0:	4b67      	ldr	r3, [pc, #412]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd4:	4a66      	ldr	r2, [pc, #408]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009bdc:	e00f      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be2:	3308      	adds	r3, #8
 8009be4:	2102      	movs	r1, #2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 f902 	bl	800adf0 <RCCEx_PLL2_Config>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009bf2:	e004      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bfa:	e000      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10a      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009c06:	4b5a      	ldr	r3, [pc, #360]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c0a:	f023 0103 	bic.w	r1, r3, #3
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c14:	4a56      	ldr	r2, [pc, #344]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c16:	430b      	orrs	r3, r1
 8009c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c1a:	e003      	b.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009c30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c34:	2300      	movs	r3, #0
 8009c36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4313      	orrs	r3, r2
 8009c42:	f000 809f 	beq.w	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c46:	4b4b      	ldr	r3, [pc, #300]	@ (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a4a      	ldr	r2, [pc, #296]	@ (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c52:	f7f8 ffcb 	bl	8002bec <HAL_GetTick>
 8009c56:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c5a:	e00b      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c5c:	f7f8 ffc6 	bl	8002bec <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b64      	cmp	r3, #100	@ 0x64
 8009c6a:	d903      	bls.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c72:	e005      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c74:	4b3f      	ldr	r3, [pc, #252]	@ (8009d74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0ed      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d179      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c88:	4b39      	ldr	r3, [pc, #228]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c94:	4053      	eors	r3, r2
 8009c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d015      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c9e:	4b34      	ldr	r3, [pc, #208]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ca6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009caa:	4b31      	ldr	r3, [pc, #196]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cae:	4a30      	ldr	r2, [pc, #192]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cb4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cba:	4a2d      	ldr	r2, [pc, #180]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cc0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009cc8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cd6:	d118      	bne.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cd8:	f7f8 ff88 	bl	8002bec <HAL_GetTick>
 8009cdc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ce0:	e00d      	b.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ce2:	f7f8 ff83 	bl	8002bec <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009cec:	1ad2      	subs	r2, r2, r3
 8009cee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d903      	bls.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009cfc:	e005      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d02:	f003 0302 	and.w	r3, r3, #2
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0eb      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d129      	bne.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d22:	d10e      	bne.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009d24:	4b12      	ldr	r3, [pc, #72]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d34:	091a      	lsrs	r2, r3, #4
 8009d36:	4b10      	ldr	r3, [pc, #64]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009d38:	4013      	ands	r3, r2
 8009d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	6113      	str	r3, [r2, #16]
 8009d40:	e005      	b.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009d42:	4b0b      	ldr	r3, [pc, #44]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	4a0a      	ldr	r2, [pc, #40]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009d4c:	6113      	str	r3, [r2, #16]
 8009d4e:	4b08      	ldr	r3, [pc, #32]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d5e:	4a04      	ldr	r2, [pc, #16]	@ (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d60:	430b      	orrs	r3, r1
 8009d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d64:	e00e      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009d6e:	e009      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009d70:	58024400 	.word	0x58024400
 8009d74:	58024800 	.word	0x58024800
 8009d78:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f002 0301 	and.w	r3, r2, #1
 8009d90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d94:	2300      	movs	r3, #0
 8009d96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	f000 8089 	beq.w	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009daa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009dac:	2b28      	cmp	r3, #40	@ 0x28
 8009dae:	d86b      	bhi.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009db0:	a201      	add	r2, pc, #4	@ (adr r2, 8009db8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db6:	bf00      	nop
 8009db8:	08009e91 	.word	0x08009e91
 8009dbc:	08009e89 	.word	0x08009e89
 8009dc0:	08009e89 	.word	0x08009e89
 8009dc4:	08009e89 	.word	0x08009e89
 8009dc8:	08009e89 	.word	0x08009e89
 8009dcc:	08009e89 	.word	0x08009e89
 8009dd0:	08009e89 	.word	0x08009e89
 8009dd4:	08009e89 	.word	0x08009e89
 8009dd8:	08009e5d 	.word	0x08009e5d
 8009ddc:	08009e89 	.word	0x08009e89
 8009de0:	08009e89 	.word	0x08009e89
 8009de4:	08009e89 	.word	0x08009e89
 8009de8:	08009e89 	.word	0x08009e89
 8009dec:	08009e89 	.word	0x08009e89
 8009df0:	08009e89 	.word	0x08009e89
 8009df4:	08009e89 	.word	0x08009e89
 8009df8:	08009e73 	.word	0x08009e73
 8009dfc:	08009e89 	.word	0x08009e89
 8009e00:	08009e89 	.word	0x08009e89
 8009e04:	08009e89 	.word	0x08009e89
 8009e08:	08009e89 	.word	0x08009e89
 8009e0c:	08009e89 	.word	0x08009e89
 8009e10:	08009e89 	.word	0x08009e89
 8009e14:	08009e89 	.word	0x08009e89
 8009e18:	08009e91 	.word	0x08009e91
 8009e1c:	08009e89 	.word	0x08009e89
 8009e20:	08009e89 	.word	0x08009e89
 8009e24:	08009e89 	.word	0x08009e89
 8009e28:	08009e89 	.word	0x08009e89
 8009e2c:	08009e89 	.word	0x08009e89
 8009e30:	08009e89 	.word	0x08009e89
 8009e34:	08009e89 	.word	0x08009e89
 8009e38:	08009e91 	.word	0x08009e91
 8009e3c:	08009e89 	.word	0x08009e89
 8009e40:	08009e89 	.word	0x08009e89
 8009e44:	08009e89 	.word	0x08009e89
 8009e48:	08009e89 	.word	0x08009e89
 8009e4c:	08009e89 	.word	0x08009e89
 8009e50:	08009e89 	.word	0x08009e89
 8009e54:	08009e89 	.word	0x08009e89
 8009e58:	08009e91 	.word	0x08009e91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e60:	3308      	adds	r3, #8
 8009e62:	2101      	movs	r1, #1
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 ffc3 	bl	800adf0 <RCCEx_PLL2_Config>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e70:	e00f      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e76:	3328      	adds	r3, #40	@ 0x28
 8009e78:	2101      	movs	r1, #1
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f001 f86a 	bl	800af54 <RCCEx_PLL3_Config>
 8009e80:	4603      	mov	r3, r0
 8009e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e86:	e004      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e8e:	e000      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10a      	bne.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e9a:	4bbf      	ldr	r3, [pc, #764]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ea8:	4abb      	ldr	r2, [pc, #748]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009eaa:	430b      	orrs	r3, r1
 8009eac:	6553      	str	r3, [r2, #84]	@ 0x54
 8009eae:	e003      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	f002 0302 	and.w	r3, r2, #2
 8009ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009ece:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	d041      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ede:	2b05      	cmp	r3, #5
 8009ee0:	d824      	bhi.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee8:	08009f35 	.word	0x08009f35
 8009eec:	08009f01 	.word	0x08009f01
 8009ef0:	08009f17 	.word	0x08009f17
 8009ef4:	08009f35 	.word	0x08009f35
 8009ef8:	08009f35 	.word	0x08009f35
 8009efc:	08009f35 	.word	0x08009f35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f04:	3308      	adds	r3, #8
 8009f06:	2101      	movs	r1, #1
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 ff71 	bl	800adf0 <RCCEx_PLL2_Config>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009f14:	e00f      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f1a:	3328      	adds	r3, #40	@ 0x28
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 f818 	bl	800af54 <RCCEx_PLL3_Config>
 8009f24:	4603      	mov	r3, r0
 8009f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009f2a:	e004      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f32:	e000      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f3e:	4b96      	ldr	r3, [pc, #600]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f42:	f023 0107 	bic.w	r1, r3, #7
 8009f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f4c:	4a92      	ldr	r2, [pc, #584]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f4e:	430b      	orrs	r3, r1
 8009f50:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f52:	e003      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	f002 0304 	and.w	r3, r2, #4
 8009f68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009f76:	460b      	mov	r3, r1
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	d044      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f84:	2b05      	cmp	r3, #5
 8009f86:	d825      	bhi.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009f88:	a201      	add	r2, pc, #4	@ (adr r2, 8009f90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fdd 	.word	0x08009fdd
 8009f94:	08009fa9 	.word	0x08009fa9
 8009f98:	08009fbf 	.word	0x08009fbf
 8009f9c:	08009fdd 	.word	0x08009fdd
 8009fa0:	08009fdd 	.word	0x08009fdd
 8009fa4:	08009fdd 	.word	0x08009fdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fac:	3308      	adds	r3, #8
 8009fae:	2101      	movs	r1, #1
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 ff1d 	bl	800adf0 <RCCEx_PLL2_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009fbc:	e00f      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc2:	3328      	adds	r3, #40	@ 0x28
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 ffc4 	bl	800af54 <RCCEx_PLL3_Config>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009fd2:	e004      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fda:	e000      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10b      	bne.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fe6:	4b6c      	ldr	r3, [pc, #432]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fea:	f023 0107 	bic.w	r1, r3, #7
 8009fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ff6:	4a68      	ldr	r2, [pc, #416]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ffc:	e003      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a002:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f002 0320 	and.w	r3, r2, #32
 800a012:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a016:	2300      	movs	r3, #0
 800a018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a01c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a020:	460b      	mov	r3, r1
 800a022:	4313      	orrs	r3, r2
 800a024:	d055      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a02e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a032:	d033      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a038:	d82c      	bhi.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a03e:	d02f      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a044:	d826      	bhi.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a04a:	d02b      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a04c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a050:	d820      	bhi.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a056:	d012      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a05c:	d81a      	bhi.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d022      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a066:	d115      	bne.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06c:	3308      	adds	r3, #8
 800a06e:	2100      	movs	r1, #0
 800a070:	4618      	mov	r0, r3
 800a072:	f000 febd 	bl	800adf0 <RCCEx_PLL2_Config>
 800a076:	4603      	mov	r3, r0
 800a078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a07c:	e015      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a082:	3328      	adds	r3, #40	@ 0x28
 800a084:	2102      	movs	r1, #2
 800a086:	4618      	mov	r0, r3
 800a088:	f000 ff64 	bl	800af54 <RCCEx_PLL3_Config>
 800a08c:	4603      	mov	r3, r0
 800a08e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a092:	e00a      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a09a:	e006      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a09c:	bf00      	nop
 800a09e:	e004      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a0a0:	bf00      	nop
 800a0a2:	e002      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a0a4:	bf00      	nop
 800a0a6:	e000      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a0a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10b      	bne.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a0b2:	4b39      	ldr	r3, [pc, #228]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0c2:	4a35      	ldr	r2, [pc, #212]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	6553      	str	r3, [r2, #84]	@ 0x54
 800a0c8:	e003      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a0de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a0e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	d058      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a0fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a0fe:	d033      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a100:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a104:	d82c      	bhi.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a10a:	d02f      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a10c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a110:	d826      	bhi.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a112:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a116:	d02b      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a118:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a11c:	d820      	bhi.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a11e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a122:	d012      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a128:	d81a      	bhi.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d022      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a12e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a132:	d115      	bne.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a138:	3308      	adds	r3, #8
 800a13a:	2100      	movs	r1, #0
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fe57 	bl	800adf0 <RCCEx_PLL2_Config>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a148:	e015      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14e:	3328      	adds	r3, #40	@ 0x28
 800a150:	2102      	movs	r1, #2
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fefe 	bl	800af54 <RCCEx_PLL3_Config>
 800a158:	4603      	mov	r3, r0
 800a15a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a15e:	e00a      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a166:	e006      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a168:	bf00      	nop
 800a16a:	e004      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a16c:	bf00      	nop
 800a16e:	e002      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a170:	bf00      	nop
 800a172:	e000      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a174:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10e      	bne.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a17e:	4b06      	ldr	r3, [pc, #24]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a182:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a18a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a18e:	4a02      	ldr	r2, [pc, #8]	@ (800a198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a190:	430b      	orrs	r3, r1
 800a192:	6593      	str	r3, [r2, #88]	@ 0x58
 800a194:	e006      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a196:	bf00      	nop
 800a198:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a19c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a1b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a1ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	d055      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a1cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a1d0:	d033      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a1d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a1d6:	d82c      	bhi.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a1d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1dc:	d02f      	beq.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a1de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1e2:	d826      	bhi.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a1e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a1e8:	d02b      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a1ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a1ee:	d820      	bhi.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a1f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1f4:	d012      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a1f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1fa:	d81a      	bhi.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d022      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a204:	d115      	bne.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a20a:	3308      	adds	r3, #8
 800a20c:	2100      	movs	r1, #0
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 fdee 	bl	800adf0 <RCCEx_PLL2_Config>
 800a214:	4603      	mov	r3, r0
 800a216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a21a:	e015      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a220:	3328      	adds	r3, #40	@ 0x28
 800a222:	2102      	movs	r1, #2
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fe95 	bl	800af54 <RCCEx_PLL3_Config>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a230:	e00a      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a238:	e006      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a23a:	bf00      	nop
 800a23c:	e004      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a23e:	bf00      	nop
 800a240:	e002      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a242:	bf00      	nop
 800a244:	e000      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a246:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10b      	bne.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a250:	4ba1      	ldr	r3, [pc, #644]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a254:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a260:	4a9d      	ldr	r2, [pc, #628]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a262:	430b      	orrs	r3, r1
 800a264:	6593      	str	r3, [r2, #88]	@ 0x58
 800a266:	e003      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	f002 0308 	and.w	r3, r2, #8
 800a27c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a280:	2300      	movs	r3, #0
 800a282:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a286:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a28a:	460b      	mov	r3, r1
 800a28c:	4313      	orrs	r3, r2
 800a28e:	d01e      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a294:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a29c:	d10c      	bne.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2a2:	3328      	adds	r3, #40	@ 0x28
 800a2a4:	2102      	movs	r1, #2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fe54 	bl	800af54 <RCCEx_PLL3_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a2b8:	4b87      	ldr	r3, [pc, #540]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2c8:	4a83      	ldr	r2, [pc, #524]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2ca:	430b      	orrs	r3, r1
 800a2cc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	f002 0310 	and.w	r3, r2, #16
 800a2da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a2e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	d01e      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2fa:	d10c      	bne.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a300:	3328      	adds	r3, #40	@ 0x28
 800a302:	2102      	movs	r1, #2
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fe25 	bl	800af54 <RCCEx_PLL3_Config>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a316:	4b70      	ldr	r3, [pc, #448]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a31a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a322:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a326:	4a6c      	ldr	r2, [pc, #432]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a328:	430b      	orrs	r3, r1
 800a32a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a338:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a33c:	2300      	movs	r3, #0
 800a33e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a342:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a346:	460b      	mov	r3, r1
 800a348:	4313      	orrs	r3, r2
 800a34a:	d03e      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a358:	d022      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a35a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a35e:	d81b      	bhi.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a368:	d00b      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a36a:	e015      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a370:	3308      	adds	r3, #8
 800a372:	2100      	movs	r1, #0
 800a374:	4618      	mov	r0, r3
 800a376:	f000 fd3b 	bl	800adf0 <RCCEx_PLL2_Config>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a380:	e00f      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a386:	3328      	adds	r3, #40	@ 0x28
 800a388:	2102      	movs	r1, #2
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 fde2 	bl	800af54 <RCCEx_PLL3_Config>
 800a390:	4603      	mov	r3, r0
 800a392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a396:	e004      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a39e:	e000      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10b      	bne.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a3aa:	4b4b      	ldr	r3, [pc, #300]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3ba:	4a47      	ldr	r2, [pc, #284]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3c0:	e003      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a3d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a3d8:	2300      	movs	r3, #0
 800a3da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a3dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	d03b      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a3f2:	d01f      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a3f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a3f8:	d818      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a3fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3fe:	d003      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a400:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a404:	d007      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a406:	e011      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a408:	4b33      	ldr	r3, [pc, #204]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40c:	4a32      	ldr	r2, [pc, #200]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a40e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a414:	e00f      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a41a:	3328      	adds	r3, #40	@ 0x28
 800a41c:	2101      	movs	r1, #1
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 fd98 	bl	800af54 <RCCEx_PLL3_Config>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a42a:	e004      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a432:	e000      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a434:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10b      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a43e:	4b26      	ldr	r3, [pc, #152]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a442:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a44e:	4a22      	ldr	r2, [pc, #136]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a450:	430b      	orrs	r3, r1
 800a452:	6553      	str	r3, [r2, #84]	@ 0x54
 800a454:	e003      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a45a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a46a:	673b      	str	r3, [r7, #112]	@ 0x70
 800a46c:	2300      	movs	r3, #0
 800a46e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a470:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a474:	460b      	mov	r3, r1
 800a476:	4313      	orrs	r3, r2
 800a478:	d034      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a47e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a488:	d007      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a48a:	e011      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a48c:	4b12      	ldr	r3, [pc, #72]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a490:	4a11      	ldr	r2, [pc, #68]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a498:	e00e      	b.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a49e:	3308      	adds	r3, #8
 800a4a0:	2102      	movs	r1, #2
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fca4 	bl	800adf0 <RCCEx_PLL2_Config>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a4ae:	e003      	b.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10d      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a4c0:	4b05      	ldr	r3, [pc, #20]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ce:	4a02      	ldr	r2, [pc, #8]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a4d4:	e006      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a4d6:	bf00      	nop
 800a4d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a4f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a4f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	d00c      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a504:	3328      	adds	r3, #40	@ 0x28
 800a506:	2102      	movs	r1, #2
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 fd23 	bl	800af54 <RCCEx_PLL3_Config>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a526:	663b      	str	r3, [r7, #96]	@ 0x60
 800a528:	2300      	movs	r3, #0
 800a52a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a52c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a530:	460b      	mov	r3, r1
 800a532:	4313      	orrs	r3, r2
 800a534:	d038      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a53e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a542:	d018      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a544:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a548:	d811      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a54a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a54e:	d014      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a554:	d80b      	bhi.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d011      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a55e:	d106      	bne.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a560:	4bc3      	ldr	r3, [pc, #780]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a564:	4ac2      	ldr	r2, [pc, #776]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a56a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a56c:	e008      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a574:	e004      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a576:	bf00      	nop
 800a578:	e002      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a57a:	bf00      	nop
 800a57c:	e000      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a57e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10b      	bne.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a588:	4bb9      	ldr	r3, [pc, #740]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a58a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a58c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a598:	4ab5      	ldr	r2, [pc, #724]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a59a:	430b      	orrs	r3, r1
 800a59c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a59e:	e003      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a5b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	d009      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a5c4:	4baa      	ldr	r3, [pc, #680]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a5c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5d2:	4aa7      	ldr	r2, [pc, #668]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a5e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	d00a      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a5f4:	4b9e      	ldr	r3, [pc, #632]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a604:	4a9a      	ldr	r2, [pc, #616]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a606:	430b      	orrs	r3, r1
 800a608:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a616:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a618:	2300      	movs	r3, #0
 800a61a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a61c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a620:	460b      	mov	r3, r1
 800a622:	4313      	orrs	r3, r2
 800a624:	d009      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a626:	4b92      	ldr	r3, [pc, #584]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a62a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a634:	4a8e      	ldr	r2, [pc, #568]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a636:	430b      	orrs	r3, r1
 800a638:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a646:	643b      	str	r3, [r7, #64]	@ 0x40
 800a648:	2300      	movs	r3, #0
 800a64a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a64c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a650:	460b      	mov	r3, r1
 800a652:	4313      	orrs	r3, r2
 800a654:	d00e      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a656:	4b86      	ldr	r3, [pc, #536]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	4a85      	ldr	r2, [pc, #532]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a65c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a660:	6113      	str	r3, [r2, #16]
 800a662:	4b83      	ldr	r3, [pc, #524]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a664:	6919      	ldr	r1, [r3, #16]
 800a666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a66a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a66e:	4a80      	ldr	r2, [pc, #512]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a670:	430b      	orrs	r3, r1
 800a672:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a680:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a682:	2300      	movs	r3, #0
 800a684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a686:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a68a:	460b      	mov	r3, r1
 800a68c:	4313      	orrs	r3, r2
 800a68e:	d009      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a690:	4b77      	ldr	r3, [pc, #476]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a694:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a69c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a69e:	4a74      	ldr	r2, [pc, #464]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6a0:	430b      	orrs	r3, r1
 800a6a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a6b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	d00a      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a6c0:	4b6b      	ldr	r3, [pc, #428]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6d0:	4a67      	ldr	r2, [pc, #412]	@ (800a870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6d2:	430b      	orrs	r3, r1
 800a6d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	2100      	movs	r1, #0
 800a6e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	d011      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 fb78 	bl	800adf0 <RCCEx_PLL2_Config>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a70e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	2100      	movs	r1, #0
 800a720:	6239      	str	r1, [r7, #32]
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	627b      	str	r3, [r7, #36]	@ 0x24
 800a728:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a72c:	460b      	mov	r3, r1
 800a72e:	4313      	orrs	r3, r2
 800a730:	d011      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a736:	3308      	adds	r3, #8
 800a738:	2101      	movs	r1, #1
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fb58 	bl	800adf0 <RCCEx_PLL2_Config>
 800a740:	4603      	mov	r3, r0
 800a742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	2100      	movs	r1, #0
 800a760:	61b9      	str	r1, [r7, #24]
 800a762:	f003 0304 	and.w	r3, r3, #4
 800a766:	61fb      	str	r3, [r7, #28]
 800a768:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a76c:	460b      	mov	r3, r1
 800a76e:	4313      	orrs	r3, r2
 800a770:	d011      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a776:	3308      	adds	r3, #8
 800a778:	2102      	movs	r1, #2
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 fb38 	bl	800adf0 <RCCEx_PLL2_Config>
 800a780:	4603      	mov	r3, r0
 800a782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	2100      	movs	r1, #0
 800a7a0:	6139      	str	r1, [r7, #16]
 800a7a2:	f003 0308 	and.w	r3, r3, #8
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	d011      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7b6:	3328      	adds	r3, #40	@ 0x28
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fbca 	bl	800af54 <RCCEx_PLL3_Config>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	2100      	movs	r1, #0
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	f003 0310 	and.w	r3, r3, #16
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	d011      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f6:	3328      	adds	r3, #40	@ 0x28
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fbaa 	bl	800af54 <RCCEx_PLL3_Config>
 800a800:	4603      	mov	r3, r0
 800a802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a80e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	2100      	movs	r1, #0
 800a820:	6039      	str	r1, [r7, #0]
 800a822:	f003 0320 	and.w	r3, r3, #32
 800a826:	607b      	str	r3, [r7, #4]
 800a828:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a82c:	460b      	mov	r3, r1
 800a82e:	4313      	orrs	r3, r2
 800a830:	d011      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a836:	3328      	adds	r3, #40	@ 0x28
 800a838:	2102      	movs	r1, #2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fb8a 	bl	800af54 <RCCEx_PLL3_Config>
 800a840:	4603      	mov	r3, r0
 800a842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a856:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	e000      	b.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
}
 800a864:	4618      	mov	r0, r3
 800a866:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a86a:	46bd      	mov	sp, r7
 800a86c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a870:	58024400 	.word	0x58024400

0800a874 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a878:	f7fe fd54 	bl	8009324 <HAL_RCC_GetHCLKFreq>
 800a87c:	4602      	mov	r2, r0
 800a87e:	4b06      	ldr	r3, [pc, #24]	@ (800a898 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	091b      	lsrs	r3, r3, #4
 800a884:	f003 0307 	and.w	r3, r3, #7
 800a888:	4904      	ldr	r1, [pc, #16]	@ (800a89c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a88a:	5ccb      	ldrb	r3, [r1, r3]
 800a88c:	f003 031f 	and.w	r3, r3, #31
 800a890:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a894:	4618      	mov	r0, r3
 800a896:	bd80      	pop	{r7, pc}
 800a898:	58024400 	.word	0x58024400
 800a89c:	080171ac 	.word	0x080171ac

0800a8a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b089      	sub	sp, #36	@ 0x24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8a8:	4ba1      	ldr	r3, [pc, #644]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ac:	f003 0303 	and.w	r3, r3, #3
 800a8b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a8b2:	4b9f      	ldr	r3, [pc, #636]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b6:	0b1b      	lsrs	r3, r3, #12
 800a8b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a8be:	4b9c      	ldr	r3, [pc, #624]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c2:	091b      	lsrs	r3, r3, #4
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8ca:	4b99      	ldr	r3, [pc, #612]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ce:	08db      	lsrs	r3, r3, #3
 800a8d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	fb02 f303 	mul.w	r3, r2, r3
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 8111 	beq.w	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	f000 8083 	beq.w	800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	f200 80a1 	bhi.w	800aa40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d003      	beq.n	800a90c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d056      	beq.n	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a90a:	e099      	b.n	800aa40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a90c:	4b88      	ldr	r3, [pc, #544]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0320 	and.w	r3, r3, #32
 800a914:	2b00      	cmp	r3, #0
 800a916:	d02d      	beq.n	800a974 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a918:	4b85      	ldr	r3, [pc, #532]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	08db      	lsrs	r3, r3, #3
 800a91e:	f003 0303 	and.w	r3, r3, #3
 800a922:	4a84      	ldr	r2, [pc, #528]	@ (800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a924:	fa22 f303 	lsr.w	r3, r2, r3
 800a928:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	ee07 3a90 	vmov	s15, r3
 800a930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	ee07 3a90 	vmov	s15, r3
 800a93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a942:	4b7b      	ldr	r3, [pc, #492]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a94a:	ee07 3a90 	vmov	s15, r3
 800a94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a952:	ed97 6a03 	vldr	s12, [r7, #12]
 800a956:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a96e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a972:	e087      	b.n	800aa84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a986:	4b6a      	ldr	r3, [pc, #424]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a98e:	ee07 3a90 	vmov	s15, r3
 800a992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a996:	ed97 6a03 	vldr	s12, [r7, #12]
 800a99a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9b6:	e065      	b.n	800aa84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	ee07 3a90 	vmov	s15, r3
 800a9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ca:	4b59      	ldr	r3, [pc, #356]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9fa:	e043      	b.n	800aa84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	ee07 3a90 	vmov	s15, r3
 800aa02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa0e:	4b48      	ldr	r3, [pc, #288]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa16:	ee07 3a90 	vmov	s15, r3
 800aa1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa3e:	e021      	b.n	800aa84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa52:	4b37      	ldr	r3, [pc, #220]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa62:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa84:	4b2a      	ldr	r3, [pc, #168]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa88:	0a5b      	lsrs	r3, r3, #9
 800aa8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaaa:	ee17 2a90 	vmov	r2, s15
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aab2:	4b1f      	ldr	r3, [pc, #124]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab6:	0c1b      	lsrs	r3, r3, #16
 800aab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aabc:	ee07 3a90 	vmov	s15, r3
 800aac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aacc:	edd7 6a07 	vldr	s13, [r7, #28]
 800aad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad8:	ee17 2a90 	vmov	r2, s15
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aae0:	4b13      	ldr	r3, [pc, #76]	@ (800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae4:	0e1b      	lsrs	r3, r3, #24
 800aae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aafa:	edd7 6a07 	vldr	s13, [r7, #28]
 800aafe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab06:	ee17 2a90 	vmov	r2, s15
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab0e:	e008      	b.n	800ab22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	609a      	str	r2, [r3, #8]
}
 800ab22:	bf00      	nop
 800ab24:	3724      	adds	r7, #36	@ 0x24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	58024400 	.word	0x58024400
 800ab34:	03d09000 	.word	0x03d09000
 800ab38:	46000000 	.word	0x46000000
 800ab3c:	4c742400 	.word	0x4c742400
 800ab40:	4a742400 	.word	0x4a742400
 800ab44:	4bbebc20 	.word	0x4bbebc20

0800ab48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b089      	sub	sp, #36	@ 0x24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab50:	4ba1      	ldr	r3, [pc, #644]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab54:	f003 0303 	and.w	r3, r3, #3
 800ab58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ab5a:	4b9f      	ldr	r3, [pc, #636]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5e:	0d1b      	lsrs	r3, r3, #20
 800ab60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab66:	4b9c      	ldr	r3, [pc, #624]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6a:	0a1b      	lsrs	r3, r3, #8
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ab72:	4b99      	ldr	r3, [pc, #612]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab76:	08db      	lsrs	r3, r3, #3
 800ab78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 8111 	beq.w	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	f000 8083 	beq.w	800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	f200 80a1 	bhi.w	800ace8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d056      	beq.n	800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800abb2:	e099      	b.n	800ace8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abb4:	4b88      	ldr	r3, [pc, #544]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0320 	and.w	r3, r3, #32
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d02d      	beq.n	800ac1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc0:	4b85      	ldr	r3, [pc, #532]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	4a84      	ldr	r2, [pc, #528]	@ (800addc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
 800abd0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	ee07 3a90 	vmov	s15, r3
 800abd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abea:	4b7b      	ldr	r3, [pc, #492]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800abfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac1a:	e087      	b.n	800ad2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2e:	4b6a      	ldr	r3, [pc, #424]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac5e:	e065      	b.n	800ad2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac72:	4b59      	ldr	r3, [pc, #356]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aca2:	e043      	b.n	800ad2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800adec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800acb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb6:	4b48      	ldr	r3, [pc, #288]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ace6:	e021      	b.n	800ad2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfa:	4b37      	ldr	r3, [pc, #220]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad2c:	4b2a      	ldr	r3, [pc, #168]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad30:	0a5b      	lsrs	r3, r3, #9
 800ad32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad52:	ee17 2a90 	vmov	r2, s15
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ad5a:	4b1f      	ldr	r3, [pc, #124]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad64:	ee07 3a90 	vmov	s15, r3
 800ad68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad80:	ee17 2a90 	vmov	r2, s15
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad88:	4b13      	ldr	r3, [pc, #76]	@ (800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8c:	0e1b      	lsrs	r3, r3, #24
 800ad8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ada2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ada6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adae:	ee17 2a90 	vmov	r2, s15
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800adb6:	e008      	b.n	800adca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	609a      	str	r2, [r3, #8]
}
 800adca:	bf00      	nop
 800adcc:	3724      	adds	r7, #36	@ 0x24
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	58024400 	.word	0x58024400
 800addc:	03d09000 	.word	0x03d09000
 800ade0:	46000000 	.word	0x46000000
 800ade4:	4c742400 	.word	0x4c742400
 800ade8:	4a742400 	.word	0x4a742400
 800adec:	4bbebc20 	.word	0x4bbebc20

0800adf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adfe:	4b53      	ldr	r3, [pc, #332]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae02:	f003 0303 	and.w	r3, r3, #3
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d101      	bne.n	800ae0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e099      	b.n	800af42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae0e:	4b4f      	ldr	r3, [pc, #316]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a4e      	ldr	r2, [pc, #312]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae1a:	f7f7 fee7 	bl	8002bec <HAL_GetTick>
 800ae1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae20:	e008      	b.n	800ae34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae22:	f7f7 fee3 	bl	8002bec <HAL_GetTick>
 800ae26:	4602      	mov	r2, r0
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d901      	bls.n	800ae34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae30:	2303      	movs	r3, #3
 800ae32:	e086      	b.n	800af42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae34:	4b45      	ldr	r3, [pc, #276]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1f0      	bne.n	800ae22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae40:	4b42      	ldr	r3, [pc, #264]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	031b      	lsls	r3, r3, #12
 800ae4e:	493f      	ldr	r1, [pc, #252]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae50:	4313      	orrs	r3, r2
 800ae52:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	025b      	lsls	r3, r3, #9
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	041b      	lsls	r3, r3, #16
 800ae72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae76:	431a      	orrs	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	061b      	lsls	r3, r3, #24
 800ae80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae84:	4931      	ldr	r1, [pc, #196]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ae8a:	4b30      	ldr	r3, [pc, #192]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	492d      	ldr	r1, [pc, #180]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ae9c:	4b2b      	ldr	r3, [pc, #172]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800ae9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea0:	f023 0220 	bic.w	r2, r3, #32
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	4928      	ldr	r1, [pc, #160]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aeae:	4b27      	ldr	r3, [pc, #156]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aeb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb2:	4a26      	ldr	r2, [pc, #152]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aeb4:	f023 0310 	bic.w	r3, r3, #16
 800aeb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aeba:	4b24      	ldr	r3, [pc, #144]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aebe:	4b24      	ldr	r3, [pc, #144]	@ (800af50 <RCCEx_PLL2_Config+0x160>)
 800aec0:	4013      	ands	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	69d2      	ldr	r2, [r2, #28]
 800aec6:	00d2      	lsls	r2, r2, #3
 800aec8:	4920      	ldr	r1, [pc, #128]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aece:	4b1f      	ldr	r3, [pc, #124]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed2:	4a1e      	ldr	r2, [pc, #120]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aed4:	f043 0310 	orr.w	r3, r3, #16
 800aed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d106      	bne.n	800aeee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aee0:	4b1a      	ldr	r3, [pc, #104]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee4:	4a19      	ldr	r2, [pc, #100]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aee6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aeea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aeec:	e00f      	b.n	800af0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d106      	bne.n	800af02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aef4:	4b15      	ldr	r3, [pc, #84]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef8:	4a14      	ldr	r2, [pc, #80]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800aefa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aefe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af00:	e005      	b.n	800af0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af02:	4b12      	ldr	r3, [pc, #72]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800af04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af06:	4a11      	ldr	r2, [pc, #68]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800af08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af0e:	4b0f      	ldr	r3, [pc, #60]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a0e      	ldr	r2, [pc, #56]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800af14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af1a:	f7f7 fe67 	bl	8002bec <HAL_GetTick>
 800af1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af20:	e008      	b.n	800af34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af22:	f7f7 fe63 	bl	8002bec <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d901      	bls.n	800af34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e006      	b.n	800af42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af34:	4b05      	ldr	r3, [pc, #20]	@ (800af4c <RCCEx_PLL2_Config+0x15c>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d0f0      	beq.n	800af22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	58024400 	.word	0x58024400
 800af50:	ffff0007 	.word	0xffff0007

0800af54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af62:	4b53      	ldr	r3, [pc, #332]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800af64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af66:	f003 0303 	and.w	r3, r3, #3
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d101      	bne.n	800af72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e099      	b.n	800b0a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800af72:	4b4f      	ldr	r3, [pc, #316]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a4e      	ldr	r2, [pc, #312]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800af78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af7e:	f7f7 fe35 	bl	8002bec <HAL_GetTick>
 800af82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af84:	e008      	b.n	800af98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af86:	f7f7 fe31 	bl	8002bec <HAL_GetTick>
 800af8a:	4602      	mov	r2, r0
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	2b02      	cmp	r3, #2
 800af92:	d901      	bls.n	800af98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e086      	b.n	800b0a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af98:	4b45      	ldr	r3, [pc, #276]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1f0      	bne.n	800af86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800afa4:	4b42      	ldr	r3, [pc, #264]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800afa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	051b      	lsls	r3, r3, #20
 800afb2:	493f      	ldr	r1, [pc, #252]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800afb4:	4313      	orrs	r3, r2
 800afb6:	628b      	str	r3, [r1, #40]	@ 0x28
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	3b01      	subs	r3, #1
 800afc8:	025b      	lsls	r3, r3, #9
 800afca:	b29b      	uxth	r3, r3
 800afcc:	431a      	orrs	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	041b      	lsls	r3, r3, #16
 800afd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800afda:	431a      	orrs	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	061b      	lsls	r3, r3, #24
 800afe4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800afe8:	4931      	ldr	r1, [pc, #196]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800afea:	4313      	orrs	r3, r2
 800afec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800afee:	4b30      	ldr	r3, [pc, #192]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800aff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	492d      	ldr	r1, [pc, #180]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800affc:	4313      	orrs	r3, r2
 800affe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b000:	4b2b      	ldr	r3, [pc, #172]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b004:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	4928      	ldr	r1, [pc, #160]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b00e:	4313      	orrs	r3, r2
 800b010:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b012:	4b27      	ldr	r3, [pc, #156]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b016:	4a26      	ldr	r2, [pc, #152]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b01c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b01e:	4b24      	ldr	r3, [pc, #144]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b020:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b022:	4b24      	ldr	r3, [pc, #144]	@ (800b0b4 <RCCEx_PLL3_Config+0x160>)
 800b024:	4013      	ands	r3, r2
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	69d2      	ldr	r2, [r2, #28]
 800b02a:	00d2      	lsls	r2, r2, #3
 800b02c:	4920      	ldr	r1, [pc, #128]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b032:	4b1f      	ldr	r3, [pc, #124]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b036:	4a1e      	ldr	r2, [pc, #120]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b03c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d106      	bne.n	800b052 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b044:	4b1a      	ldr	r3, [pc, #104]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b048:	4a19      	ldr	r2, [pc, #100]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b04a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b04e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b050:	e00f      	b.n	800b072 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d106      	bne.n	800b066 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b058:	4b15      	ldr	r3, [pc, #84]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05c:	4a14      	ldr	r2, [pc, #80]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b05e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b062:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b064:	e005      	b.n	800b072 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b066:	4b12      	ldr	r3, [pc, #72]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06a:	4a11      	ldr	r2, [pc, #68]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b06c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b070:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b072:	4b0f      	ldr	r3, [pc, #60]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a0e      	ldr	r2, [pc, #56]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b07c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b07e:	f7f7 fdb5 	bl	8002bec <HAL_GetTick>
 800b082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b084:	e008      	b.n	800b098 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b086:	f7f7 fdb1 	bl	8002bec <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	2b02      	cmp	r3, #2
 800b092:	d901      	bls.n	800b098 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e006      	b.n	800b0a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b098:	4b05      	ldr	r3, [pc, #20]	@ (800b0b0 <RCCEx_PLL3_Config+0x15c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0f0      	beq.n	800b086 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	58024400 	.word	0x58024400
 800b0b4:	ffff0007 	.word	0xffff0007

0800b0b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e02b      	b.n	800b124 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7f5 fd29 	bl	8000b38 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2202      	movs	r2, #2
 800b0ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	f004 fadb 	bl	800f6b4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	461a      	mov	r2, r3
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	f004 fb2f 	bl	800f76c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b10e:	4b07      	ldr	r3, [pc, #28]	@ (800b12c <HAL_SDRAM_Init+0x74>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a06      	ldr	r2, [pc, #24]	@ (800b12c <HAL_SDRAM_Init+0x74>)
 800b114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b118:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	52004000 	.word	0x52004000

0800b130 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e10f      	b.n	800b362 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a87      	ldr	r2, [pc, #540]	@ (800b36c <HAL_SPI_Init+0x23c>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d00f      	beq.n	800b172 <HAL_SPI_Init+0x42>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a86      	ldr	r2, [pc, #536]	@ (800b370 <HAL_SPI_Init+0x240>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d00a      	beq.n	800b172 <HAL_SPI_Init+0x42>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a84      	ldr	r2, [pc, #528]	@ (800b374 <HAL_SPI_Init+0x244>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d005      	beq.n	800b172 <HAL_SPI_Init+0x42>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	2b0f      	cmp	r3, #15
 800b16c:	d901      	bls.n	800b172 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e0f7      	b.n	800b362 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fbb0 	bl	800b8d8 <SPI_GetPacketSize>
 800b178:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a7b      	ldr	r2, [pc, #492]	@ (800b36c <HAL_SPI_Init+0x23c>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d00c      	beq.n	800b19e <HAL_SPI_Init+0x6e>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a79      	ldr	r2, [pc, #484]	@ (800b370 <HAL_SPI_Init+0x240>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d007      	beq.n	800b19e <HAL_SPI_Init+0x6e>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a78      	ldr	r2, [pc, #480]	@ (800b374 <HAL_SPI_Init+0x244>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d002      	beq.n	800b19e <HAL_SPI_Init+0x6e>
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b08      	cmp	r3, #8
 800b19c:	d811      	bhi.n	800b1c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1a2:	4a72      	ldr	r2, [pc, #456]	@ (800b36c <HAL_SPI_Init+0x23c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d009      	beq.n	800b1bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a70      	ldr	r2, [pc, #448]	@ (800b370 <HAL_SPI_Init+0x240>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d004      	beq.n	800b1bc <HAL_SPI_Init+0x8c>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a6f      	ldr	r2, [pc, #444]	@ (800b374 <HAL_SPI_Init+0x244>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d104      	bne.n	800b1c6 <HAL_SPI_Init+0x96>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b10      	cmp	r3, #16
 800b1c0:	d901      	bls.n	800b1c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e0cd      	b.n	800b362 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d106      	bne.n	800b1e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7f6 f9ce 	bl	800157c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 0201 	bic.w	r2, r2, #1
 800b1f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b202:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b20c:	d119      	bne.n	800b242 <HAL_SPI_Init+0x112>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b216:	d103      	bne.n	800b220 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d008      	beq.n	800b232 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10c      	bne.n	800b242 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b22c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b230:	d107      	bne.n	800b242 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b240:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00f      	beq.n	800b26e <HAL_SPI_Init+0x13e>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	2b06      	cmp	r3, #6
 800b254:	d90b      	bls.n	800b26e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	430a      	orrs	r2, r1
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	e007      	b.n	800b27e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b27c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	69da      	ldr	r2, [r3, #28]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b286:	431a      	orrs	r2, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	431a      	orrs	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b290:	ea42 0103 	orr.w	r1, r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68da      	ldr	r2, [r3, #12]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	430a      	orrs	r2, r1
 800b29e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ae:	431a      	orrs	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	431a      	orrs	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	431a      	orrs	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	431a      	orrs	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2de:	ea42 0103 	orr.w	r1, r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d113      	bne.n	800b31e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b308:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b31c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 0201 	bic.w	r2, r2, #1
 800b32c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	430a      	orrs	r2, r1
 800b34e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	40013000 	.word	0x40013000
 800b370:	40003800 	.word	0x40003800
 800b374:	40003c00 	.word	0x40003c00

0800b378 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08a      	sub	sp, #40	@ 0x28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b390:	6a3a      	ldr	r2, [r7, #32]
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	4013      	ands	r3, r2
 800b396:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b3aa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3330      	adds	r3, #48	@ 0x30
 800b3b2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d010      	beq.n	800b3e0 <HAL_SPI_IRQHandler+0x68>
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	f003 0308 	and.w	r3, r3, #8
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00b      	beq.n	800b3e0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	699a      	ldr	r2, [r3, #24]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b3d6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f9b9 	bl	800b750 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b3de:	e192      	b.n	800b706 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d113      	bne.n	800b412 <HAL_SPI_IRQHandler+0x9a>
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	f003 0320 	and.w	r3, r3, #32
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10e      	bne.n	800b412 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d009      	beq.n	800b412 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	4798      	blx	r3
    handled = 1UL;
 800b40e:	2301      	movs	r3, #1
 800b410:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10f      	bne.n	800b43c <HAL_SPI_IRQHandler+0xc4>
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00a      	beq.n	800b43c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d105      	bne.n	800b43c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	4798      	blx	r3
    handled = 1UL;
 800b438:	2301      	movs	r3, #1
 800b43a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	f003 0320 	and.w	r3, r3, #32
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10f      	bne.n	800b466 <HAL_SPI_IRQHandler+0xee>
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	f003 0302 	and.w	r3, r3, #2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00a      	beq.n	800b466 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b456:	2b00      	cmp	r3, #0
 800b458:	d105      	bne.n	800b466 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	4798      	blx	r3
    handled = 1UL;
 800b462:	2301      	movs	r3, #1
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f040 8147 	bne.w	800b6fc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	f003 0308 	and.w	r3, r3, #8
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 808b 	beq.w	800b590 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	699a      	ldr	r2, [r3, #24]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f042 0208 	orr.w	r2, r2, #8
 800b488:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	699a      	ldr	r2, [r3, #24]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f042 0210 	orr.w	r2, r2, #16
 800b498:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	699a      	ldr	r2, [r3, #24]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4a8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	691a      	ldr	r2, [r3, #16]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f022 0208 	bic.w	r2, r2, #8
 800b4b8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d13d      	bne.n	800b544 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b4c8:	e036      	b.n	800b538 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	2b0f      	cmp	r3, #15
 800b4d0:	d90b      	bls.n	800b4ea <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b4dc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4e2:	1d1a      	adds	r2, r3, #4
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	665a      	str	r2, [r3, #100]	@ 0x64
 800b4e8:	e01d      	b.n	800b526 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	2b07      	cmp	r3, #7
 800b4f0:	d90b      	bls.n	800b50a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	8812      	ldrh	r2, [r2, #0]
 800b4fa:	b292      	uxth	r2, r2
 800b4fc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b502:	1c9a      	adds	r2, r3, #2
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	665a      	str	r2, [r3, #100]	@ 0x64
 800b508:	e00d      	b.n	800b526 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b516:	7812      	ldrb	r2, [r2, #0]
 800b518:	b2d2      	uxtb	r2, r2
 800b51a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b520:	1c5a      	adds	r2, r3, #1
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	3b01      	subs	r3, #1
 800b530:	b29a      	uxth	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b53e:	b29b      	uxth	r3, r3
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1c2      	bne.n	800b4ca <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f927 	bl	800b798 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f8ed 	bl	800b73c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b562:	e0d0      	b.n	800b706 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b564:	7cfb      	ldrb	r3, [r7, #19]
 800b566:	2b05      	cmp	r3, #5
 800b568:	d103      	bne.n	800b572 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f8dc 	bl	800b728 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b570:	e0c6      	b.n	800b700 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b572:	7cfb      	ldrb	r3, [r7, #19]
 800b574:	2b04      	cmp	r3, #4
 800b576:	d103      	bne.n	800b580 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f8cb 	bl	800b714 <HAL_SPI_RxCpltCallback>
    return;
 800b57e:	e0bf      	b.n	800b700 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b580:	7cfb      	ldrb	r3, [r7, #19]
 800b582:	2b03      	cmp	r3, #3
 800b584:	f040 80bc 	bne.w	800b700 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7f5 fc9f 	bl	8000ecc <HAL_SPI_TxCpltCallback>
    return;
 800b58e:	e0b7      	b.n	800b700 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 80b5 	beq.w	800b706 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00f      	beq.n	800b5c6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5ac:	f043 0204 	orr.w	r2, r3, #4
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	699a      	ldr	r2, [r3, #24]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5c4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00f      	beq.n	800b5f0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5d6:	f043 0201 	orr.w	r2, r3, #1
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	699a      	ldr	r2, [r3, #24]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5ee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00f      	beq.n	800b61a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b600:	f043 0208 	orr.w	r2, r3, #8
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	699a      	ldr	r2, [r3, #24]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b618:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	f003 0320 	and.w	r3, r3, #32
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00f      	beq.n	800b644 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b62a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	699a      	ldr	r2, [r3, #24]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f042 0220 	orr.w	r2, r2, #32
 800b642:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d05a      	beq.n	800b704 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f022 0201 	bic.w	r2, r2, #1
 800b65c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	6919      	ldr	r1, [r3, #16]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	4b28      	ldr	r3, [pc, #160]	@ (800b70c <HAL_SPI_IRQHandler+0x394>)
 800b66a:	400b      	ands	r3, r1
 800b66c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b674:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b678:	d138      	bne.n	800b6ec <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	689a      	ldr	r2, [r3, #8]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b688:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d013      	beq.n	800b6ba <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b696:	4a1e      	ldr	r2, [pc, #120]	@ (800b710 <HAL_SPI_IRQHandler+0x398>)
 800b698:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7f8 ffa8 	bl	80045f4 <HAL_DMA_Abort_IT>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d007      	beq.n	800b6ba <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d020      	beq.n	800b704 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6c6:	4a12      	ldr	r2, [pc, #72]	@ (800b710 <HAL_SPI_IRQHandler+0x398>)
 800b6c8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7f8 ff90 	bl	80045f4 <HAL_DMA_Abort_IT>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d014      	beq.n	800b704 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b6ea:	e00b      	b.n	800b704 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f821 	bl	800b73c <HAL_SPI_ErrorCallback>
    return;
 800b6fa:	e003      	b.n	800b704 <HAL_SPI_IRQHandler+0x38c>
    return;
 800b6fc:	bf00      	nop
 800b6fe:	e002      	b.n	800b706 <HAL_SPI_IRQHandler+0x38e>
    return;
 800b700:	bf00      	nop
 800b702:	e000      	b.n	800b706 <HAL_SPI_IRQHandler+0x38e>
    return;
 800b704:	bf00      	nop
  }
}
 800b706:	3728      	adds	r7, #40	@ 0x28
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	fffffc94 	.word	0xfffffc94
 800b710:	0800b765 	.word	0x0800b765

0800b714 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b71c:	bf00      	nop
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b770:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f7ff ffd6 	bl	800b73c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b790:	bf00      	nop
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	699a      	ldr	r2, [r3, #24]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f042 0208 	orr.w	r2, r2, #8
 800b7b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	699a      	ldr	r2, [r3, #24]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f042 0210 	orr.w	r2, r2, #16
 800b7c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f022 0201 	bic.w	r2, r2, #1
 800b7d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6919      	ldr	r1, [r3, #16]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	4b3c      	ldr	r3, [pc, #240]	@ (800b8d4 <SPI_CloseTransfer+0x13c>)
 800b7e4:	400b      	ands	r3, r1
 800b7e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	689a      	ldr	r2, [r3, #8]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b7f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b04      	cmp	r3, #4
 800b802:	d014      	beq.n	800b82e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f003 0320 	and.w	r3, r3, #32
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00f      	beq.n	800b82e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b814:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	699a      	ldr	r2, [r3, #24]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f042 0220 	orr.w	r2, r2, #32
 800b82c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b03      	cmp	r3, #3
 800b838:	d014      	beq.n	800b864 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00f      	beq.n	800b864 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b84a:	f043 0204 	orr.w	r2, r3, #4
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	699a      	ldr	r2, [r3, #24]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b862:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00f      	beq.n	800b88e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b874:	f043 0201 	orr.w	r2, r3, #1
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	699a      	ldr	r2, [r3, #24]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b88c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00f      	beq.n	800b8b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b89e:	f043 0208 	orr.w	r2, r3, #8
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	699a      	ldr	r2, [r3, #24]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b8c8:	bf00      	nop
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	fffffc90 	.word	0xfffffc90

0800b8d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e4:	095b      	lsrs	r3, r3, #5
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	3307      	adds	r3, #7
 800b8f6:	08db      	lsrs	r3, r3, #3
 800b8f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	fb02 f303 	mul.w	r3, r2, r3
}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e049      	b.n	800b9b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7f6 f9e9 	bl	8001d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2202      	movs	r2, #2
 800b93e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	3304      	adds	r3, #4
 800b94a:	4619      	mov	r1, r3
 800b94c:	4610      	mov	r0, r2
 800b94e:	f000 fd81 	bl	800c454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2201      	movs	r2, #1
 800b996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6a1a      	ldr	r2, [r3, #32]
 800b9ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10f      	bne.n	800b9f4 <HAL_TIM_Base_Stop+0x38>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6a1a      	ldr	r2, [r3, #32]
 800b9da:	f240 4344 	movw	r3, #1092	@ 0x444
 800b9de:	4013      	ands	r3, r2
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d107      	bne.n	800b9f4 <HAL_TIM_Base_Stop+0x38>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f022 0201 	bic.w	r2, r2, #1
 800b9f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
	...

0800ba0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d001      	beq.n	800ba24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	e054      	b.n	800bace <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2202      	movs	r2, #2
 800ba28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68da      	ldr	r2, [r3, #12]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f042 0201 	orr.w	r2, r2, #1
 800ba3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a26      	ldr	r2, [pc, #152]	@ (800badc <HAL_TIM_Base_Start_IT+0xd0>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d022      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x80>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba4e:	d01d      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x80>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a22      	ldr	r2, [pc, #136]	@ (800bae0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d018      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x80>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a21      	ldr	r2, [pc, #132]	@ (800bae4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d013      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x80>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a1f      	ldr	r2, [pc, #124]	@ (800bae8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d00e      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x80>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a1e      	ldr	r2, [pc, #120]	@ (800baec <HAL_TIM_Base_Start_IT+0xe0>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d009      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x80>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a1c      	ldr	r2, [pc, #112]	@ (800baf0 <HAL_TIM_Base_Start_IT+0xe4>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d004      	beq.n	800ba8c <HAL_TIM_Base_Start_IT+0x80>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a1b      	ldr	r2, [pc, #108]	@ (800baf4 <HAL_TIM_Base_Start_IT+0xe8>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d115      	bne.n	800bab8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689a      	ldr	r2, [r3, #8]
 800ba92:	4b19      	ldr	r3, [pc, #100]	@ (800baf8 <HAL_TIM_Base_Start_IT+0xec>)
 800ba94:	4013      	ands	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b06      	cmp	r3, #6
 800ba9c:	d015      	beq.n	800baca <HAL_TIM_Base_Start_IT+0xbe>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baa4:	d011      	beq.n	800baca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f042 0201 	orr.w	r2, r2, #1
 800bab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bab6:	e008      	b.n	800baca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f042 0201 	orr.w	r2, r2, #1
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	e000      	b.n	800bacc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	40010000 	.word	0x40010000
 800bae0:	40000400 	.word	0x40000400
 800bae4:	40000800 	.word	0x40000800
 800bae8:	40000c00 	.word	0x40000c00
 800baec:	40010400 	.word	0x40010400
 800baf0:	40001800 	.word	0x40001800
 800baf4:	40014000 	.word	0x40014000
 800baf8:	00010007 	.word	0x00010007

0800bafc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e049      	b.n	800bba2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d106      	bne.n	800bb28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f841 	bl	800bbaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3304      	adds	r3, #4
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	f000 fc8a 	bl	800c454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b083      	sub	sp, #12
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bbb2:	bf00      	nop
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
	...

0800bbc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d109      	bne.n	800bbe4 <HAL_TIM_PWM_Start+0x24>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	bf14      	ite	ne
 800bbdc:	2301      	movne	r3, #1
 800bbde:	2300      	moveq	r3, #0
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	e03c      	b.n	800bc5e <HAL_TIM_PWM_Start+0x9e>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2b04      	cmp	r3, #4
 800bbe8:	d109      	bne.n	800bbfe <HAL_TIM_PWM_Start+0x3e>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	bf14      	ite	ne
 800bbf6:	2301      	movne	r3, #1
 800bbf8:	2300      	moveq	r3, #0
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	e02f      	b.n	800bc5e <HAL_TIM_PWM_Start+0x9e>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	2b08      	cmp	r3, #8
 800bc02:	d109      	bne.n	800bc18 <HAL_TIM_PWM_Start+0x58>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	bf14      	ite	ne
 800bc10:	2301      	movne	r3, #1
 800bc12:	2300      	moveq	r3, #0
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	e022      	b.n	800bc5e <HAL_TIM_PWM_Start+0x9e>
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	2b0c      	cmp	r3, #12
 800bc1c:	d109      	bne.n	800bc32 <HAL_TIM_PWM_Start+0x72>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	bf14      	ite	ne
 800bc2a:	2301      	movne	r3, #1
 800bc2c:	2300      	moveq	r3, #0
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	e015      	b.n	800bc5e <HAL_TIM_PWM_Start+0x9e>
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2b10      	cmp	r3, #16
 800bc36:	d109      	bne.n	800bc4c <HAL_TIM_PWM_Start+0x8c>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	bf14      	ite	ne
 800bc44:	2301      	movne	r3, #1
 800bc46:	2300      	moveq	r3, #0
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	e008      	b.n	800bc5e <HAL_TIM_PWM_Start+0x9e>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	bf14      	ite	ne
 800bc58:	2301      	movne	r3, #1
 800bc5a:	2300      	moveq	r3, #0
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e0a1      	b.n	800bdaa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d104      	bne.n	800bc76 <HAL_TIM_PWM_Start+0xb6>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2202      	movs	r2, #2
 800bc70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc74:	e023      	b.n	800bcbe <HAL_TIM_PWM_Start+0xfe>
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	2b04      	cmp	r3, #4
 800bc7a:	d104      	bne.n	800bc86 <HAL_TIM_PWM_Start+0xc6>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc84:	e01b      	b.n	800bcbe <HAL_TIM_PWM_Start+0xfe>
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2b08      	cmp	r3, #8
 800bc8a:	d104      	bne.n	800bc96 <HAL_TIM_PWM_Start+0xd6>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2202      	movs	r2, #2
 800bc90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc94:	e013      	b.n	800bcbe <HAL_TIM_PWM_Start+0xfe>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b0c      	cmp	r3, #12
 800bc9a:	d104      	bne.n	800bca6 <HAL_TIM_PWM_Start+0xe6>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2202      	movs	r2, #2
 800bca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bca4:	e00b      	b.n	800bcbe <HAL_TIM_PWM_Start+0xfe>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	2b10      	cmp	r3, #16
 800bcaa:	d104      	bne.n	800bcb6 <HAL_TIM_PWM_Start+0xf6>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2202      	movs	r2, #2
 800bcb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bcb4:	e003      	b.n	800bcbe <HAL_TIM_PWM_Start+0xfe>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2202      	movs	r2, #2
 800bcba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 ffd8 	bl	800cc7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a38      	ldr	r2, [pc, #224]	@ (800bdb4 <HAL_TIM_PWM_Start+0x1f4>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d013      	beq.n	800bcfe <HAL_TIM_PWM_Start+0x13e>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a37      	ldr	r2, [pc, #220]	@ (800bdb8 <HAL_TIM_PWM_Start+0x1f8>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d00e      	beq.n	800bcfe <HAL_TIM_PWM_Start+0x13e>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a35      	ldr	r2, [pc, #212]	@ (800bdbc <HAL_TIM_PWM_Start+0x1fc>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d009      	beq.n	800bcfe <HAL_TIM_PWM_Start+0x13e>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a34      	ldr	r2, [pc, #208]	@ (800bdc0 <HAL_TIM_PWM_Start+0x200>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d004      	beq.n	800bcfe <HAL_TIM_PWM_Start+0x13e>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a32      	ldr	r2, [pc, #200]	@ (800bdc4 <HAL_TIM_PWM_Start+0x204>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d101      	bne.n	800bd02 <HAL_TIM_PWM_Start+0x142>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e000      	b.n	800bd04 <HAL_TIM_PWM_Start+0x144>
 800bd02:	2300      	movs	r3, #0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d007      	beq.n	800bd18 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bd16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a25      	ldr	r2, [pc, #148]	@ (800bdb4 <HAL_TIM_PWM_Start+0x1f4>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d022      	beq.n	800bd68 <HAL_TIM_PWM_Start+0x1a8>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd2a:	d01d      	beq.n	800bd68 <HAL_TIM_PWM_Start+0x1a8>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a25      	ldr	r2, [pc, #148]	@ (800bdc8 <HAL_TIM_PWM_Start+0x208>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d018      	beq.n	800bd68 <HAL_TIM_PWM_Start+0x1a8>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a24      	ldr	r2, [pc, #144]	@ (800bdcc <HAL_TIM_PWM_Start+0x20c>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d013      	beq.n	800bd68 <HAL_TIM_PWM_Start+0x1a8>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a22      	ldr	r2, [pc, #136]	@ (800bdd0 <HAL_TIM_PWM_Start+0x210>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d00e      	beq.n	800bd68 <HAL_TIM_PWM_Start+0x1a8>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a1a      	ldr	r2, [pc, #104]	@ (800bdb8 <HAL_TIM_PWM_Start+0x1f8>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d009      	beq.n	800bd68 <HAL_TIM_PWM_Start+0x1a8>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a1e      	ldr	r2, [pc, #120]	@ (800bdd4 <HAL_TIM_PWM_Start+0x214>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d004      	beq.n	800bd68 <HAL_TIM_PWM_Start+0x1a8>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a16      	ldr	r2, [pc, #88]	@ (800bdbc <HAL_TIM_PWM_Start+0x1fc>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d115      	bne.n	800bd94 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	689a      	ldr	r2, [r3, #8]
 800bd6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bdd8 <HAL_TIM_PWM_Start+0x218>)
 800bd70:	4013      	ands	r3, r2
 800bd72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b06      	cmp	r3, #6
 800bd78:	d015      	beq.n	800bda6 <HAL_TIM_PWM_Start+0x1e6>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd80:	d011      	beq.n	800bda6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f042 0201 	orr.w	r2, r2, #1
 800bd90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd92:	e008      	b.n	800bda6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f042 0201 	orr.w	r2, r2, #1
 800bda2:	601a      	str	r2, [r3, #0]
 800bda4:	e000      	b.n	800bda8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bda6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	40010000 	.word	0x40010000
 800bdb8:	40010400 	.word	0x40010400
 800bdbc:	40014000 	.word	0x40014000
 800bdc0:	40014400 	.word	0x40014400
 800bdc4:	40014800 	.word	0x40014800
 800bdc8:	40000400 	.word	0x40000400
 800bdcc:	40000800 	.word	0x40000800
 800bdd0:	40000c00 	.word	0x40000c00
 800bdd4:	40001800 	.word	0x40001800
 800bdd8:	00010007 	.word	0x00010007

0800bddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	f003 0302 	and.w	r3, r3, #2
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d020      	beq.n	800be40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f003 0302 	and.w	r3, r3, #2
 800be04:	2b00      	cmp	r3, #0
 800be06:	d01b      	beq.n	800be40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f06f 0202 	mvn.w	r2, #2
 800be10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	f003 0303 	and.w	r3, r3, #3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 faf6 	bl	800c418 <HAL_TIM_IC_CaptureCallback>
 800be2c:	e005      	b.n	800be3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fae8 	bl	800c404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 faf9 	bl	800c42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	f003 0304 	and.w	r3, r3, #4
 800be46:	2b00      	cmp	r3, #0
 800be48:	d020      	beq.n	800be8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f003 0304 	and.w	r3, r3, #4
 800be50:	2b00      	cmp	r3, #0
 800be52:	d01b      	beq.n	800be8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f06f 0204 	mvn.w	r2, #4
 800be5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2202      	movs	r2, #2
 800be62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fad0 	bl	800c418 <HAL_TIM_IC_CaptureCallback>
 800be78:	e005      	b.n	800be86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fac2 	bl	800c404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 fad3 	bl	800c42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	f003 0308 	and.w	r3, r3, #8
 800be92:	2b00      	cmp	r3, #0
 800be94:	d020      	beq.n	800bed8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f003 0308 	and.w	r3, r3, #8
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d01b      	beq.n	800bed8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f06f 0208 	mvn.w	r2, #8
 800bea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2204      	movs	r2, #4
 800beae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	69db      	ldr	r3, [r3, #28]
 800beb6:	f003 0303 	and.w	r3, r3, #3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 faaa 	bl	800c418 <HAL_TIM_IC_CaptureCallback>
 800bec4:	e005      	b.n	800bed2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fa9c 	bl	800c404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 faad 	bl	800c42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f003 0310 	and.w	r3, r3, #16
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d020      	beq.n	800bf24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f003 0310 	and.w	r3, r3, #16
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d01b      	beq.n	800bf24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f06f 0210 	mvn.w	r2, #16
 800bef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2208      	movs	r2, #8
 800befa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	69db      	ldr	r3, [r3, #28]
 800bf02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fa84 	bl	800c418 <HAL_TIM_IC_CaptureCallback>
 800bf10:	e005      	b.n	800bf1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fa76 	bl	800c404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fa87 	bl	800c42c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00c      	beq.n	800bf48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d007      	beq.n	800bf48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f06f 0201 	mvn.w	r2, #1
 800bf40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7f5 fa82 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d104      	bne.n	800bf5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00c      	beq.n	800bf76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d007      	beq.n	800bf76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bf6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 ff41 	bl	800cdf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00c      	beq.n	800bf9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d007      	beq.n	800bf9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bf92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 ff39 	bl	800ce0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00c      	beq.n	800bfbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d007      	beq.n	800bfbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bfb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa41 	bl	800c440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f003 0320 	and.w	r3, r3, #32
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00c      	beq.n	800bfe2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f003 0320 	and.w	r3, r3, #32
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d007      	beq.n	800bfe2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f06f 0220 	mvn.w	r2, #32
 800bfda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 ff01 	bl	800cde4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfe2:	bf00      	nop
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bff8:	2300      	movs	r3, #0
 800bffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c002:	2b01      	cmp	r3, #1
 800c004:	d101      	bne.n	800c00a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c006:	2302      	movs	r3, #2
 800c008:	e0ff      	b.n	800c20a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b14      	cmp	r3, #20
 800c016:	f200 80f0 	bhi.w	800c1fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c01a:	a201      	add	r2, pc, #4	@ (adr r2, 800c020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c075 	.word	0x0800c075
 800c024:	0800c1fb 	.word	0x0800c1fb
 800c028:	0800c1fb 	.word	0x0800c1fb
 800c02c:	0800c1fb 	.word	0x0800c1fb
 800c030:	0800c0b5 	.word	0x0800c0b5
 800c034:	0800c1fb 	.word	0x0800c1fb
 800c038:	0800c1fb 	.word	0x0800c1fb
 800c03c:	0800c1fb 	.word	0x0800c1fb
 800c040:	0800c0f7 	.word	0x0800c0f7
 800c044:	0800c1fb 	.word	0x0800c1fb
 800c048:	0800c1fb 	.word	0x0800c1fb
 800c04c:	0800c1fb 	.word	0x0800c1fb
 800c050:	0800c137 	.word	0x0800c137
 800c054:	0800c1fb 	.word	0x0800c1fb
 800c058:	0800c1fb 	.word	0x0800c1fb
 800c05c:	0800c1fb 	.word	0x0800c1fb
 800c060:	0800c179 	.word	0x0800c179
 800c064:	0800c1fb 	.word	0x0800c1fb
 800c068:	0800c1fb 	.word	0x0800c1fb
 800c06c:	0800c1fb 	.word	0x0800c1fb
 800c070:	0800c1b9 	.word	0x0800c1b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68b9      	ldr	r1, [r7, #8]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 fa8a 	bl	800c594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	699a      	ldr	r2, [r3, #24]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f042 0208 	orr.w	r2, r2, #8
 800c08e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	699a      	ldr	r2, [r3, #24]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f022 0204 	bic.w	r2, r2, #4
 800c09e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6999      	ldr	r1, [r3, #24]
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	691a      	ldr	r2, [r3, #16]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	430a      	orrs	r2, r1
 800c0b0:	619a      	str	r2, [r3, #24]
      break;
 800c0b2:	e0a5      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68b9      	ldr	r1, [r7, #8]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 fafa 	bl	800c6b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	699a      	ldr	r2, [r3, #24]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c0ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	699a      	ldr	r2, [r3, #24]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c0de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6999      	ldr	r1, [r3, #24]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	021a      	lsls	r2, r3, #8
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	430a      	orrs	r2, r1
 800c0f2:	619a      	str	r2, [r3, #24]
      break;
 800c0f4:	e084      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 fb63 	bl	800c7c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	69da      	ldr	r2, [r3, #28]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f042 0208 	orr.w	r2, r2, #8
 800c110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	69da      	ldr	r2, [r3, #28]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f022 0204 	bic.w	r2, r2, #4
 800c120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	69d9      	ldr	r1, [r3, #28]
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	691a      	ldr	r2, [r3, #16]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	430a      	orrs	r2, r1
 800c132:	61da      	str	r2, [r3, #28]
      break;
 800c134:	e064      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68b9      	ldr	r1, [r7, #8]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 fbcb 	bl	800c8d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	69da      	ldr	r2, [r3, #28]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	69da      	ldr	r2, [r3, #28]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	69d9      	ldr	r1, [r3, #28]
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	021a      	lsls	r2, r3, #8
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	430a      	orrs	r2, r1
 800c174:	61da      	str	r2, [r3, #28]
      break;
 800c176:	e043      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68b9      	ldr	r1, [r7, #8]
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fc14 	bl	800c9ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f042 0208 	orr.w	r2, r2, #8
 800c192:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f022 0204 	bic.w	r2, r2, #4
 800c1a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	691a      	ldr	r2, [r3, #16]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c1b6:	e023      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68b9      	ldr	r1, [r7, #8]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 fc58 	bl	800ca74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c1e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	021a      	lsls	r2, r3, #8
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	430a      	orrs	r2, r1
 800c1f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c1f8:	e002      	b.n	800c200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	75fb      	strb	r3, [r7, #23]
      break;
 800c1fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c208:	7dfb      	ldrb	r3, [r7, #23]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop

0800c214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d101      	bne.n	800c230 <HAL_TIM_ConfigClockSource+0x1c>
 800c22c:	2302      	movs	r3, #2
 800c22e:	e0dc      	b.n	800c3ea <HAL_TIM_ConfigClockSource+0x1d6>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c248:	68ba      	ldr	r2, [r7, #8]
 800c24a:	4b6a      	ldr	r3, [pc, #424]	@ (800c3f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c24c:	4013      	ands	r3, r2
 800c24e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a64      	ldr	r2, [pc, #400]	@ (800c3f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c266:	4293      	cmp	r3, r2
 800c268:	f000 80a9 	beq.w	800c3be <HAL_TIM_ConfigClockSource+0x1aa>
 800c26c:	4a62      	ldr	r2, [pc, #392]	@ (800c3f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	f200 80ae 	bhi.w	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c274:	4a61      	ldr	r2, [pc, #388]	@ (800c3fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800c276:	4293      	cmp	r3, r2
 800c278:	f000 80a1 	beq.w	800c3be <HAL_TIM_ConfigClockSource+0x1aa>
 800c27c:	4a5f      	ldr	r2, [pc, #380]	@ (800c3fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	f200 80a6 	bhi.w	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c284:	4a5e      	ldr	r2, [pc, #376]	@ (800c400 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c286:	4293      	cmp	r3, r2
 800c288:	f000 8099 	beq.w	800c3be <HAL_TIM_ConfigClockSource+0x1aa>
 800c28c:	4a5c      	ldr	r2, [pc, #368]	@ (800c400 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	f200 809e 	bhi.w	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c294:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c298:	f000 8091 	beq.w	800c3be <HAL_TIM_ConfigClockSource+0x1aa>
 800c29c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c2a0:	f200 8096 	bhi.w	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2a8:	f000 8089 	beq.w	800c3be <HAL_TIM_ConfigClockSource+0x1aa>
 800c2ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2b0:	f200 808e 	bhi.w	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2b8:	d03e      	beq.n	800c338 <HAL_TIM_ConfigClockSource+0x124>
 800c2ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2be:	f200 8087 	bhi.w	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2c6:	f000 8086 	beq.w	800c3d6 <HAL_TIM_ConfigClockSource+0x1c2>
 800c2ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2ce:	d87f      	bhi.n	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2d0:	2b70      	cmp	r3, #112	@ 0x70
 800c2d2:	d01a      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0xf6>
 800c2d4:	2b70      	cmp	r3, #112	@ 0x70
 800c2d6:	d87b      	bhi.n	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2d8:	2b60      	cmp	r3, #96	@ 0x60
 800c2da:	d050      	beq.n	800c37e <HAL_TIM_ConfigClockSource+0x16a>
 800c2dc:	2b60      	cmp	r3, #96	@ 0x60
 800c2de:	d877      	bhi.n	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2e0:	2b50      	cmp	r3, #80	@ 0x50
 800c2e2:	d03c      	beq.n	800c35e <HAL_TIM_ConfigClockSource+0x14a>
 800c2e4:	2b50      	cmp	r3, #80	@ 0x50
 800c2e6:	d873      	bhi.n	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2e8:	2b40      	cmp	r3, #64	@ 0x40
 800c2ea:	d058      	beq.n	800c39e <HAL_TIM_ConfigClockSource+0x18a>
 800c2ec:	2b40      	cmp	r3, #64	@ 0x40
 800c2ee:	d86f      	bhi.n	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2f0:	2b30      	cmp	r3, #48	@ 0x30
 800c2f2:	d064      	beq.n	800c3be <HAL_TIM_ConfigClockSource+0x1aa>
 800c2f4:	2b30      	cmp	r3, #48	@ 0x30
 800c2f6:	d86b      	bhi.n	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c2f8:	2b20      	cmp	r3, #32
 800c2fa:	d060      	beq.n	800c3be <HAL_TIM_ConfigClockSource+0x1aa>
 800c2fc:	2b20      	cmp	r3, #32
 800c2fe:	d867      	bhi.n	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c300:	2b00      	cmp	r3, #0
 800c302:	d05c      	beq.n	800c3be <HAL_TIM_ConfigClockSource+0x1aa>
 800c304:	2b10      	cmp	r3, #16
 800c306:	d05a      	beq.n	800c3be <HAL_TIM_ConfigClockSource+0x1aa>
 800c308:	e062      	b.n	800c3d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c31a:	f000 fc8f 	bl	800cc3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c32c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	609a      	str	r2, [r3, #8]
      break;
 800c336:	e04f      	b.n	800c3d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c348:	f000 fc78 	bl	800cc3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689a      	ldr	r2, [r3, #8]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c35a:	609a      	str	r2, [r3, #8]
      break;
 800c35c:	e03c      	b.n	800c3d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c36a:	461a      	mov	r2, r3
 800c36c:	f000 fbe8 	bl	800cb40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2150      	movs	r1, #80	@ 0x50
 800c376:	4618      	mov	r0, r3
 800c378:	f000 fc42 	bl	800cc00 <TIM_ITRx_SetConfig>
      break;
 800c37c:	e02c      	b.n	800c3d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c38a:	461a      	mov	r2, r3
 800c38c:	f000 fc07 	bl	800cb9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2160      	movs	r1, #96	@ 0x60
 800c396:	4618      	mov	r0, r3
 800c398:	f000 fc32 	bl	800cc00 <TIM_ITRx_SetConfig>
      break;
 800c39c:	e01c      	b.n	800c3d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f000 fbc8 	bl	800cb40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2140      	movs	r1, #64	@ 0x40
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 fc22 	bl	800cc00 <TIM_ITRx_SetConfig>
      break;
 800c3bc:	e00c      	b.n	800c3d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	f000 fc19 	bl	800cc00 <TIM_ITRx_SetConfig>
      break;
 800c3ce:	e003      	b.n	800c3d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d4:	e000      	b.n	800c3d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c3d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	ffceff88 	.word	0xffceff88
 800c3f8:	00100040 	.word	0x00100040
 800c3fc:	00100030 	.word	0x00100030
 800c400:	00100020 	.word	0x00100020

0800c404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c40c:	bf00      	nop
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c420:	bf00      	nop
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c434:	bf00      	nop
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c448:	bf00      	nop
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4a43      	ldr	r2, [pc, #268]	@ (800c574 <TIM_Base_SetConfig+0x120>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d013      	beq.n	800c494 <TIM_Base_SetConfig+0x40>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c472:	d00f      	beq.n	800c494 <TIM_Base_SetConfig+0x40>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	4a40      	ldr	r2, [pc, #256]	@ (800c578 <TIM_Base_SetConfig+0x124>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d00b      	beq.n	800c494 <TIM_Base_SetConfig+0x40>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a3f      	ldr	r2, [pc, #252]	@ (800c57c <TIM_Base_SetConfig+0x128>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d007      	beq.n	800c494 <TIM_Base_SetConfig+0x40>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a3e      	ldr	r2, [pc, #248]	@ (800c580 <TIM_Base_SetConfig+0x12c>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d003      	beq.n	800c494 <TIM_Base_SetConfig+0x40>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a3d      	ldr	r2, [pc, #244]	@ (800c584 <TIM_Base_SetConfig+0x130>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d108      	bne.n	800c4a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c49a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a32      	ldr	r2, [pc, #200]	@ (800c574 <TIM_Base_SetConfig+0x120>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d01f      	beq.n	800c4ee <TIM_Base_SetConfig+0x9a>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4b4:	d01b      	beq.n	800c4ee <TIM_Base_SetConfig+0x9a>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a2f      	ldr	r2, [pc, #188]	@ (800c578 <TIM_Base_SetConfig+0x124>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d017      	beq.n	800c4ee <TIM_Base_SetConfig+0x9a>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4a2e      	ldr	r2, [pc, #184]	@ (800c57c <TIM_Base_SetConfig+0x128>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d013      	beq.n	800c4ee <TIM_Base_SetConfig+0x9a>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a2d      	ldr	r2, [pc, #180]	@ (800c580 <TIM_Base_SetConfig+0x12c>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d00f      	beq.n	800c4ee <TIM_Base_SetConfig+0x9a>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a2c      	ldr	r2, [pc, #176]	@ (800c584 <TIM_Base_SetConfig+0x130>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d00b      	beq.n	800c4ee <TIM_Base_SetConfig+0x9a>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a2b      	ldr	r2, [pc, #172]	@ (800c588 <TIM_Base_SetConfig+0x134>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d007      	beq.n	800c4ee <TIM_Base_SetConfig+0x9a>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a2a      	ldr	r2, [pc, #168]	@ (800c58c <TIM_Base_SetConfig+0x138>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d003      	beq.n	800c4ee <TIM_Base_SetConfig+0x9a>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a29      	ldr	r2, [pc, #164]	@ (800c590 <TIM_Base_SetConfig+0x13c>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d108      	bne.n	800c500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	689a      	ldr	r2, [r3, #8]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4a14      	ldr	r2, [pc, #80]	@ (800c574 <TIM_Base_SetConfig+0x120>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d00f      	beq.n	800c546 <TIM_Base_SetConfig+0xf2>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a16      	ldr	r2, [pc, #88]	@ (800c584 <TIM_Base_SetConfig+0x130>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d00b      	beq.n	800c546 <TIM_Base_SetConfig+0xf2>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a15      	ldr	r2, [pc, #84]	@ (800c588 <TIM_Base_SetConfig+0x134>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d007      	beq.n	800c546 <TIM_Base_SetConfig+0xf2>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a14      	ldr	r2, [pc, #80]	@ (800c58c <TIM_Base_SetConfig+0x138>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d003      	beq.n	800c546 <TIM_Base_SetConfig+0xf2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a13      	ldr	r2, [pc, #76]	@ (800c590 <TIM_Base_SetConfig+0x13c>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d103      	bne.n	800c54e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	691a      	ldr	r2, [r3, #16]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f043 0204 	orr.w	r2, r3, #4
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2201      	movs	r2, #1
 800c55e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	601a      	str	r2, [r3, #0]
}
 800c566:	bf00      	nop
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	40010000 	.word	0x40010000
 800c578:	40000400 	.word	0x40000400
 800c57c:	40000800 	.word	0x40000800
 800c580:	40000c00 	.word	0x40000c00
 800c584:	40010400 	.word	0x40010400
 800c588:	40014000 	.word	0x40014000
 800c58c:	40014400 	.word	0x40014400
 800c590:	40014800 	.word	0x40014800

0800c594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c594:	b480      	push	{r7}
 800c596:	b087      	sub	sp, #28
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a1b      	ldr	r3, [r3, #32]
 800c5a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a1b      	ldr	r3, [r3, #32]
 800c5a8:	f023 0201 	bic.w	r2, r3, #1
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	699b      	ldr	r3, [r3, #24]
 800c5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	4b37      	ldr	r3, [pc, #220]	@ (800c69c <TIM_OC1_SetConfig+0x108>)
 800c5c0:	4013      	ands	r3, r2
 800c5c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f023 0303 	bic.w	r3, r3, #3
 800c5ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	f023 0302 	bic.w	r3, r3, #2
 800c5dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	697a      	ldr	r2, [r7, #20]
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a2d      	ldr	r2, [pc, #180]	@ (800c6a0 <TIM_OC1_SetConfig+0x10c>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d00f      	beq.n	800c610 <TIM_OC1_SetConfig+0x7c>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a2c      	ldr	r2, [pc, #176]	@ (800c6a4 <TIM_OC1_SetConfig+0x110>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d00b      	beq.n	800c610 <TIM_OC1_SetConfig+0x7c>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a2b      	ldr	r2, [pc, #172]	@ (800c6a8 <TIM_OC1_SetConfig+0x114>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d007      	beq.n	800c610 <TIM_OC1_SetConfig+0x7c>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a2a      	ldr	r2, [pc, #168]	@ (800c6ac <TIM_OC1_SetConfig+0x118>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d003      	beq.n	800c610 <TIM_OC1_SetConfig+0x7c>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a29      	ldr	r2, [pc, #164]	@ (800c6b0 <TIM_OC1_SetConfig+0x11c>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d10c      	bne.n	800c62a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	f023 0308 	bic.w	r3, r3, #8
 800c616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	697a      	ldr	r2, [r7, #20]
 800c61e:	4313      	orrs	r3, r2
 800c620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f023 0304 	bic.w	r3, r3, #4
 800c628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a1c      	ldr	r2, [pc, #112]	@ (800c6a0 <TIM_OC1_SetConfig+0x10c>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d00f      	beq.n	800c652 <TIM_OC1_SetConfig+0xbe>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a1b      	ldr	r2, [pc, #108]	@ (800c6a4 <TIM_OC1_SetConfig+0x110>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d00b      	beq.n	800c652 <TIM_OC1_SetConfig+0xbe>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a1a      	ldr	r2, [pc, #104]	@ (800c6a8 <TIM_OC1_SetConfig+0x114>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d007      	beq.n	800c652 <TIM_OC1_SetConfig+0xbe>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a19      	ldr	r2, [pc, #100]	@ (800c6ac <TIM_OC1_SetConfig+0x118>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d003      	beq.n	800c652 <TIM_OC1_SetConfig+0xbe>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a18      	ldr	r2, [pc, #96]	@ (800c6b0 <TIM_OC1_SetConfig+0x11c>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d111      	bne.n	800c676 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	4313      	orrs	r3, r2
 800c66a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	4313      	orrs	r3, r2
 800c674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	621a      	str	r2, [r3, #32]
}
 800c690:	bf00      	nop
 800c692:	371c      	adds	r7, #28
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	fffeff8f 	.word	0xfffeff8f
 800c6a0:	40010000 	.word	0x40010000
 800c6a4:	40010400 	.word	0x40010400
 800c6a8:	40014000 	.word	0x40014000
 800c6ac:	40014400 	.word	0x40014400
 800c6b0:	40014800 	.word	0x40014800

0800c6b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b087      	sub	sp, #28
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6a1b      	ldr	r3, [r3, #32]
 800c6c8:	f023 0210 	bic.w	r2, r3, #16
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	4b34      	ldr	r3, [pc, #208]	@ (800c7b0 <TIM_OC2_SetConfig+0xfc>)
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	021b      	lsls	r3, r3, #8
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f023 0320 	bic.w	r3, r3, #32
 800c6fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	4313      	orrs	r3, r2
 800c70a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a29      	ldr	r2, [pc, #164]	@ (800c7b4 <TIM_OC2_SetConfig+0x100>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d003      	beq.n	800c71c <TIM_OC2_SetConfig+0x68>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a28      	ldr	r2, [pc, #160]	@ (800c7b8 <TIM_OC2_SetConfig+0x104>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d10d      	bne.n	800c738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	011b      	lsls	r3, r3, #4
 800c72a:	697a      	ldr	r2, [r7, #20]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c736:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a1e      	ldr	r2, [pc, #120]	@ (800c7b4 <TIM_OC2_SetConfig+0x100>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d00f      	beq.n	800c760 <TIM_OC2_SetConfig+0xac>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a1d      	ldr	r2, [pc, #116]	@ (800c7b8 <TIM_OC2_SetConfig+0x104>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d00b      	beq.n	800c760 <TIM_OC2_SetConfig+0xac>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a1c      	ldr	r2, [pc, #112]	@ (800c7bc <TIM_OC2_SetConfig+0x108>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d007      	beq.n	800c760 <TIM_OC2_SetConfig+0xac>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a1b      	ldr	r2, [pc, #108]	@ (800c7c0 <TIM_OC2_SetConfig+0x10c>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d003      	beq.n	800c760 <TIM_OC2_SetConfig+0xac>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a1a      	ldr	r2, [pc, #104]	@ (800c7c4 <TIM_OC2_SetConfig+0x110>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d113      	bne.n	800c788 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c76e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	695b      	ldr	r3, [r3, #20]
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	693a      	ldr	r2, [r7, #16]
 800c778:	4313      	orrs	r3, r2
 800c77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	4313      	orrs	r3, r2
 800c786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	621a      	str	r2, [r3, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	feff8fff 	.word	0xfeff8fff
 800c7b4:	40010000 	.word	0x40010000
 800c7b8:	40010400 	.word	0x40010400
 800c7bc:	40014000 	.word	0x40014000
 800c7c0:	40014400 	.word	0x40014400
 800c7c4:	40014800 	.word	0x40014800

0800c7c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b087      	sub	sp, #28
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6a1b      	ldr	r3, [r3, #32]
 800c7dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	4b33      	ldr	r3, [pc, #204]	@ (800c8c0 <TIM_OC3_SetConfig+0xf8>)
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	4313      	orrs	r3, r2
 800c808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	021b      	lsls	r3, r3, #8
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a28      	ldr	r2, [pc, #160]	@ (800c8c4 <TIM_OC3_SetConfig+0xfc>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d003      	beq.n	800c82e <TIM_OC3_SetConfig+0x66>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a27      	ldr	r2, [pc, #156]	@ (800c8c8 <TIM_OC3_SetConfig+0x100>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d10d      	bne.n	800c84a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	021b      	lsls	r3, r3, #8
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	4313      	orrs	r3, r2
 800c840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4a1d      	ldr	r2, [pc, #116]	@ (800c8c4 <TIM_OC3_SetConfig+0xfc>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d00f      	beq.n	800c872 <TIM_OC3_SetConfig+0xaa>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4a1c      	ldr	r2, [pc, #112]	@ (800c8c8 <TIM_OC3_SetConfig+0x100>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d00b      	beq.n	800c872 <TIM_OC3_SetConfig+0xaa>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4a1b      	ldr	r2, [pc, #108]	@ (800c8cc <TIM_OC3_SetConfig+0x104>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d007      	beq.n	800c872 <TIM_OC3_SetConfig+0xaa>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a1a      	ldr	r2, [pc, #104]	@ (800c8d0 <TIM_OC3_SetConfig+0x108>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d003      	beq.n	800c872 <TIM_OC3_SetConfig+0xaa>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a19      	ldr	r2, [pc, #100]	@ (800c8d4 <TIM_OC3_SetConfig+0x10c>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d113      	bne.n	800c89a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	011b      	lsls	r3, r3, #4
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	699b      	ldr	r3, [r3, #24]
 800c892:	011b      	lsls	r3, r3, #4
 800c894:	693a      	ldr	r2, [r7, #16]
 800c896:	4313      	orrs	r3, r2
 800c898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	621a      	str	r2, [r3, #32]
}
 800c8b4:	bf00      	nop
 800c8b6:	371c      	adds	r7, #28
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	fffeff8f 	.word	0xfffeff8f
 800c8c4:	40010000 	.word	0x40010000
 800c8c8:	40010400 	.word	0x40010400
 800c8cc:	40014000 	.word	0x40014000
 800c8d0:	40014400 	.word	0x40014400
 800c8d4:	40014800 	.word	0x40014800

0800c8d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b087      	sub	sp, #28
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
 800c8ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	69db      	ldr	r3, [r3, #28]
 800c8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	4b24      	ldr	r3, [pc, #144]	@ (800c994 <TIM_OC4_SetConfig+0xbc>)
 800c904:	4013      	ands	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c90e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	021b      	lsls	r3, r3, #8
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	4313      	orrs	r3, r2
 800c91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	031b      	lsls	r3, r3, #12
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a19      	ldr	r2, [pc, #100]	@ (800c998 <TIM_OC4_SetConfig+0xc0>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d00f      	beq.n	800c958 <TIM_OC4_SetConfig+0x80>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a18      	ldr	r2, [pc, #96]	@ (800c99c <TIM_OC4_SetConfig+0xc4>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d00b      	beq.n	800c958 <TIM_OC4_SetConfig+0x80>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a17      	ldr	r2, [pc, #92]	@ (800c9a0 <TIM_OC4_SetConfig+0xc8>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d007      	beq.n	800c958 <TIM_OC4_SetConfig+0x80>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a16      	ldr	r2, [pc, #88]	@ (800c9a4 <TIM_OC4_SetConfig+0xcc>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d003      	beq.n	800c958 <TIM_OC4_SetConfig+0x80>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a15      	ldr	r2, [pc, #84]	@ (800c9a8 <TIM_OC4_SetConfig+0xd0>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d109      	bne.n	800c96c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c95e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	695b      	ldr	r3, [r3, #20]
 800c964:	019b      	lsls	r3, r3, #6
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	4313      	orrs	r3, r2
 800c96a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	685a      	ldr	r2, [r3, #4]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	693a      	ldr	r2, [r7, #16]
 800c984:	621a      	str	r2, [r3, #32]
}
 800c986:	bf00      	nop
 800c988:	371c      	adds	r7, #28
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	feff8fff 	.word	0xfeff8fff
 800c998:	40010000 	.word	0x40010000
 800c99c:	40010400 	.word	0x40010400
 800c9a0:	40014000 	.word	0x40014000
 800c9a4:	40014400 	.word	0x40014400
 800c9a8:	40014800 	.word	0x40014800

0800c9ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6a1b      	ldr	r3, [r3, #32]
 800c9c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4b21      	ldr	r3, [pc, #132]	@ (800ca5c <TIM_OC5_SetConfig+0xb0>)
 800c9d8:	4013      	ands	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c9ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	041b      	lsls	r3, r3, #16
 800c9f4:	693a      	ldr	r2, [r7, #16]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a18      	ldr	r2, [pc, #96]	@ (800ca60 <TIM_OC5_SetConfig+0xb4>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d00f      	beq.n	800ca22 <TIM_OC5_SetConfig+0x76>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a17      	ldr	r2, [pc, #92]	@ (800ca64 <TIM_OC5_SetConfig+0xb8>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d00b      	beq.n	800ca22 <TIM_OC5_SetConfig+0x76>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a16      	ldr	r2, [pc, #88]	@ (800ca68 <TIM_OC5_SetConfig+0xbc>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d007      	beq.n	800ca22 <TIM_OC5_SetConfig+0x76>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a15      	ldr	r2, [pc, #84]	@ (800ca6c <TIM_OC5_SetConfig+0xc0>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d003      	beq.n	800ca22 <TIM_OC5_SetConfig+0x76>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a14      	ldr	r2, [pc, #80]	@ (800ca70 <TIM_OC5_SetConfig+0xc4>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d109      	bne.n	800ca36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	021b      	lsls	r3, r3, #8
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	697a      	ldr	r2, [r7, #20]
 800ca3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	685a      	ldr	r2, [r3, #4]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	621a      	str	r2, [r3, #32]
}
 800ca50:	bf00      	nop
 800ca52:	371c      	adds	r7, #28
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr
 800ca5c:	fffeff8f 	.word	0xfffeff8f
 800ca60:	40010000 	.word	0x40010000
 800ca64:	40010400 	.word	0x40010400
 800ca68:	40014000 	.word	0x40014000
 800ca6c:	40014400 	.word	0x40014400
 800ca70:	40014800 	.word	0x40014800

0800ca74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b087      	sub	sp, #28
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a1b      	ldr	r3, [r3, #32]
 800ca88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	4b22      	ldr	r3, [pc, #136]	@ (800cb28 <TIM_OC6_SetConfig+0xb4>)
 800caa0:	4013      	ands	r3, r2
 800caa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	021b      	lsls	r3, r3, #8
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	4313      	orrs	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	051b      	lsls	r3, r3, #20
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a19      	ldr	r2, [pc, #100]	@ (800cb2c <TIM_OC6_SetConfig+0xb8>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d00f      	beq.n	800caec <TIM_OC6_SetConfig+0x78>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a18      	ldr	r2, [pc, #96]	@ (800cb30 <TIM_OC6_SetConfig+0xbc>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d00b      	beq.n	800caec <TIM_OC6_SetConfig+0x78>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a17      	ldr	r2, [pc, #92]	@ (800cb34 <TIM_OC6_SetConfig+0xc0>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d007      	beq.n	800caec <TIM_OC6_SetConfig+0x78>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a16      	ldr	r2, [pc, #88]	@ (800cb38 <TIM_OC6_SetConfig+0xc4>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d003      	beq.n	800caec <TIM_OC6_SetConfig+0x78>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a15      	ldr	r2, [pc, #84]	@ (800cb3c <TIM_OC6_SetConfig+0xc8>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d109      	bne.n	800cb00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800caf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	695b      	ldr	r3, [r3, #20]
 800caf8:	029b      	lsls	r3, r3, #10
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	685a      	ldr	r2, [r3, #4]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	621a      	str	r2, [r3, #32]
}
 800cb1a:	bf00      	nop
 800cb1c:	371c      	adds	r7, #28
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	feff8fff 	.word	0xfeff8fff
 800cb2c:	40010000 	.word	0x40010000
 800cb30:	40010400 	.word	0x40010400
 800cb34:	40014000 	.word	0x40014000
 800cb38:	40014400 	.word	0x40014400
 800cb3c:	40014800 	.word	0x40014800

0800cb40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6a1b      	ldr	r3, [r3, #32]
 800cb56:	f023 0201 	bic.w	r2, r3, #1
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cb6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	011b      	lsls	r3, r3, #4
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f023 030a 	bic.w	r3, r3, #10
 800cb7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb7e:	697a      	ldr	r2, [r7, #20]
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	693a      	ldr	r2, [r7, #16]
 800cb8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	621a      	str	r2, [r3, #32]
}
 800cb92:	bf00      	nop
 800cb94:	371c      	adds	r7, #28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr

0800cb9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb9e:	b480      	push	{r7}
 800cba0:	b087      	sub	sp, #28
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	60f8      	str	r0, [r7, #12]
 800cba6:	60b9      	str	r1, [r7, #8]
 800cba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6a1b      	ldr	r3, [r3, #32]
 800cbb4:	f023 0210 	bic.w	r2, r3, #16
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cbc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	031b      	lsls	r3, r3, #12
 800cbce:	693a      	ldr	r2, [r7, #16]
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cbda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	011b      	lsls	r3, r3, #4
 800cbe0:	697a      	ldr	r2, [r7, #20]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	621a      	str	r2, [r3, #32]
}
 800cbf2:	bf00      	nop
 800cbf4:	371c      	adds	r7, #28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
	...

0800cc00 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	4b09      	ldr	r3, [pc, #36]	@ (800cc38 <TIM_ITRx_SetConfig+0x38>)
 800cc14:	4013      	ands	r3, r2
 800cc16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	f043 0307 	orr.w	r3, r3, #7
 800cc22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	609a      	str	r2, [r3, #8]
}
 800cc2a:	bf00      	nop
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	ffcfff8f 	.word	0xffcfff8f

0800cc3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b087      	sub	sp, #28
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
 800cc48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cc56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	021a      	lsls	r2, r3, #8
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	431a      	orrs	r2, r3
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	697a      	ldr	r2, [r7, #20]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	609a      	str	r2, [r3, #8]
}
 800cc70:	bf00      	nop
 800cc72:	371c      	adds	r7, #28
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b087      	sub	sp, #28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	f003 031f 	and.w	r3, r3, #31
 800cc8e:	2201      	movs	r2, #1
 800cc90:	fa02 f303 	lsl.w	r3, r2, r3
 800cc94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6a1a      	ldr	r2, [r3, #32]
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	43db      	mvns	r3, r3
 800cc9e:	401a      	ands	r2, r3
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6a1a      	ldr	r2, [r3, #32]
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	f003 031f 	and.w	r3, r3, #31
 800ccae:	6879      	ldr	r1, [r7, #4]
 800ccb0:	fa01 f303 	lsl.w	r3, r1, r3
 800ccb4:	431a      	orrs	r2, r3
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	621a      	str	r2, [r3, #32]
}
 800ccba:	bf00      	nop
 800ccbc:	371c      	adds	r7, #28
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr
	...

0800ccc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d101      	bne.n	800cce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccdc:	2302      	movs	r3, #2
 800ccde:	e06d      	b.n	800cdbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2202      	movs	r2, #2
 800ccec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	689b      	ldr	r3, [r3, #8]
 800ccfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a30      	ldr	r2, [pc, #192]	@ (800cdc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d004      	beq.n	800cd14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a2f      	ldr	r2, [pc, #188]	@ (800cdcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d108      	bne.n	800cd26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a20      	ldr	r2, [pc, #128]	@ (800cdc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d022      	beq.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd52:	d01d      	beq.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4a1d      	ldr	r2, [pc, #116]	@ (800cdd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d018      	beq.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4a1c      	ldr	r2, [pc, #112]	@ (800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d013      	beq.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a1a      	ldr	r2, [pc, #104]	@ (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d00e      	beq.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a15      	ldr	r2, [pc, #84]	@ (800cdcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d009      	beq.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a16      	ldr	r2, [pc, #88]	@ (800cddc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d004      	beq.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a15      	ldr	r2, [pc, #84]	@ (800cde0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d10c      	bne.n	800cdaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3714      	adds	r7, #20
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr
 800cdc8:	40010000 	.word	0x40010000
 800cdcc:	40010400 	.word	0x40010400
 800cdd0:	40000400 	.word	0x40000400
 800cdd4:	40000800 	.word	0x40000800
 800cdd8:	40000c00 	.word	0x40000c00
 800cddc:	40001800 	.word	0x40001800
 800cde0:	40014000 	.word	0x40014000

0800cde4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce14:	bf00      	nop
 800ce16:	370c      	adds	r7, #12
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e042      	b.n	800ceb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d106      	bne.n	800ce4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7f5 f82d 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2224      	movs	r2, #36	@ 0x24
 800ce4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f022 0201 	bic.w	r2, r2, #1
 800ce60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f001 fa60 	bl	800e330 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fcf5 	bl	800d860 <UART_SetConfig>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d101      	bne.n	800ce80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e01b      	b.n	800ceb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	689a      	ldr	r2, [r3, #8]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f042 0201 	orr.w	r2, r2, #1
 800ceae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f001 fadf 	bl	800e474 <UART_CheckIdleState>
 800ceb6:	4603      	mov	r3, r0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b08a      	sub	sp, #40	@ 0x28
 800cec4:	af02      	add	r7, sp, #8
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	603b      	str	r3, [r7, #0]
 800cecc:	4613      	mov	r3, r2
 800cece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ced6:	2b20      	cmp	r3, #32
 800ced8:	d17b      	bne.n	800cfd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <HAL_UART_Transmit+0x26>
 800cee0:	88fb      	ldrh	r3, [r7, #6]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e074      	b.n	800cfd4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2221      	movs	r2, #33	@ 0x21
 800cef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cefa:	f7f5 fe77 	bl	8002bec <HAL_GetTick>
 800cefe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	88fa      	ldrh	r2, [r7, #6]
 800cf04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	88fa      	ldrh	r2, [r7, #6]
 800cf0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf18:	d108      	bne.n	800cf2c <HAL_UART_Transmit+0x6c>
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d104      	bne.n	800cf2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf22:	2300      	movs	r3, #0
 800cf24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	61bb      	str	r3, [r7, #24]
 800cf2a:	e003      	b.n	800cf34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf30:	2300      	movs	r3, #0
 800cf32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf34:	e030      	b.n	800cf98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	2180      	movs	r1, #128	@ 0x80
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f001 fb41 	bl	800e5c8 <UART_WaitOnFlagUntilTimeout>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d005      	beq.n	800cf58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2220      	movs	r2, #32
 800cf50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cf54:	2303      	movs	r3, #3
 800cf56:	e03d      	b.n	800cfd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10b      	bne.n	800cf76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	881b      	ldrh	r3, [r3, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	3302      	adds	r3, #2
 800cf72:	61bb      	str	r3, [r7, #24]
 800cf74:	e007      	b.n	800cf86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	781a      	ldrb	r2, [r3, #0]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	3301      	adds	r3, #1
 800cf84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	b29a      	uxth	r2, r3
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1c8      	bne.n	800cf36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	2140      	movs	r1, #64	@ 0x40
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f001 fb0a 	bl	800e5c8 <UART_WaitOnFlagUntilTimeout>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d005      	beq.n	800cfc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2220      	movs	r2, #32
 800cfbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e006      	b.n	800cfd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2220      	movs	r2, #32
 800cfca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	e000      	b.n	800cfd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cfd2:	2302      	movs	r3, #2
  }
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3720      	adds	r7, #32
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08a      	sub	sp, #40	@ 0x28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cff0:	2b20      	cmp	r3, #32
 800cff2:	d137      	bne.n	800d064 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <HAL_UART_Receive_IT+0x24>
 800cffa:	88fb      	ldrh	r3, [r7, #6]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	e030      	b.n	800d066 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a18      	ldr	r2, [pc, #96]	@ (800d070 <HAL_UART_Receive_IT+0x94>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d01f      	beq.n	800d054 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d018      	beq.n	800d054 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	e853 3f00 	ldrex	r3, [r3]
 800d02e:	613b      	str	r3, [r7, #16]
   return(result);
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d036:	627b      	str	r3, [r7, #36]	@ 0x24
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	461a      	mov	r2, r3
 800d03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d040:	623b      	str	r3, [r7, #32]
 800d042:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d044:	69f9      	ldr	r1, [r7, #28]
 800d046:	6a3a      	ldr	r2, [r7, #32]
 800d048:	e841 2300 	strex	r3, r2, [r1]
 800d04c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1e6      	bne.n	800d022 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d054:	88fb      	ldrh	r3, [r7, #6]
 800d056:	461a      	mov	r2, r3
 800d058:	68b9      	ldr	r1, [r7, #8]
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f001 fb22 	bl	800e6a4 <UART_Start_Receive_IT>
 800d060:	4603      	mov	r3, r0
 800d062:	e000      	b.n	800d066 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d064:	2302      	movs	r3, #2
  }
}
 800d066:	4618      	mov	r0, r3
 800d068:	3728      	adds	r7, #40	@ 0x28
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	58000c00 	.word	0x58000c00

0800d074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b0ba      	sub	sp, #232	@ 0xe8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	69db      	ldr	r3, [r3, #28]
 800d082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d09a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d09e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d0a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d11b      	bne.n	800d0e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0b4:	f003 0320 	and.w	r3, r3, #32
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d015      	beq.n	800d0e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d0bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0c0:	f003 0320 	and.w	r3, r3, #32
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d105      	bne.n	800d0d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d0c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d009      	beq.n	800d0e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f000 8393 	beq.w	800d804 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	4798      	blx	r3
      }
      return;
 800d0e6:	e38d      	b.n	800d804 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d0e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 8123 	beq.w	800d338 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d0f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d0f6:	4b8d      	ldr	r3, [pc, #564]	@ (800d32c <HAL_UART_IRQHandler+0x2b8>)
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d106      	bne.n	800d10c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d0fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d102:	4b8b      	ldr	r3, [pc, #556]	@ (800d330 <HAL_UART_IRQHandler+0x2bc>)
 800d104:	4013      	ands	r3, r2
 800d106:	2b00      	cmp	r3, #0
 800d108:	f000 8116 	beq.w	800d338 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d110:	f003 0301 	and.w	r3, r3, #1
 800d114:	2b00      	cmp	r3, #0
 800d116:	d011      	beq.n	800d13c <HAL_UART_IRQHandler+0xc8>
 800d118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d11c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00b      	beq.n	800d13c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2201      	movs	r2, #1
 800d12a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d132:	f043 0201 	orr.w	r2, r3, #1
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d140:	f003 0302 	and.w	r3, r3, #2
 800d144:	2b00      	cmp	r3, #0
 800d146:	d011      	beq.n	800d16c <HAL_UART_IRQHandler+0xf8>
 800d148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d14c:	f003 0301 	and.w	r3, r3, #1
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00b      	beq.n	800d16c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2202      	movs	r2, #2
 800d15a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d162:	f043 0204 	orr.w	r2, r3, #4
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d170:	f003 0304 	and.w	r3, r3, #4
 800d174:	2b00      	cmp	r3, #0
 800d176:	d011      	beq.n	800d19c <HAL_UART_IRQHandler+0x128>
 800d178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00b      	beq.n	800d19c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2204      	movs	r2, #4
 800d18a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d192:	f043 0202 	orr.w	r2, r3, #2
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1a0:	f003 0308 	and.w	r3, r3, #8
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d017      	beq.n	800d1d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1ac:	f003 0320 	and.w	r3, r3, #32
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d105      	bne.n	800d1c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d1b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d1b8:	4b5c      	ldr	r3, [pc, #368]	@ (800d32c <HAL_UART_IRQHandler+0x2b8>)
 800d1ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00b      	beq.n	800d1d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2208      	movs	r2, #8
 800d1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ce:	f043 0208 	orr.w	r2, r3, #8
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d012      	beq.n	800d20a <HAL_UART_IRQHandler+0x196>
 800d1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d00c      	beq.n	800d20a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d200:	f043 0220 	orr.w	r2, r3, #32
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d210:	2b00      	cmp	r3, #0
 800d212:	f000 82f9 	beq.w	800d808 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d21a:	f003 0320 	and.w	r3, r3, #32
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d013      	beq.n	800d24a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d226:	f003 0320 	and.w	r3, r3, #32
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d105      	bne.n	800d23a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d22e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d236:	2b00      	cmp	r3, #0
 800d238:	d007      	beq.n	800d24a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d003      	beq.n	800d24a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d250:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d25e:	2b40      	cmp	r3, #64	@ 0x40
 800d260:	d005      	beq.n	800d26e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d266:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d054      	beq.n	800d318 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f001 fb3a 	bl	800e8e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d27e:	2b40      	cmp	r3, #64	@ 0x40
 800d280:	d146      	bne.n	800d310 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3308      	adds	r3, #8
 800d288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d290:	e853 3f00 	ldrex	r3, [r3]
 800d294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d29c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d2ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d2b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d2ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d2be:	e841 2300 	strex	r3, r2, [r1]
 800d2c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d2c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1d9      	bne.n	800d282 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d017      	beq.n	800d308 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2de:	4a15      	ldr	r2, [pc, #84]	@ (800d334 <HAL_UART_IRQHandler+0x2c0>)
 800d2e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7f7 f983 	bl	80045f4 <HAL_DMA_Abort_IT>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d019      	beq.n	800d328 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d302:	4610      	mov	r0, r2
 800d304:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d306:	e00f      	b.n	800d328 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fa93 	bl	800d834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d30e:	e00b      	b.n	800d328 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 fa8f 	bl	800d834 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d316:	e007      	b.n	800d328 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 fa8b 	bl	800d834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d326:	e26f      	b.n	800d808 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d328:	bf00      	nop
    return;
 800d32a:	e26d      	b.n	800d808 <HAL_UART_IRQHandler+0x794>
 800d32c:	10000001 	.word	0x10000001
 800d330:	04000120 	.word	0x04000120
 800d334:	0800e9b5 	.word	0x0800e9b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	f040 8203 	bne.w	800d748 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d346:	f003 0310 	and.w	r3, r3, #16
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 81fc 	beq.w	800d748 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d354:	f003 0310 	and.w	r3, r3, #16
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f000 81f5 	beq.w	800d748 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2210      	movs	r2, #16
 800d364:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d370:	2b40      	cmp	r3, #64	@ 0x40
 800d372:	f040 816d 	bne.w	800d650 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4aa4      	ldr	r2, [pc, #656]	@ (800d610 <HAL_UART_IRQHandler+0x59c>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d068      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4aa1      	ldr	r2, [pc, #644]	@ (800d614 <HAL_UART_IRQHandler+0x5a0>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d061      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a9f      	ldr	r2, [pc, #636]	@ (800d618 <HAL_UART_IRQHandler+0x5a4>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d05a      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a9c      	ldr	r2, [pc, #624]	@ (800d61c <HAL_UART_IRQHandler+0x5a8>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d053      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a9a      	ldr	r2, [pc, #616]	@ (800d620 <HAL_UART_IRQHandler+0x5ac>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d04c      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a97      	ldr	r2, [pc, #604]	@ (800d624 <HAL_UART_IRQHandler+0x5b0>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d045      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a95      	ldr	r2, [pc, #596]	@ (800d628 <HAL_UART_IRQHandler+0x5b4>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d03e      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a92      	ldr	r2, [pc, #584]	@ (800d62c <HAL_UART_IRQHandler+0x5b8>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d037      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a90      	ldr	r2, [pc, #576]	@ (800d630 <HAL_UART_IRQHandler+0x5bc>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d030      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a8d      	ldr	r2, [pc, #564]	@ (800d634 <HAL_UART_IRQHandler+0x5c0>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d029      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a8b      	ldr	r2, [pc, #556]	@ (800d638 <HAL_UART_IRQHandler+0x5c4>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d022      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a88      	ldr	r2, [pc, #544]	@ (800d63c <HAL_UART_IRQHandler+0x5c8>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d01b      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a86      	ldr	r2, [pc, #536]	@ (800d640 <HAL_UART_IRQHandler+0x5cc>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d014      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a83      	ldr	r2, [pc, #524]	@ (800d644 <HAL_UART_IRQHandler+0x5d0>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d00d      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a81      	ldr	r2, [pc, #516]	@ (800d648 <HAL_UART_IRQHandler+0x5d4>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d006      	beq.n	800d456 <HAL_UART_IRQHandler+0x3e2>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a7e      	ldr	r2, [pc, #504]	@ (800d64c <HAL_UART_IRQHandler+0x5d8>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d106      	bne.n	800d464 <HAL_UART_IRQHandler+0x3f0>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	b29b      	uxth	r3, r3
 800d462:	e005      	b.n	800d470 <HAL_UART_IRQHandler+0x3fc>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	b29b      	uxth	r3, r3
 800d470:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d474:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 80ad 	beq.w	800d5d8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d484:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d488:	429a      	cmp	r2, r3
 800d48a:	f080 80a5 	bcs.w	800d5d8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d494:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d49e:	69db      	ldr	r3, [r3, #28]
 800d4a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4a4:	f000 8087 	beq.w	800d5b6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d4b4:	e853 3f00 	ldrex	r3, [r3]
 800d4b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d4bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d4c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d4d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d4d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d4de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d4e2:	e841 2300 	strex	r3, r2, [r1]
 800d4e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d4ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1da      	bne.n	800d4a8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	3308      	adds	r3, #8
 800d4f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4fc:	e853 3f00 	ldrex	r3, [r3]
 800d500:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d504:	f023 0301 	bic.w	r3, r3, #1
 800d508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3308      	adds	r3, #8
 800d512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d516:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d51a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d51e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e1      	bne.n	800d4f2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	3308      	adds	r3, #8
 800d534:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d538:	e853 3f00 	ldrex	r3, [r3]
 800d53c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d53e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	3308      	adds	r3, #8
 800d54e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d552:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d554:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d556:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d558:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d55a:	e841 2300 	strex	r3, r2, [r1]
 800d55e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1e3      	bne.n	800d52e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2220      	movs	r2, #32
 800d56a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d57c:	e853 3f00 	ldrex	r3, [r3]
 800d580:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d584:	f023 0310 	bic.w	r3, r3, #16
 800d588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	461a      	mov	r2, r3
 800d592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d596:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d598:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d59c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d59e:	e841 2300 	strex	r3, r2, [r1]
 800d5a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d5a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1e4      	bne.n	800d574 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7f6 fd01 	bl	8003fb8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2202      	movs	r2, #2
 800d5ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	1ad3      	subs	r3, r2, r3
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 f939 	bl	800d848 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d5d6:	e119      	b.n	800d80c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d5de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	f040 8112 	bne.w	800d80c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ee:	69db      	ldr	r3, [r3, #28]
 800d5f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5f4:	f040 810a 	bne.w	800d80c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d604:	4619      	mov	r1, r3
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f91e 	bl	800d848 <HAL_UARTEx_RxEventCallback>
      return;
 800d60c:	e0fe      	b.n	800d80c <HAL_UART_IRQHandler+0x798>
 800d60e:	bf00      	nop
 800d610:	40020010 	.word	0x40020010
 800d614:	40020028 	.word	0x40020028
 800d618:	40020040 	.word	0x40020040
 800d61c:	40020058 	.word	0x40020058
 800d620:	40020070 	.word	0x40020070
 800d624:	40020088 	.word	0x40020088
 800d628:	400200a0 	.word	0x400200a0
 800d62c:	400200b8 	.word	0x400200b8
 800d630:	40020410 	.word	0x40020410
 800d634:	40020428 	.word	0x40020428
 800d638:	40020440 	.word	0x40020440
 800d63c:	40020458 	.word	0x40020458
 800d640:	40020470 	.word	0x40020470
 800d644:	40020488 	.word	0x40020488
 800d648:	400204a0 	.word	0x400204a0
 800d64c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 80cf 	beq.w	800d810 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800d672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d676:	2b00      	cmp	r3, #0
 800d678:	f000 80ca 	beq.w	800d810 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d684:	e853 3f00 	ldrex	r3, [r3]
 800d688:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d68c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d690:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	461a      	mov	r2, r3
 800d69a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d69e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d6a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6a6:	e841 2300 	strex	r3, r2, [r1]
 800d6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1e4      	bne.n	800d67c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6bc:	e853 3f00 	ldrex	r3, [r3]
 800d6c0:	623b      	str	r3, [r7, #32]
   return(result);
 800d6c2:	6a3a      	ldr	r2, [r7, #32]
 800d6c4:	4b55      	ldr	r3, [pc, #340]	@ (800d81c <HAL_UART_IRQHandler+0x7a8>)
 800d6c6:	4013      	ands	r3, r2
 800d6c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d6d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6de:	e841 2300 	strex	r3, r2, [r1]
 800d6e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1e3      	bne.n	800d6b2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2220      	movs	r2, #32
 800d6ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	e853 3f00 	ldrex	r3, [r3]
 800d70a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f023 0310 	bic.w	r3, r3, #16
 800d712:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	461a      	mov	r2, r3
 800d71c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d720:	61fb      	str	r3, [r7, #28]
 800d722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d724:	69b9      	ldr	r1, [r7, #24]
 800d726:	69fa      	ldr	r2, [r7, #28]
 800d728:	e841 2300 	strex	r3, r2, [r1]
 800d72c:	617b      	str	r3, [r7, #20]
   return(result);
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1e4      	bne.n	800d6fe <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2202      	movs	r2, #2
 800d738:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d73a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d73e:	4619      	mov	r1, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f881 	bl	800d848 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d746:	e063      	b.n	800d810 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d74c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00e      	beq.n	800d772 <HAL_UART_IRQHandler+0x6fe>
 800d754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d008      	beq.n	800d772 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f001 fe80 	bl	800f470 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d770:	e051      	b.n	800d816 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d014      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d786:	2b00      	cmp	r3, #0
 800d788:	d105      	bne.n	800d796 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d78e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d792:	2b00      	cmp	r3, #0
 800d794:	d008      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d03a      	beq.n	800d814 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	4798      	blx	r3
    }
    return;
 800d7a6:	e035      	b.n	800d814 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d009      	beq.n	800d7c8 <HAL_UART_IRQHandler+0x754>
 800d7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d003      	beq.n	800d7c8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f001 f909 	bl	800e9d8 <UART_EndTransmit_IT>
    return;
 800d7c6:	e026      	b.n	800d816 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d009      	beq.n	800d7e8 <HAL_UART_IRQHandler+0x774>
 800d7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d003      	beq.n	800d7e8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f001 fe59 	bl	800f498 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7e6:	e016      	b.n	800d816 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d010      	beq.n	800d816 <HAL_UART_IRQHandler+0x7a2>
 800d7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	da0c      	bge.n	800d816 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f001 fe41 	bl	800f484 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d802:	e008      	b.n	800d816 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d804:	bf00      	nop
 800d806:	e006      	b.n	800d816 <HAL_UART_IRQHandler+0x7a2>
    return;
 800d808:	bf00      	nop
 800d80a:	e004      	b.n	800d816 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d80c:	bf00      	nop
 800d80e:	e002      	b.n	800d816 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d810:	bf00      	nop
 800d812:	e000      	b.n	800d816 <HAL_UART_IRQHandler+0x7a2>
    return;
 800d814:	bf00      	nop
  }
}
 800d816:	37e8      	adds	r7, #232	@ 0xe8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	effffffe 	.word	0xeffffffe

0800d820 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d828:	bf00      	nop
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d83c:	bf00      	nop
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d854:	bf00      	nop
 800d856:	370c      	adds	r7, #12
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d864:	b092      	sub	sp, #72	@ 0x48
 800d866:	af00      	add	r7, sp, #0
 800d868:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	689a      	ldr	r2, [r3, #8]
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	431a      	orrs	r2, r3
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	431a      	orrs	r2, r3
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	69db      	ldr	r3, [r3, #28]
 800d884:	4313      	orrs	r3, r2
 800d886:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	4bbe      	ldr	r3, [pc, #760]	@ (800db88 <UART_SetConfig+0x328>)
 800d890:	4013      	ands	r3, r2
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	6812      	ldr	r2, [r2, #0]
 800d896:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d898:	430b      	orrs	r3, r1
 800d89a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	68da      	ldr	r2, [r3, #12]
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	430a      	orrs	r2, r1
 800d8b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	699b      	ldr	r3, [r3, #24]
 800d8b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4ab3      	ldr	r2, [pc, #716]	@ (800db8c <UART_SetConfig+0x32c>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d004      	beq.n	800d8cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	6a1b      	ldr	r3, [r3, #32]
 800d8c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	689a      	ldr	r2, [r3, #8]
 800d8d2:	4baf      	ldr	r3, [pc, #700]	@ (800db90 <UART_SetConfig+0x330>)
 800d8d4:	4013      	ands	r3, r2
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	6812      	ldr	r2, [r2, #0]
 800d8da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d8dc:	430b      	orrs	r3, r1
 800d8de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e6:	f023 010f 	bic.w	r1, r3, #15
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	430a      	orrs	r2, r1
 800d8f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4aa6      	ldr	r2, [pc, #664]	@ (800db94 <UART_SetConfig+0x334>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d177      	bne.n	800d9f0 <UART_SetConfig+0x190>
 800d900:	4ba5      	ldr	r3, [pc, #660]	@ (800db98 <UART_SetConfig+0x338>)
 800d902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d904:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d908:	2b28      	cmp	r3, #40	@ 0x28
 800d90a:	d86d      	bhi.n	800d9e8 <UART_SetConfig+0x188>
 800d90c:	a201      	add	r2, pc, #4	@ (adr r2, 800d914 <UART_SetConfig+0xb4>)
 800d90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d912:	bf00      	nop
 800d914:	0800d9b9 	.word	0x0800d9b9
 800d918:	0800d9e9 	.word	0x0800d9e9
 800d91c:	0800d9e9 	.word	0x0800d9e9
 800d920:	0800d9e9 	.word	0x0800d9e9
 800d924:	0800d9e9 	.word	0x0800d9e9
 800d928:	0800d9e9 	.word	0x0800d9e9
 800d92c:	0800d9e9 	.word	0x0800d9e9
 800d930:	0800d9e9 	.word	0x0800d9e9
 800d934:	0800d9c1 	.word	0x0800d9c1
 800d938:	0800d9e9 	.word	0x0800d9e9
 800d93c:	0800d9e9 	.word	0x0800d9e9
 800d940:	0800d9e9 	.word	0x0800d9e9
 800d944:	0800d9e9 	.word	0x0800d9e9
 800d948:	0800d9e9 	.word	0x0800d9e9
 800d94c:	0800d9e9 	.word	0x0800d9e9
 800d950:	0800d9e9 	.word	0x0800d9e9
 800d954:	0800d9c9 	.word	0x0800d9c9
 800d958:	0800d9e9 	.word	0x0800d9e9
 800d95c:	0800d9e9 	.word	0x0800d9e9
 800d960:	0800d9e9 	.word	0x0800d9e9
 800d964:	0800d9e9 	.word	0x0800d9e9
 800d968:	0800d9e9 	.word	0x0800d9e9
 800d96c:	0800d9e9 	.word	0x0800d9e9
 800d970:	0800d9e9 	.word	0x0800d9e9
 800d974:	0800d9d1 	.word	0x0800d9d1
 800d978:	0800d9e9 	.word	0x0800d9e9
 800d97c:	0800d9e9 	.word	0x0800d9e9
 800d980:	0800d9e9 	.word	0x0800d9e9
 800d984:	0800d9e9 	.word	0x0800d9e9
 800d988:	0800d9e9 	.word	0x0800d9e9
 800d98c:	0800d9e9 	.word	0x0800d9e9
 800d990:	0800d9e9 	.word	0x0800d9e9
 800d994:	0800d9d9 	.word	0x0800d9d9
 800d998:	0800d9e9 	.word	0x0800d9e9
 800d99c:	0800d9e9 	.word	0x0800d9e9
 800d9a0:	0800d9e9 	.word	0x0800d9e9
 800d9a4:	0800d9e9 	.word	0x0800d9e9
 800d9a8:	0800d9e9 	.word	0x0800d9e9
 800d9ac:	0800d9e9 	.word	0x0800d9e9
 800d9b0:	0800d9e9 	.word	0x0800d9e9
 800d9b4:	0800d9e1 	.word	0x0800d9e1
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9be:	e222      	b.n	800de06 <UART_SetConfig+0x5a6>
 800d9c0:	2304      	movs	r3, #4
 800d9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9c6:	e21e      	b.n	800de06 <UART_SetConfig+0x5a6>
 800d9c8:	2308      	movs	r3, #8
 800d9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ce:	e21a      	b.n	800de06 <UART_SetConfig+0x5a6>
 800d9d0:	2310      	movs	r3, #16
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d6:	e216      	b.n	800de06 <UART_SetConfig+0x5a6>
 800d9d8:	2320      	movs	r3, #32
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e212      	b.n	800de06 <UART_SetConfig+0x5a6>
 800d9e0:	2340      	movs	r3, #64	@ 0x40
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e6:	e20e      	b.n	800de06 <UART_SetConfig+0x5a6>
 800d9e8:	2380      	movs	r3, #128	@ 0x80
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ee:	e20a      	b.n	800de06 <UART_SetConfig+0x5a6>
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a69      	ldr	r2, [pc, #420]	@ (800db9c <UART_SetConfig+0x33c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d130      	bne.n	800da5c <UART_SetConfig+0x1fc>
 800d9fa:	4b67      	ldr	r3, [pc, #412]	@ (800db98 <UART_SetConfig+0x338>)
 800d9fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9fe:	f003 0307 	and.w	r3, r3, #7
 800da02:	2b05      	cmp	r3, #5
 800da04:	d826      	bhi.n	800da54 <UART_SetConfig+0x1f4>
 800da06:	a201      	add	r2, pc, #4	@ (adr r2, 800da0c <UART_SetConfig+0x1ac>)
 800da08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da0c:	0800da25 	.word	0x0800da25
 800da10:	0800da2d 	.word	0x0800da2d
 800da14:	0800da35 	.word	0x0800da35
 800da18:	0800da3d 	.word	0x0800da3d
 800da1c:	0800da45 	.word	0x0800da45
 800da20:	0800da4d 	.word	0x0800da4d
 800da24:	2300      	movs	r3, #0
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2a:	e1ec      	b.n	800de06 <UART_SetConfig+0x5a6>
 800da2c:	2304      	movs	r3, #4
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da32:	e1e8      	b.n	800de06 <UART_SetConfig+0x5a6>
 800da34:	2308      	movs	r3, #8
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3a:	e1e4      	b.n	800de06 <UART_SetConfig+0x5a6>
 800da3c:	2310      	movs	r3, #16
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da42:	e1e0      	b.n	800de06 <UART_SetConfig+0x5a6>
 800da44:	2320      	movs	r3, #32
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e1dc      	b.n	800de06 <UART_SetConfig+0x5a6>
 800da4c:	2340      	movs	r3, #64	@ 0x40
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da52:	e1d8      	b.n	800de06 <UART_SetConfig+0x5a6>
 800da54:	2380      	movs	r3, #128	@ 0x80
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5a:	e1d4      	b.n	800de06 <UART_SetConfig+0x5a6>
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a4f      	ldr	r2, [pc, #316]	@ (800dba0 <UART_SetConfig+0x340>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d130      	bne.n	800dac8 <UART_SetConfig+0x268>
 800da66:	4b4c      	ldr	r3, [pc, #304]	@ (800db98 <UART_SetConfig+0x338>)
 800da68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da6a:	f003 0307 	and.w	r3, r3, #7
 800da6e:	2b05      	cmp	r3, #5
 800da70:	d826      	bhi.n	800dac0 <UART_SetConfig+0x260>
 800da72:	a201      	add	r2, pc, #4	@ (adr r2, 800da78 <UART_SetConfig+0x218>)
 800da74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da78:	0800da91 	.word	0x0800da91
 800da7c:	0800da99 	.word	0x0800da99
 800da80:	0800daa1 	.word	0x0800daa1
 800da84:	0800daa9 	.word	0x0800daa9
 800da88:	0800dab1 	.word	0x0800dab1
 800da8c:	0800dab9 	.word	0x0800dab9
 800da90:	2300      	movs	r3, #0
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da96:	e1b6      	b.n	800de06 <UART_SetConfig+0x5a6>
 800da98:	2304      	movs	r3, #4
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da9e:	e1b2      	b.n	800de06 <UART_SetConfig+0x5a6>
 800daa0:	2308      	movs	r3, #8
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daa6:	e1ae      	b.n	800de06 <UART_SetConfig+0x5a6>
 800daa8:	2310      	movs	r3, #16
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daae:	e1aa      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dab0:	2320      	movs	r3, #32
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab6:	e1a6      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dab8:	2340      	movs	r3, #64	@ 0x40
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dabe:	e1a2      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dac0:	2380      	movs	r3, #128	@ 0x80
 800dac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac6:	e19e      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a35      	ldr	r2, [pc, #212]	@ (800dba4 <UART_SetConfig+0x344>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d130      	bne.n	800db34 <UART_SetConfig+0x2d4>
 800dad2:	4b31      	ldr	r3, [pc, #196]	@ (800db98 <UART_SetConfig+0x338>)
 800dad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dad6:	f003 0307 	and.w	r3, r3, #7
 800dada:	2b05      	cmp	r3, #5
 800dadc:	d826      	bhi.n	800db2c <UART_SetConfig+0x2cc>
 800dade:	a201      	add	r2, pc, #4	@ (adr r2, 800dae4 <UART_SetConfig+0x284>)
 800dae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae4:	0800dafd 	.word	0x0800dafd
 800dae8:	0800db05 	.word	0x0800db05
 800daec:	0800db0d 	.word	0x0800db0d
 800daf0:	0800db15 	.word	0x0800db15
 800daf4:	0800db1d 	.word	0x0800db1d
 800daf8:	0800db25 	.word	0x0800db25
 800dafc:	2300      	movs	r3, #0
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db02:	e180      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db04:	2304      	movs	r3, #4
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db0a:	e17c      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db0c:	2308      	movs	r3, #8
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db12:	e178      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db14:	2310      	movs	r3, #16
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db1a:	e174      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db1c:	2320      	movs	r3, #32
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db22:	e170      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db24:	2340      	movs	r3, #64	@ 0x40
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db2a:	e16c      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db2c:	2380      	movs	r3, #128	@ 0x80
 800db2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db32:	e168      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a1b      	ldr	r2, [pc, #108]	@ (800dba8 <UART_SetConfig+0x348>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d142      	bne.n	800dbc4 <UART_SetConfig+0x364>
 800db3e:	4b16      	ldr	r3, [pc, #88]	@ (800db98 <UART_SetConfig+0x338>)
 800db40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db42:	f003 0307 	and.w	r3, r3, #7
 800db46:	2b05      	cmp	r3, #5
 800db48:	d838      	bhi.n	800dbbc <UART_SetConfig+0x35c>
 800db4a:	a201      	add	r2, pc, #4	@ (adr r2, 800db50 <UART_SetConfig+0x2f0>)
 800db4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db50:	0800db69 	.word	0x0800db69
 800db54:	0800db71 	.word	0x0800db71
 800db58:	0800db79 	.word	0x0800db79
 800db5c:	0800db81 	.word	0x0800db81
 800db60:	0800dbad 	.word	0x0800dbad
 800db64:	0800dbb5 	.word	0x0800dbb5
 800db68:	2300      	movs	r3, #0
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db6e:	e14a      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db70:	2304      	movs	r3, #4
 800db72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db76:	e146      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db78:	2308      	movs	r3, #8
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db7e:	e142      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db80:	2310      	movs	r3, #16
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db86:	e13e      	b.n	800de06 <UART_SetConfig+0x5a6>
 800db88:	cfff69f3 	.word	0xcfff69f3
 800db8c:	58000c00 	.word	0x58000c00
 800db90:	11fff4ff 	.word	0x11fff4ff
 800db94:	40011000 	.word	0x40011000
 800db98:	58024400 	.word	0x58024400
 800db9c:	40004400 	.word	0x40004400
 800dba0:	40004800 	.word	0x40004800
 800dba4:	40004c00 	.word	0x40004c00
 800dba8:	40005000 	.word	0x40005000
 800dbac:	2320      	movs	r3, #32
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbb2:	e128      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dbb4:	2340      	movs	r3, #64	@ 0x40
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbba:	e124      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dbbc:	2380      	movs	r3, #128	@ 0x80
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbc2:	e120      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4acb      	ldr	r2, [pc, #812]	@ (800def8 <UART_SetConfig+0x698>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d176      	bne.n	800dcbc <UART_SetConfig+0x45c>
 800dbce:	4bcb      	ldr	r3, [pc, #812]	@ (800defc <UART_SetConfig+0x69c>)
 800dbd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dbd6:	2b28      	cmp	r3, #40	@ 0x28
 800dbd8:	d86c      	bhi.n	800dcb4 <UART_SetConfig+0x454>
 800dbda:	a201      	add	r2, pc, #4	@ (adr r2, 800dbe0 <UART_SetConfig+0x380>)
 800dbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe0:	0800dc85 	.word	0x0800dc85
 800dbe4:	0800dcb5 	.word	0x0800dcb5
 800dbe8:	0800dcb5 	.word	0x0800dcb5
 800dbec:	0800dcb5 	.word	0x0800dcb5
 800dbf0:	0800dcb5 	.word	0x0800dcb5
 800dbf4:	0800dcb5 	.word	0x0800dcb5
 800dbf8:	0800dcb5 	.word	0x0800dcb5
 800dbfc:	0800dcb5 	.word	0x0800dcb5
 800dc00:	0800dc8d 	.word	0x0800dc8d
 800dc04:	0800dcb5 	.word	0x0800dcb5
 800dc08:	0800dcb5 	.word	0x0800dcb5
 800dc0c:	0800dcb5 	.word	0x0800dcb5
 800dc10:	0800dcb5 	.word	0x0800dcb5
 800dc14:	0800dcb5 	.word	0x0800dcb5
 800dc18:	0800dcb5 	.word	0x0800dcb5
 800dc1c:	0800dcb5 	.word	0x0800dcb5
 800dc20:	0800dc95 	.word	0x0800dc95
 800dc24:	0800dcb5 	.word	0x0800dcb5
 800dc28:	0800dcb5 	.word	0x0800dcb5
 800dc2c:	0800dcb5 	.word	0x0800dcb5
 800dc30:	0800dcb5 	.word	0x0800dcb5
 800dc34:	0800dcb5 	.word	0x0800dcb5
 800dc38:	0800dcb5 	.word	0x0800dcb5
 800dc3c:	0800dcb5 	.word	0x0800dcb5
 800dc40:	0800dc9d 	.word	0x0800dc9d
 800dc44:	0800dcb5 	.word	0x0800dcb5
 800dc48:	0800dcb5 	.word	0x0800dcb5
 800dc4c:	0800dcb5 	.word	0x0800dcb5
 800dc50:	0800dcb5 	.word	0x0800dcb5
 800dc54:	0800dcb5 	.word	0x0800dcb5
 800dc58:	0800dcb5 	.word	0x0800dcb5
 800dc5c:	0800dcb5 	.word	0x0800dcb5
 800dc60:	0800dca5 	.word	0x0800dca5
 800dc64:	0800dcb5 	.word	0x0800dcb5
 800dc68:	0800dcb5 	.word	0x0800dcb5
 800dc6c:	0800dcb5 	.word	0x0800dcb5
 800dc70:	0800dcb5 	.word	0x0800dcb5
 800dc74:	0800dcb5 	.word	0x0800dcb5
 800dc78:	0800dcb5 	.word	0x0800dcb5
 800dc7c:	0800dcb5 	.word	0x0800dcb5
 800dc80:	0800dcad 	.word	0x0800dcad
 800dc84:	2301      	movs	r3, #1
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8a:	e0bc      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dc8c:	2304      	movs	r3, #4
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc92:	e0b8      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dc94:	2308      	movs	r3, #8
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc9a:	e0b4      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dc9c:	2310      	movs	r3, #16
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dca2:	e0b0      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dca4:	2320      	movs	r3, #32
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcaa:	e0ac      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dcac:	2340      	movs	r3, #64	@ 0x40
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb2:	e0a8      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dcb4:	2380      	movs	r3, #128	@ 0x80
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcba:	e0a4      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a8f      	ldr	r2, [pc, #572]	@ (800df00 <UART_SetConfig+0x6a0>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d130      	bne.n	800dd28 <UART_SetConfig+0x4c8>
 800dcc6:	4b8d      	ldr	r3, [pc, #564]	@ (800defc <UART_SetConfig+0x69c>)
 800dcc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcca:	f003 0307 	and.w	r3, r3, #7
 800dcce:	2b05      	cmp	r3, #5
 800dcd0:	d826      	bhi.n	800dd20 <UART_SetConfig+0x4c0>
 800dcd2:	a201      	add	r2, pc, #4	@ (adr r2, 800dcd8 <UART_SetConfig+0x478>)
 800dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd8:	0800dcf1 	.word	0x0800dcf1
 800dcdc:	0800dcf9 	.word	0x0800dcf9
 800dce0:	0800dd01 	.word	0x0800dd01
 800dce4:	0800dd09 	.word	0x0800dd09
 800dce8:	0800dd11 	.word	0x0800dd11
 800dcec:	0800dd19 	.word	0x0800dd19
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcf6:	e086      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dcf8:	2304      	movs	r3, #4
 800dcfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcfe:	e082      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd00:	2308      	movs	r3, #8
 800dd02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd06:	e07e      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd08:	2310      	movs	r3, #16
 800dd0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd0e:	e07a      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd10:	2320      	movs	r3, #32
 800dd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd16:	e076      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd18:	2340      	movs	r3, #64	@ 0x40
 800dd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd1e:	e072      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd20:	2380      	movs	r3, #128	@ 0x80
 800dd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd26:	e06e      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a75      	ldr	r2, [pc, #468]	@ (800df04 <UART_SetConfig+0x6a4>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d130      	bne.n	800dd94 <UART_SetConfig+0x534>
 800dd32:	4b72      	ldr	r3, [pc, #456]	@ (800defc <UART_SetConfig+0x69c>)
 800dd34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd36:	f003 0307 	and.w	r3, r3, #7
 800dd3a:	2b05      	cmp	r3, #5
 800dd3c:	d826      	bhi.n	800dd8c <UART_SetConfig+0x52c>
 800dd3e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd44 <UART_SetConfig+0x4e4>)
 800dd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd44:	0800dd5d 	.word	0x0800dd5d
 800dd48:	0800dd65 	.word	0x0800dd65
 800dd4c:	0800dd6d 	.word	0x0800dd6d
 800dd50:	0800dd75 	.word	0x0800dd75
 800dd54:	0800dd7d 	.word	0x0800dd7d
 800dd58:	0800dd85 	.word	0x0800dd85
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd62:	e050      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd64:	2304      	movs	r3, #4
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd6a:	e04c      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd6c:	2308      	movs	r3, #8
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd72:	e048      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd74:	2310      	movs	r3, #16
 800dd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd7a:	e044      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd7c:	2320      	movs	r3, #32
 800dd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd82:	e040      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd84:	2340      	movs	r3, #64	@ 0x40
 800dd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd8a:	e03c      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd8c:	2380      	movs	r3, #128	@ 0x80
 800dd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd92:	e038      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4a5b      	ldr	r2, [pc, #364]	@ (800df08 <UART_SetConfig+0x6a8>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d130      	bne.n	800de00 <UART_SetConfig+0x5a0>
 800dd9e:	4b57      	ldr	r3, [pc, #348]	@ (800defc <UART_SetConfig+0x69c>)
 800dda0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dda2:	f003 0307 	and.w	r3, r3, #7
 800dda6:	2b05      	cmp	r3, #5
 800dda8:	d826      	bhi.n	800ddf8 <UART_SetConfig+0x598>
 800ddaa:	a201      	add	r2, pc, #4	@ (adr r2, 800ddb0 <UART_SetConfig+0x550>)
 800ddac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb0:	0800ddc9 	.word	0x0800ddc9
 800ddb4:	0800ddd1 	.word	0x0800ddd1
 800ddb8:	0800ddd9 	.word	0x0800ddd9
 800ddbc:	0800dde1 	.word	0x0800dde1
 800ddc0:	0800dde9 	.word	0x0800dde9
 800ddc4:	0800ddf1 	.word	0x0800ddf1
 800ddc8:	2302      	movs	r3, #2
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddce:	e01a      	b.n	800de06 <UART_SetConfig+0x5a6>
 800ddd0:	2304      	movs	r3, #4
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddd6:	e016      	b.n	800de06 <UART_SetConfig+0x5a6>
 800ddd8:	2308      	movs	r3, #8
 800ddda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddde:	e012      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dde0:	2310      	movs	r3, #16
 800dde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dde6:	e00e      	b.n	800de06 <UART_SetConfig+0x5a6>
 800dde8:	2320      	movs	r3, #32
 800ddea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddee:	e00a      	b.n	800de06 <UART_SetConfig+0x5a6>
 800ddf0:	2340      	movs	r3, #64	@ 0x40
 800ddf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddf6:	e006      	b.n	800de06 <UART_SetConfig+0x5a6>
 800ddf8:	2380      	movs	r3, #128	@ 0x80
 800ddfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddfe:	e002      	b.n	800de06 <UART_SetConfig+0x5a6>
 800de00:	2380      	movs	r3, #128	@ 0x80
 800de02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a3f      	ldr	r2, [pc, #252]	@ (800df08 <UART_SetConfig+0x6a8>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	f040 80f8 	bne.w	800e002 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800de12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de16:	2b20      	cmp	r3, #32
 800de18:	dc46      	bgt.n	800dea8 <UART_SetConfig+0x648>
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	f2c0 8082 	blt.w	800df24 <UART_SetConfig+0x6c4>
 800de20:	3b02      	subs	r3, #2
 800de22:	2b1e      	cmp	r3, #30
 800de24:	d87e      	bhi.n	800df24 <UART_SetConfig+0x6c4>
 800de26:	a201      	add	r2, pc, #4	@ (adr r2, 800de2c <UART_SetConfig+0x5cc>)
 800de28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2c:	0800deaf 	.word	0x0800deaf
 800de30:	0800df25 	.word	0x0800df25
 800de34:	0800deb7 	.word	0x0800deb7
 800de38:	0800df25 	.word	0x0800df25
 800de3c:	0800df25 	.word	0x0800df25
 800de40:	0800df25 	.word	0x0800df25
 800de44:	0800dec7 	.word	0x0800dec7
 800de48:	0800df25 	.word	0x0800df25
 800de4c:	0800df25 	.word	0x0800df25
 800de50:	0800df25 	.word	0x0800df25
 800de54:	0800df25 	.word	0x0800df25
 800de58:	0800df25 	.word	0x0800df25
 800de5c:	0800df25 	.word	0x0800df25
 800de60:	0800df25 	.word	0x0800df25
 800de64:	0800ded7 	.word	0x0800ded7
 800de68:	0800df25 	.word	0x0800df25
 800de6c:	0800df25 	.word	0x0800df25
 800de70:	0800df25 	.word	0x0800df25
 800de74:	0800df25 	.word	0x0800df25
 800de78:	0800df25 	.word	0x0800df25
 800de7c:	0800df25 	.word	0x0800df25
 800de80:	0800df25 	.word	0x0800df25
 800de84:	0800df25 	.word	0x0800df25
 800de88:	0800df25 	.word	0x0800df25
 800de8c:	0800df25 	.word	0x0800df25
 800de90:	0800df25 	.word	0x0800df25
 800de94:	0800df25 	.word	0x0800df25
 800de98:	0800df25 	.word	0x0800df25
 800de9c:	0800df25 	.word	0x0800df25
 800dea0:	0800df25 	.word	0x0800df25
 800dea4:	0800df17 	.word	0x0800df17
 800dea8:	2b40      	cmp	r3, #64	@ 0x40
 800deaa:	d037      	beq.n	800df1c <UART_SetConfig+0x6bc>
 800deac:	e03a      	b.n	800df24 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800deae:	f7fc fce1 	bl	800a874 <HAL_RCCEx_GetD3PCLK1Freq>
 800deb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800deb4:	e03c      	b.n	800df30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800deba:	4618      	mov	r0, r3
 800debc:	f7fc fcf0 	bl	800a8a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dec4:	e034      	b.n	800df30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dec6:	f107 0318 	add.w	r3, r7, #24
 800deca:	4618      	mov	r0, r3
 800decc:	f7fc fe3c 	bl	800ab48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ded4:	e02c      	b.n	800df30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ded6:	4b09      	ldr	r3, [pc, #36]	@ (800defc <UART_SetConfig+0x69c>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f003 0320 	and.w	r3, r3, #32
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d016      	beq.n	800df10 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dee2:	4b06      	ldr	r3, [pc, #24]	@ (800defc <UART_SetConfig+0x69c>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	08db      	lsrs	r3, r3, #3
 800dee8:	f003 0303 	and.w	r3, r3, #3
 800deec:	4a07      	ldr	r2, [pc, #28]	@ (800df0c <UART_SetConfig+0x6ac>)
 800deee:	fa22 f303 	lsr.w	r3, r2, r3
 800def2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800def4:	e01c      	b.n	800df30 <UART_SetConfig+0x6d0>
 800def6:	bf00      	nop
 800def8:	40011400 	.word	0x40011400
 800defc:	58024400 	.word	0x58024400
 800df00:	40007800 	.word	0x40007800
 800df04:	40007c00 	.word	0x40007c00
 800df08:	58000c00 	.word	0x58000c00
 800df0c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800df10:	4b9d      	ldr	r3, [pc, #628]	@ (800e188 <UART_SetConfig+0x928>)
 800df12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df14:	e00c      	b.n	800df30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df16:	4b9d      	ldr	r3, [pc, #628]	@ (800e18c <UART_SetConfig+0x92c>)
 800df18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df1a:	e009      	b.n	800df30 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df22:	e005      	b.n	800df30 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800df24:	2300      	movs	r3, #0
 800df26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800df28:	2301      	movs	r3, #1
 800df2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800df2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df32:	2b00      	cmp	r3, #0
 800df34:	f000 81de 	beq.w	800e2f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df3c:	4a94      	ldr	r2, [pc, #592]	@ (800e190 <UART_SetConfig+0x930>)
 800df3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df42:	461a      	mov	r2, r3
 800df44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df46:	fbb3 f3f2 	udiv	r3, r3, r2
 800df4a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	685a      	ldr	r2, [r3, #4]
 800df50:	4613      	mov	r3, r2
 800df52:	005b      	lsls	r3, r3, #1
 800df54:	4413      	add	r3, r2
 800df56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df58:	429a      	cmp	r2, r3
 800df5a:	d305      	bcc.n	800df68 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df64:	429a      	cmp	r2, r3
 800df66:	d903      	bls.n	800df70 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800df68:	2301      	movs	r3, #1
 800df6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800df6e:	e1c1      	b.n	800e2f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df72:	2200      	movs	r2, #0
 800df74:	60bb      	str	r3, [r7, #8]
 800df76:	60fa      	str	r2, [r7, #12]
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df7c:	4a84      	ldr	r2, [pc, #528]	@ (800e190 <UART_SetConfig+0x930>)
 800df7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df82:	b29b      	uxth	r3, r3
 800df84:	2200      	movs	r2, #0
 800df86:	603b      	str	r3, [r7, #0]
 800df88:	607a      	str	r2, [r7, #4]
 800df8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df92:	f7f2 f9f5 	bl	8000380 <__aeabi_uldivmod>
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	4610      	mov	r0, r2
 800df9c:	4619      	mov	r1, r3
 800df9e:	f04f 0200 	mov.w	r2, #0
 800dfa2:	f04f 0300 	mov.w	r3, #0
 800dfa6:	020b      	lsls	r3, r1, #8
 800dfa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dfac:	0202      	lsls	r2, r0, #8
 800dfae:	6979      	ldr	r1, [r7, #20]
 800dfb0:	6849      	ldr	r1, [r1, #4]
 800dfb2:	0849      	lsrs	r1, r1, #1
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	4605      	mov	r5, r0
 800dfba:	eb12 0804 	adds.w	r8, r2, r4
 800dfbe:	eb43 0905 	adc.w	r9, r3, r5
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	469a      	mov	sl, r3
 800dfca:	4693      	mov	fp, r2
 800dfcc:	4652      	mov	r2, sl
 800dfce:	465b      	mov	r3, fp
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	4649      	mov	r1, r9
 800dfd4:	f7f2 f9d4 	bl	8000380 <__aeabi_uldivmod>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4613      	mov	r3, r2
 800dfde:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dfe6:	d308      	bcc.n	800dffa <UART_SetConfig+0x79a>
 800dfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfee:	d204      	bcs.n	800dffa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dff6:	60da      	str	r2, [r3, #12]
 800dff8:	e17c      	b.n	800e2f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e000:	e178      	b.n	800e2f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	69db      	ldr	r3, [r3, #28]
 800e006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e00a:	f040 80c5 	bne.w	800e198 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e00e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e012:	2b20      	cmp	r3, #32
 800e014:	dc48      	bgt.n	800e0a8 <UART_SetConfig+0x848>
 800e016:	2b00      	cmp	r3, #0
 800e018:	db7b      	blt.n	800e112 <UART_SetConfig+0x8b2>
 800e01a:	2b20      	cmp	r3, #32
 800e01c:	d879      	bhi.n	800e112 <UART_SetConfig+0x8b2>
 800e01e:	a201      	add	r2, pc, #4	@ (adr r2, 800e024 <UART_SetConfig+0x7c4>)
 800e020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e024:	0800e0af 	.word	0x0800e0af
 800e028:	0800e0b7 	.word	0x0800e0b7
 800e02c:	0800e113 	.word	0x0800e113
 800e030:	0800e113 	.word	0x0800e113
 800e034:	0800e0bf 	.word	0x0800e0bf
 800e038:	0800e113 	.word	0x0800e113
 800e03c:	0800e113 	.word	0x0800e113
 800e040:	0800e113 	.word	0x0800e113
 800e044:	0800e0cf 	.word	0x0800e0cf
 800e048:	0800e113 	.word	0x0800e113
 800e04c:	0800e113 	.word	0x0800e113
 800e050:	0800e113 	.word	0x0800e113
 800e054:	0800e113 	.word	0x0800e113
 800e058:	0800e113 	.word	0x0800e113
 800e05c:	0800e113 	.word	0x0800e113
 800e060:	0800e113 	.word	0x0800e113
 800e064:	0800e0df 	.word	0x0800e0df
 800e068:	0800e113 	.word	0x0800e113
 800e06c:	0800e113 	.word	0x0800e113
 800e070:	0800e113 	.word	0x0800e113
 800e074:	0800e113 	.word	0x0800e113
 800e078:	0800e113 	.word	0x0800e113
 800e07c:	0800e113 	.word	0x0800e113
 800e080:	0800e113 	.word	0x0800e113
 800e084:	0800e113 	.word	0x0800e113
 800e088:	0800e113 	.word	0x0800e113
 800e08c:	0800e113 	.word	0x0800e113
 800e090:	0800e113 	.word	0x0800e113
 800e094:	0800e113 	.word	0x0800e113
 800e098:	0800e113 	.word	0x0800e113
 800e09c:	0800e113 	.word	0x0800e113
 800e0a0:	0800e113 	.word	0x0800e113
 800e0a4:	0800e105 	.word	0x0800e105
 800e0a8:	2b40      	cmp	r3, #64	@ 0x40
 800e0aa:	d02e      	beq.n	800e10a <UART_SetConfig+0x8aa>
 800e0ac:	e031      	b.n	800e112 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0ae:	f7fb f969 	bl	8009384 <HAL_RCC_GetPCLK1Freq>
 800e0b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e0b4:	e033      	b.n	800e11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0b6:	f7fb f97b 	bl	80093b0 <HAL_RCC_GetPCLK2Freq>
 800e0ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e0bc:	e02f      	b.n	800e11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fc fbec 	bl	800a8a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0cc:	e027      	b.n	800e11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0ce:	f107 0318 	add.w	r3, r7, #24
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fc fd38 	bl	800ab48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0dc:	e01f      	b.n	800e11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0de:	4b2d      	ldr	r3, [pc, #180]	@ (800e194 <UART_SetConfig+0x934>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f003 0320 	and.w	r3, r3, #32
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d009      	beq.n	800e0fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0ea:	4b2a      	ldr	r3, [pc, #168]	@ (800e194 <UART_SetConfig+0x934>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	08db      	lsrs	r3, r3, #3
 800e0f0:	f003 0303 	and.w	r3, r3, #3
 800e0f4:	4a24      	ldr	r2, [pc, #144]	@ (800e188 <UART_SetConfig+0x928>)
 800e0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0fc:	e00f      	b.n	800e11e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e0fe:	4b22      	ldr	r3, [pc, #136]	@ (800e188 <UART_SetConfig+0x928>)
 800e100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e102:	e00c      	b.n	800e11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e104:	4b21      	ldr	r3, [pc, #132]	@ (800e18c <UART_SetConfig+0x92c>)
 800e106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e108:	e009      	b.n	800e11e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e10a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e110:	e005      	b.n	800e11e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e112:	2300      	movs	r3, #0
 800e114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e11c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 80e7 	beq.w	800e2f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e12a:	4a19      	ldr	r2, [pc, #100]	@ (800e190 <UART_SetConfig+0x930>)
 800e12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e130:	461a      	mov	r2, r3
 800e132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e134:	fbb3 f3f2 	udiv	r3, r3, r2
 800e138:	005a      	lsls	r2, r3, #1
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	085b      	lsrs	r3, r3, #1
 800e140:	441a      	add	r2, r3
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	fbb2 f3f3 	udiv	r3, r2, r3
 800e14a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14e:	2b0f      	cmp	r3, #15
 800e150:	d916      	bls.n	800e180 <UART_SetConfig+0x920>
 800e152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e158:	d212      	bcs.n	800e180 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	f023 030f 	bic.w	r3, r3, #15
 800e162:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e166:	085b      	lsrs	r3, r3, #1
 800e168:	b29b      	uxth	r3, r3
 800e16a:	f003 0307 	and.w	r3, r3, #7
 800e16e:	b29a      	uxth	r2, r3
 800e170:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e172:	4313      	orrs	r3, r2
 800e174:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e17c:	60da      	str	r2, [r3, #12]
 800e17e:	e0b9      	b.n	800e2f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e186:	e0b5      	b.n	800e2f4 <UART_SetConfig+0xa94>
 800e188:	03d09000 	.word	0x03d09000
 800e18c:	003d0900 	.word	0x003d0900
 800e190:	0801720c 	.word	0x0801720c
 800e194:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e198:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e19c:	2b20      	cmp	r3, #32
 800e19e:	dc49      	bgt.n	800e234 <UART_SetConfig+0x9d4>
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	db7c      	blt.n	800e29e <UART_SetConfig+0xa3e>
 800e1a4:	2b20      	cmp	r3, #32
 800e1a6:	d87a      	bhi.n	800e29e <UART_SetConfig+0xa3e>
 800e1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e1b0 <UART_SetConfig+0x950>)
 800e1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ae:	bf00      	nop
 800e1b0:	0800e23b 	.word	0x0800e23b
 800e1b4:	0800e243 	.word	0x0800e243
 800e1b8:	0800e29f 	.word	0x0800e29f
 800e1bc:	0800e29f 	.word	0x0800e29f
 800e1c0:	0800e24b 	.word	0x0800e24b
 800e1c4:	0800e29f 	.word	0x0800e29f
 800e1c8:	0800e29f 	.word	0x0800e29f
 800e1cc:	0800e29f 	.word	0x0800e29f
 800e1d0:	0800e25b 	.word	0x0800e25b
 800e1d4:	0800e29f 	.word	0x0800e29f
 800e1d8:	0800e29f 	.word	0x0800e29f
 800e1dc:	0800e29f 	.word	0x0800e29f
 800e1e0:	0800e29f 	.word	0x0800e29f
 800e1e4:	0800e29f 	.word	0x0800e29f
 800e1e8:	0800e29f 	.word	0x0800e29f
 800e1ec:	0800e29f 	.word	0x0800e29f
 800e1f0:	0800e26b 	.word	0x0800e26b
 800e1f4:	0800e29f 	.word	0x0800e29f
 800e1f8:	0800e29f 	.word	0x0800e29f
 800e1fc:	0800e29f 	.word	0x0800e29f
 800e200:	0800e29f 	.word	0x0800e29f
 800e204:	0800e29f 	.word	0x0800e29f
 800e208:	0800e29f 	.word	0x0800e29f
 800e20c:	0800e29f 	.word	0x0800e29f
 800e210:	0800e29f 	.word	0x0800e29f
 800e214:	0800e29f 	.word	0x0800e29f
 800e218:	0800e29f 	.word	0x0800e29f
 800e21c:	0800e29f 	.word	0x0800e29f
 800e220:	0800e29f 	.word	0x0800e29f
 800e224:	0800e29f 	.word	0x0800e29f
 800e228:	0800e29f 	.word	0x0800e29f
 800e22c:	0800e29f 	.word	0x0800e29f
 800e230:	0800e291 	.word	0x0800e291
 800e234:	2b40      	cmp	r3, #64	@ 0x40
 800e236:	d02e      	beq.n	800e296 <UART_SetConfig+0xa36>
 800e238:	e031      	b.n	800e29e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e23a:	f7fb f8a3 	bl	8009384 <HAL_RCC_GetPCLK1Freq>
 800e23e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e240:	e033      	b.n	800e2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e242:	f7fb f8b5 	bl	80093b0 <HAL_RCC_GetPCLK2Freq>
 800e246:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e248:	e02f      	b.n	800e2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e24a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fc fb26 	bl	800a8a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e258:	e027      	b.n	800e2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e25a:	f107 0318 	add.w	r3, r7, #24
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fc fc72 	bl	800ab48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e268:	e01f      	b.n	800e2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e26a:	4b2d      	ldr	r3, [pc, #180]	@ (800e320 <UART_SetConfig+0xac0>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f003 0320 	and.w	r3, r3, #32
 800e272:	2b00      	cmp	r3, #0
 800e274:	d009      	beq.n	800e28a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e276:	4b2a      	ldr	r3, [pc, #168]	@ (800e320 <UART_SetConfig+0xac0>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	08db      	lsrs	r3, r3, #3
 800e27c:	f003 0303 	and.w	r3, r3, #3
 800e280:	4a28      	ldr	r2, [pc, #160]	@ (800e324 <UART_SetConfig+0xac4>)
 800e282:	fa22 f303 	lsr.w	r3, r2, r3
 800e286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e288:	e00f      	b.n	800e2aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e28a:	4b26      	ldr	r3, [pc, #152]	@ (800e324 <UART_SetConfig+0xac4>)
 800e28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e28e:	e00c      	b.n	800e2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e290:	4b25      	ldr	r3, [pc, #148]	@ (800e328 <UART_SetConfig+0xac8>)
 800e292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e294:	e009      	b.n	800e2aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e29c:	e005      	b.n	800e2aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e2a8:	bf00      	nop
    }

    if (pclk != 0U)
 800e2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d021      	beq.n	800e2f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b4:	4a1d      	ldr	r2, [pc, #116]	@ (800e32c <UART_SetConfig+0xacc>)
 800e2b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2be:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	085b      	lsrs	r3, r3, #1
 800e2c8:	441a      	add	r2, r3
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d6:	2b0f      	cmp	r3, #15
 800e2d8:	d909      	bls.n	800e2ee <UART_SetConfig+0xa8e>
 800e2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2e0:	d205      	bcs.n	800e2ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	60da      	str	r2, [r3, #12]
 800e2ec:	e002      	b.n	800e2f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	2201      	movs	r2, #1
 800e300:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	2200      	movs	r2, #0
 800e308:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2200      	movs	r2, #0
 800e30e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e310:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e314:	4618      	mov	r0, r3
 800e316:	3748      	adds	r7, #72	@ 0x48
 800e318:	46bd      	mov	sp, r7
 800e31a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e31e:	bf00      	nop
 800e320:	58024400 	.word	0x58024400
 800e324:	03d09000 	.word	0x03d09000
 800e328:	003d0900 	.word	0x003d0900
 800e32c:	0801720c 	.word	0x0801720c

0800e330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e33c:	f003 0308 	and.w	r3, r3, #8
 800e340:	2b00      	cmp	r3, #0
 800e342:	d00a      	beq.n	800e35a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	430a      	orrs	r2, r1
 800e358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e35e:	f003 0301 	and.w	r3, r3, #1
 800e362:	2b00      	cmp	r3, #0
 800e364:	d00a      	beq.n	800e37c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	430a      	orrs	r2, r1
 800e37a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e380:	f003 0302 	and.w	r3, r3, #2
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00a      	beq.n	800e39e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	430a      	orrs	r2, r1
 800e39c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a2:	f003 0304 	and.w	r3, r3, #4
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00a      	beq.n	800e3c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	430a      	orrs	r2, r1
 800e3be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3c4:	f003 0310 	and.w	r3, r3, #16
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00a      	beq.n	800e3e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	430a      	orrs	r2, r1
 800e3e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3e6:	f003 0320 	and.w	r3, r3, #32
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00a      	beq.n	800e404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	430a      	orrs	r2, r1
 800e402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d01a      	beq.n	800e446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	430a      	orrs	r2, r1
 800e424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e42a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e42e:	d10a      	bne.n	800e446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	430a      	orrs	r2, r1
 800e444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e44a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00a      	beq.n	800e468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	430a      	orrs	r2, r1
 800e466:	605a      	str	r2, [r3, #4]
  }
}
 800e468:	bf00      	nop
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b098      	sub	sp, #96	@ 0x60
 800e478:	af02      	add	r7, sp, #8
 800e47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e484:	f7f4 fbb2 	bl	8002bec <HAL_GetTick>
 800e488:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f003 0308 	and.w	r3, r3, #8
 800e494:	2b08      	cmp	r3, #8
 800e496:	d12f      	bne.n	800e4f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e498:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f88e 	bl	800e5c8 <UART_WaitOnFlagUntilTimeout>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d022      	beq.n	800e4f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ba:	e853 3f00 	ldrex	r3, [r3]
 800e4be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e4c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4d8:	e841 2300 	strex	r3, r2, [r1]
 800e4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1e6      	bne.n	800e4b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2220      	movs	r2, #32
 800e4e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4f4:	2303      	movs	r3, #3
 800e4f6:	e063      	b.n	800e5c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f003 0304 	and.w	r3, r3, #4
 800e502:	2b04      	cmp	r3, #4
 800e504:	d149      	bne.n	800e59a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e506:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e50e:	2200      	movs	r2, #0
 800e510:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 f857 	bl	800e5c8 <UART_WaitOnFlagUntilTimeout>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d03c      	beq.n	800e59a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e528:	e853 3f00 	ldrex	r3, [r3]
 800e52c:	623b      	str	r3, [r7, #32]
   return(result);
 800e52e:	6a3b      	ldr	r3, [r7, #32]
 800e530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e53e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e540:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e546:	e841 2300 	strex	r3, r2, [r1]
 800e54a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1e6      	bne.n	800e520 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	3308      	adds	r3, #8
 800e558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	e853 3f00 	ldrex	r3, [r3]
 800e560:	60fb      	str	r3, [r7, #12]
   return(result);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f023 0301 	bic.w	r3, r3, #1
 800e568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	3308      	adds	r3, #8
 800e570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e572:	61fa      	str	r2, [r7, #28]
 800e574:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e576:	69b9      	ldr	r1, [r7, #24]
 800e578:	69fa      	ldr	r2, [r7, #28]
 800e57a:	e841 2300 	strex	r3, r2, [r1]
 800e57e:	617b      	str	r3, [r7, #20]
   return(result);
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1e5      	bne.n	800e552 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2220      	movs	r2, #32
 800e58a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e596:	2303      	movs	r3, #3
 800e598:	e012      	b.n	800e5c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2220      	movs	r2, #32
 800e59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2220      	movs	r2, #32
 800e5a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3758      	adds	r7, #88	@ 0x58
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	603b      	str	r3, [r7, #0]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5d8:	e04f      	b.n	800e67a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e0:	d04b      	beq.n	800e67a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5e2:	f7f4 fb03 	bl	8002bec <HAL_GetTick>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	69ba      	ldr	r2, [r7, #24]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d302      	bcc.n	800e5f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d101      	bne.n	800e5fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	e04e      	b.n	800e69a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f003 0304 	and.w	r3, r3, #4
 800e606:	2b00      	cmp	r3, #0
 800e608:	d037      	beq.n	800e67a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	2b80      	cmp	r3, #128	@ 0x80
 800e60e:	d034      	beq.n	800e67a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	2b40      	cmp	r3, #64	@ 0x40
 800e614:	d031      	beq.n	800e67a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	69db      	ldr	r3, [r3, #28]
 800e61c:	f003 0308 	and.w	r3, r3, #8
 800e620:	2b08      	cmp	r3, #8
 800e622:	d110      	bne.n	800e646 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2208      	movs	r2, #8
 800e62a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f000 f95b 	bl	800e8e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2208      	movs	r2, #8
 800e636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e642:	2301      	movs	r3, #1
 800e644:	e029      	b.n	800e69a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	69db      	ldr	r3, [r3, #28]
 800e64c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e654:	d111      	bne.n	800e67a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e65e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f000 f941 	bl	800e8e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2220      	movs	r2, #32
 800e66a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2200      	movs	r2, #0
 800e672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e676:	2303      	movs	r3, #3
 800e678:	e00f      	b.n	800e69a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	69da      	ldr	r2, [r3, #28]
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	4013      	ands	r3, r2
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	429a      	cmp	r2, r3
 800e688:	bf0c      	ite	eq
 800e68a:	2301      	moveq	r3, #1
 800e68c:	2300      	movne	r3, #0
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	461a      	mov	r2, r3
 800e692:	79fb      	ldrb	r3, [r7, #7]
 800e694:	429a      	cmp	r2, r3
 800e696:	d0a0      	beq.n	800e5da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e698:	2300      	movs	r3, #0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
	...

0800e6a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b0a3      	sub	sp, #140	@ 0x8c
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	68ba      	ldr	r2, [r7, #8]
 800e6b6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	88fa      	ldrh	r2, [r7, #6]
 800e6bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	88fa      	ldrh	r2, [r7, #6]
 800e6c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6d6:	d10e      	bne.n	800e6f6 <UART_Start_Receive_IT+0x52>
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d105      	bne.n	800e6ec <UART_Start_Receive_IT+0x48>
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e6e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e6ea:	e02d      	b.n	800e748 <UART_Start_Receive_IT+0xa4>
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	22ff      	movs	r2, #255	@ 0xff
 800e6f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e6f4:	e028      	b.n	800e748 <UART_Start_Receive_IT+0xa4>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d10d      	bne.n	800e71a <UART_Start_Receive_IT+0x76>
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d104      	bne.n	800e710 <UART_Start_Receive_IT+0x6c>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	22ff      	movs	r2, #255	@ 0xff
 800e70a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e70e:	e01b      	b.n	800e748 <UART_Start_Receive_IT+0xa4>
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	227f      	movs	r2, #127	@ 0x7f
 800e714:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e718:	e016      	b.n	800e748 <UART_Start_Receive_IT+0xa4>
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e722:	d10d      	bne.n	800e740 <UART_Start_Receive_IT+0x9c>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	691b      	ldr	r3, [r3, #16]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d104      	bne.n	800e736 <UART_Start_Receive_IT+0x92>
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	227f      	movs	r2, #127	@ 0x7f
 800e730:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e734:	e008      	b.n	800e748 <UART_Start_Receive_IT+0xa4>
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	223f      	movs	r2, #63	@ 0x3f
 800e73a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e73e:	e003      	b.n	800e748 <UART_Start_Receive_IT+0xa4>
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2200      	movs	r2, #0
 800e744:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2222      	movs	r2, #34	@ 0x22
 800e754:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3308      	adds	r3, #8
 800e75e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e762:	e853 3f00 	ldrex	r3, [r3]
 800e766:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e76a:	f043 0301 	orr.w	r3, r3, #1
 800e76e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3308      	adds	r3, #8
 800e778:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e77c:	673a      	str	r2, [r7, #112]	@ 0x70
 800e77e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e780:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e782:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e784:	e841 2300 	strex	r3, r2, [r1]
 800e788:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e78a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1e3      	bne.n	800e758 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e798:	d14f      	bne.n	800e83a <UART_Start_Receive_IT+0x196>
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e7a0:	88fa      	ldrh	r2, [r7, #6]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d349      	bcc.n	800e83a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	689b      	ldr	r3, [r3, #8]
 800e7aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7ae:	d107      	bne.n	800e7c0 <UART_Start_Receive_IT+0x11c>
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d103      	bne.n	800e7c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	4a47      	ldr	r2, [pc, #284]	@ (800e8d8 <UART_Start_Receive_IT+0x234>)
 800e7bc:	675a      	str	r2, [r3, #116]	@ 0x74
 800e7be:	e002      	b.n	800e7c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	4a46      	ldr	r2, [pc, #280]	@ (800e8dc <UART_Start_Receive_IT+0x238>)
 800e7c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	691b      	ldr	r3, [r3, #16]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d01a      	beq.n	800e804 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7d6:	e853 3f00 	ldrex	r3, [r3]
 800e7da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e7dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e7e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e7f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e7f2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e7f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e7f8:	e841 2300 	strex	r3, r2, [r1]
 800e7fc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e7fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e800:	2b00      	cmp	r3, #0
 800e802:	d1e4      	bne.n	800e7ce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	3308      	adds	r3, #8
 800e80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e80e:	e853 3f00 	ldrex	r3, [r3]
 800e812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e81a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	3308      	adds	r3, #8
 800e822:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e824:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e826:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e828:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e82a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e82c:	e841 2300 	strex	r3, r2, [r1]
 800e830:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e834:	2b00      	cmp	r3, #0
 800e836:	d1e5      	bne.n	800e804 <UART_Start_Receive_IT+0x160>
 800e838:	e046      	b.n	800e8c8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e842:	d107      	bne.n	800e854 <UART_Start_Receive_IT+0x1b0>
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	691b      	ldr	r3, [r3, #16]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d103      	bne.n	800e854 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	4a24      	ldr	r2, [pc, #144]	@ (800e8e0 <UART_Start_Receive_IT+0x23c>)
 800e850:	675a      	str	r2, [r3, #116]	@ 0x74
 800e852:	e002      	b.n	800e85a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	4a23      	ldr	r2, [pc, #140]	@ (800e8e4 <UART_Start_Receive_IT+0x240>)
 800e858:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d019      	beq.n	800e896 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e86a:	e853 3f00 	ldrex	r3, [r3]
 800e86e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e872:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e876:	677b      	str	r3, [r7, #116]	@ 0x74
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	461a      	mov	r2, r3
 800e87e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e880:	637b      	str	r3, [r7, #52]	@ 0x34
 800e882:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e884:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e888:	e841 2300 	strex	r3, r2, [r1]
 800e88c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1e6      	bne.n	800e862 <UART_Start_Receive_IT+0x1be>
 800e894:	e018      	b.n	800e8c8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	e853 3f00 	ldrex	r3, [r3]
 800e8a2:	613b      	str	r3, [r7, #16]
   return(result);
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	f043 0320 	orr.w	r3, r3, #32
 800e8aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e8b4:	623b      	str	r3, [r7, #32]
 800e8b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b8:	69f9      	ldr	r1, [r7, #28]
 800e8ba:	6a3a      	ldr	r2, [r7, #32]
 800e8bc:	e841 2300 	strex	r3, r2, [r1]
 800e8c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1e6      	bne.n	800e896 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	378c      	adds	r7, #140	@ 0x8c
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	0800f105 	.word	0x0800f105
 800e8dc:	0800eda1 	.word	0x0800eda1
 800e8e0:	0800ebe9 	.word	0x0800ebe9
 800e8e4:	0800ea31 	.word	0x0800ea31

0800e8e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b095      	sub	sp, #84	@ 0x54
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8f8:	e853 3f00 	ldrex	r3, [r3]
 800e8fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	461a      	mov	r2, r3
 800e90c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e90e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e910:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e916:	e841 2300 	strex	r3, r2, [r1]
 800e91a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1e6      	bne.n	800e8f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	3308      	adds	r3, #8
 800e928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92a:	6a3b      	ldr	r3, [r7, #32]
 800e92c:	e853 3f00 	ldrex	r3, [r3]
 800e930:	61fb      	str	r3, [r7, #28]
   return(result);
 800e932:	69fa      	ldr	r2, [r7, #28]
 800e934:	4b1e      	ldr	r3, [pc, #120]	@ (800e9b0 <UART_EndRxTransfer+0xc8>)
 800e936:	4013      	ands	r3, r2
 800e938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3308      	adds	r3, #8
 800e940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e94a:	e841 2300 	strex	r3, r2, [r1]
 800e94e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1e5      	bne.n	800e922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d118      	bne.n	800e990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	e853 3f00 	ldrex	r3, [r3]
 800e96a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	f023 0310 	bic.w	r3, r3, #16
 800e972:	647b      	str	r3, [r7, #68]	@ 0x44
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	461a      	mov	r2, r3
 800e97a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e97c:	61bb      	str	r3, [r7, #24]
 800e97e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e980:	6979      	ldr	r1, [r7, #20]
 800e982:	69ba      	ldr	r2, [r7, #24]
 800e984:	e841 2300 	strex	r3, r2, [r1]
 800e988:	613b      	str	r3, [r7, #16]
   return(result);
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1e6      	bne.n	800e95e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2220      	movs	r2, #32
 800e994:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e9a4:	bf00      	nop
 800e9a6:	3754      	adds	r7, #84	@ 0x54
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	effffffe 	.word	0xeffffffe

0800e9b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f7fe ff32 	bl	800d834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9d0:	bf00      	nop
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b088      	sub	sp, #32
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	e853 3f00 	ldrex	r3, [r3]
 800e9ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9f4:	61fb      	str	r3, [r7, #28]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	61bb      	str	r3, [r7, #24]
 800ea00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea02:	6979      	ldr	r1, [r7, #20]
 800ea04:	69ba      	ldr	r2, [r7, #24]
 800ea06:	e841 2300 	strex	r3, r2, [r1]
 800ea0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1e6      	bne.n	800e9e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2220      	movs	r2, #32
 800ea16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7fe fefd 	bl	800d820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea26:	bf00      	nop
 800ea28:	3720      	adds	r7, #32
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
	...

0800ea30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b09c      	sub	sp, #112	@ 0x70
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ea3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea48:	2b22      	cmp	r3, #34	@ 0x22
 800ea4a:	f040 80be 	bne.w	800ebca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ea58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ea5c:	b2d9      	uxtb	r1, r3
 800ea5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea68:	400a      	ands	r2, r1
 800ea6a:	b2d2      	uxtb	r2, r2
 800ea6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea72:	1c5a      	adds	r2, r3, #1
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	3b01      	subs	r3, #1
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	f040 80a1 	bne.w	800ebda <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaa0:	e853 3f00 	ldrex	r3, [r3]
 800eaa4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eaa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eaa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eaac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	461a      	mov	r2, r3
 800eab4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eab6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eab8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eabc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eabe:	e841 2300 	strex	r3, r2, [r1]
 800eac2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1e6      	bne.n	800ea98 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	3308      	adds	r3, #8
 800ead0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead4:	e853 3f00 	ldrex	r3, [r3]
 800ead8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eadc:	f023 0301 	bic.w	r3, r3, #1
 800eae0:	667b      	str	r3, [r7, #100]	@ 0x64
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	3308      	adds	r3, #8
 800eae8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eaea:	647a      	str	r2, [r7, #68]	@ 0x44
 800eaec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eaf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eaf2:	e841 2300 	strex	r3, r2, [r1]
 800eaf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eaf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1e5      	bne.n	800eaca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2220      	movs	r2, #32
 800eb02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	4a33      	ldr	r2, [pc, #204]	@ (800ebe4 <UART_RxISR_8BIT+0x1b4>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d01f      	beq.n	800eb5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d018      	beq.n	800eb5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb32:	e853 3f00 	ldrex	r3, [r3]
 800eb36:	623b      	str	r3, [r7, #32]
   return(result);
 800eb38:	6a3b      	ldr	r3, [r7, #32]
 800eb3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eb3e:	663b      	str	r3, [r7, #96]	@ 0x60
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	461a      	mov	r2, r3
 800eb46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb48:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb50:	e841 2300 	strex	r3, r2, [r1]
 800eb54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e6      	bne.n	800eb2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d12e      	bne.n	800ebc2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	e853 3f00 	ldrex	r3, [r3]
 800eb76:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f023 0310 	bic.w	r3, r3, #16
 800eb7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	461a      	mov	r2, r3
 800eb86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb88:	61fb      	str	r3, [r7, #28]
 800eb8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8c:	69b9      	ldr	r1, [r7, #24]
 800eb8e:	69fa      	ldr	r2, [r7, #28]
 800eb90:	e841 2300 	strex	r3, r2, [r1]
 800eb94:	617b      	str	r3, [r7, #20]
   return(result);
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d1e6      	bne.n	800eb6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	69db      	ldr	r3, [r3, #28]
 800eba2:	f003 0310 	and.w	r3, r3, #16
 800eba6:	2b10      	cmp	r3, #16
 800eba8:	d103      	bne.n	800ebb2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2210      	movs	r2, #16
 800ebb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7fe fe44 	bl	800d848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebc0:	e00b      	b.n	800ebda <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7f2 fa8a 	bl	80010dc <HAL_UART_RxCpltCallback>
}
 800ebc8:	e007      	b.n	800ebda <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	699a      	ldr	r2, [r3, #24]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f042 0208 	orr.w	r2, r2, #8
 800ebd8:	619a      	str	r2, [r3, #24]
}
 800ebda:	bf00      	nop
 800ebdc:	3770      	adds	r7, #112	@ 0x70
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	58000c00 	.word	0x58000c00

0800ebe8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b09c      	sub	sp, #112	@ 0x70
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ebf6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec00:	2b22      	cmp	r3, #34	@ 0x22
 800ec02:	f040 80be 	bne.w	800ed82 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec14:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ec16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ec1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ec1e:	4013      	ands	r3, r2
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ec24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec2a:	1c9a      	adds	r2, r3, #2
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	3b01      	subs	r3, #1
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f040 80a1 	bne.w	800ed92 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec58:	e853 3f00 	ldrex	r3, [r3]
 800ec5c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ec5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec64:	667b      	str	r3, [r7, #100]	@ 0x64
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec70:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ec74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec76:	e841 2300 	strex	r3, r2, [r1]
 800ec7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ec7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1e6      	bne.n	800ec50 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	3308      	adds	r3, #8
 800ec88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec8c:	e853 3f00 	ldrex	r3, [r3]
 800ec90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ec92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec94:	f023 0301 	bic.w	r3, r3, #1
 800ec98:	663b      	str	r3, [r7, #96]	@ 0x60
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	3308      	adds	r3, #8
 800eca0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eca2:	643a      	str	r2, [r7, #64]	@ 0x40
 800eca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eca8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecaa:	e841 2300 	strex	r3, r2, [r1]
 800ecae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d1e5      	bne.n	800ec82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2220      	movs	r2, #32
 800ecba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4a33      	ldr	r2, [pc, #204]	@ (800ed9c <UART_RxISR_16BIT+0x1b4>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d01f      	beq.n	800ed14 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d018      	beq.n	800ed14 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ece8:	6a3b      	ldr	r3, [r7, #32]
 800ecea:	e853 3f00 	ldrex	r3, [r3]
 800ecee:	61fb      	str	r3, [r7, #28]
   return(result);
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ecf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed02:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed08:	e841 2300 	strex	r3, r2, [r1]
 800ed0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1e6      	bne.n	800ece2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d12e      	bne.n	800ed7a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	e853 3f00 	ldrex	r3, [r3]
 800ed2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	f023 0310 	bic.w	r3, r3, #16
 800ed36:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed40:	61bb      	str	r3, [r7, #24]
 800ed42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed44:	6979      	ldr	r1, [r7, #20]
 800ed46:	69ba      	ldr	r2, [r7, #24]
 800ed48:	e841 2300 	strex	r3, r2, [r1]
 800ed4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1e6      	bne.n	800ed22 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	69db      	ldr	r3, [r3, #28]
 800ed5a:	f003 0310 	and.w	r3, r3, #16
 800ed5e:	2b10      	cmp	r3, #16
 800ed60:	d103      	bne.n	800ed6a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2210      	movs	r2, #16
 800ed68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed70:	4619      	mov	r1, r3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f7fe fd68 	bl	800d848 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed78:	e00b      	b.n	800ed92 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7f2 f9ae 	bl	80010dc <HAL_UART_RxCpltCallback>
}
 800ed80:	e007      	b.n	800ed92 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	699a      	ldr	r2, [r3, #24]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f042 0208 	orr.w	r2, r2, #8
 800ed90:	619a      	str	r2, [r3, #24]
}
 800ed92:	bf00      	nop
 800ed94:	3770      	adds	r7, #112	@ 0x70
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	58000c00 	.word	0x58000c00

0800eda0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b0ac      	sub	sp, #176	@ 0xb0
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edae:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	69db      	ldr	r3, [r3, #28]
 800edb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800edd6:	2b22      	cmp	r3, #34	@ 0x22
 800edd8:	f040 8181 	bne.w	800f0de <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ede2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ede6:	e124      	b.n	800f032 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edee:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800edf2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800edf6:	b2d9      	uxtb	r1, r3
 800edf8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800edfc:	b2da      	uxtb	r2, r3
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee02:	400a      	ands	r2, r1
 800ee04:	b2d2      	uxtb	r2, r2
 800ee06:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee0c:	1c5a      	adds	r2, r3, #1
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	69db      	ldr	r3, [r3, #28]
 800ee2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ee2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee32:	f003 0307 	and.w	r3, r3, #7
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d053      	beq.n	800eee2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ee3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee3e:	f003 0301 	and.w	r3, r3, #1
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d011      	beq.n	800ee6a <UART_RxISR_8BIT_FIFOEN+0xca>
 800ee46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00b      	beq.n	800ee6a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2201      	movs	r2, #1
 800ee58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee60:	f043 0201 	orr.w	r2, r3, #1
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee6e:	f003 0302 	and.w	r3, r3, #2
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d011      	beq.n	800ee9a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ee76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee7a:	f003 0301 	and.w	r3, r3, #1
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d00b      	beq.n	800ee9a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2202      	movs	r2, #2
 800ee88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee90:	f043 0204 	orr.w	r2, r3, #4
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee9e:	f003 0304 	and.w	r3, r3, #4
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d011      	beq.n	800eeca <UART_RxISR_8BIT_FIFOEN+0x12a>
 800eea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eeaa:	f003 0301 	and.w	r3, r3, #1
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00b      	beq.n	800eeca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2204      	movs	r2, #4
 800eeb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eec0:	f043 0202 	orr.w	r2, r3, #2
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d006      	beq.n	800eee2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f7fe fcad 	bl	800d834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2200      	movs	r2, #0
 800eede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	f040 80a1 	bne.w	800f032 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eef8:	e853 3f00 	ldrex	r3, [r3]
 800eefc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800eefe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ef12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef14:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef16:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ef18:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ef1a:	e841 2300 	strex	r3, r2, [r1]
 800ef1e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ef20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1e4      	bne.n	800eef0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef30:	e853 3f00 	ldrex	r3, [r3]
 800ef34:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ef36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ef38:	4b6f      	ldr	r3, [pc, #444]	@ (800f0f8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	3308      	adds	r3, #8
 800ef46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ef4a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ef4c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ef50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ef52:	e841 2300 	strex	r3, r2, [r1]
 800ef56:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ef58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1e3      	bne.n	800ef26 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2220      	movs	r2, #32
 800ef62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4a61      	ldr	r2, [pc, #388]	@ (800f0fc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d021      	beq.n	800efc0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	685b      	ldr	r3, [r3, #4]
 800ef82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d01a      	beq.n	800efc0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef92:	e853 3f00 	ldrex	r3, [r3]
 800ef96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ef98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ef9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	461a      	mov	r2, r3
 800efa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800efac:	657b      	str	r3, [r7, #84]	@ 0x54
 800efae:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efb0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800efb2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800efb4:	e841 2300 	strex	r3, r2, [r1]
 800efb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800efba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1e4      	bne.n	800ef8a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d130      	bne.n	800f02a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efd6:	e853 3f00 	ldrex	r3, [r3]
 800efda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800efdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efde:	f023 0310 	bic.w	r3, r3, #16
 800efe2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	461a      	mov	r2, r3
 800efec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eff0:	643b      	str	r3, [r7, #64]	@ 0x40
 800eff2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eff6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eff8:	e841 2300 	strex	r3, r2, [r1]
 800effc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800effe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1e4      	bne.n	800efce <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	69db      	ldr	r3, [r3, #28]
 800f00a:	f003 0310 	and.w	r3, r3, #16
 800f00e:	2b10      	cmp	r3, #16
 800f010:	d103      	bne.n	800f01a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2210      	movs	r2, #16
 800f018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f020:	4619      	mov	r1, r3
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f7fe fc10 	bl	800d848 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f028:	e00e      	b.n	800f048 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f7f2 f856 	bl	80010dc <HAL_UART_RxCpltCallback>
        break;
 800f030:	e00a      	b.n	800f048 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f032:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f036:	2b00      	cmp	r3, #0
 800f038:	d006      	beq.n	800f048 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800f03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f03e:	f003 0320 	and.w	r3, r3, #32
 800f042:	2b00      	cmp	r3, #0
 800f044:	f47f aed0 	bne.w	800ede8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f04e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f052:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f056:	2b00      	cmp	r3, #0
 800f058:	d049      	beq.n	800f0ee <UART_RxISR_8BIT_FIFOEN+0x34e>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f060:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f064:	429a      	cmp	r2, r3
 800f066:	d242      	bcs.n	800f0ee <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	3308      	adds	r3, #8
 800f06e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	e853 3f00 	ldrex	r3, [r3]
 800f076:	61fb      	str	r3, [r7, #28]
   return(result);
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f07e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3308      	adds	r3, #8
 800f088:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f08c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f08e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f094:	e841 2300 	strex	r3, r2, [r1]
 800f098:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d1e3      	bne.n	800f068 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4a17      	ldr	r2, [pc, #92]	@ (800f100 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800f0a4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	e853 3f00 	ldrex	r3, [r3]
 800f0b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	f043 0320 	orr.w	r3, r3, #32
 800f0ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f0c8:	61bb      	str	r3, [r7, #24]
 800f0ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0cc:	6979      	ldr	r1, [r7, #20]
 800f0ce:	69ba      	ldr	r2, [r7, #24]
 800f0d0:	e841 2300 	strex	r3, r2, [r1]
 800f0d4:	613b      	str	r3, [r7, #16]
   return(result);
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d1e4      	bne.n	800f0a6 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f0dc:	e007      	b.n	800f0ee <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	699a      	ldr	r2, [r3, #24]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f042 0208 	orr.w	r2, r2, #8
 800f0ec:	619a      	str	r2, [r3, #24]
}
 800f0ee:	bf00      	nop
 800f0f0:	37b0      	adds	r7, #176	@ 0xb0
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	effffffe 	.word	0xeffffffe
 800f0fc:	58000c00 	.word	0x58000c00
 800f100:	0800ea31 	.word	0x0800ea31

0800f104 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b0ae      	sub	sp, #184	@ 0xb8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f112:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	69db      	ldr	r3, [r3, #28]
 800f11c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f13a:	2b22      	cmp	r3, #34	@ 0x22
 800f13c:	f040 8185 	bne.w	800f44a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f146:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f14a:	e128      	b.n	800f39e <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f152:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f15a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f15e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f162:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f166:	4013      	ands	r3, r2
 800f168:	b29a      	uxth	r2, r3
 800f16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f16e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f174:	1c9a      	adds	r2, r3, #2
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f180:	b29b      	uxth	r3, r3
 800f182:	3b01      	subs	r3, #1
 800f184:	b29a      	uxth	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	69db      	ldr	r3, [r3, #28]
 800f192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f19a:	f003 0307 	and.w	r3, r3, #7
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d053      	beq.n	800f24a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f1a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f1a6:	f003 0301 	and.w	r3, r3, #1
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d011      	beq.n	800f1d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f1ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00b      	beq.n	800f1d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1c8:	f043 0201 	orr.w	r2, r3, #1
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f1d6:	f003 0302 	and.w	r3, r3, #2
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d011      	beq.n	800f202 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f1de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f1e2:	f003 0301 	and.w	r3, r3, #1
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00b      	beq.n	800f202 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2202      	movs	r2, #2
 800f1f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1f8:	f043 0204 	orr.w	r2, r3, #4
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f206:	f003 0304 	and.w	r3, r3, #4
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d011      	beq.n	800f232 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f20e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f212:	f003 0301 	and.w	r3, r3, #1
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00b      	beq.n	800f232 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2204      	movs	r2, #4
 800f220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f228:	f043 0202 	orr.w	r2, r3, #2
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d006      	beq.n	800f24a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7fe faf9 	bl	800d834 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f250:	b29b      	uxth	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	f040 80a3 	bne.w	800f39e <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f260:	e853 3f00 	ldrex	r3, [r3]
 800f264:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f26c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	461a      	mov	r2, r3
 800f276:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f27a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f27e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f280:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f282:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f286:	e841 2300 	strex	r3, r2, [r1]
 800f28a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f28c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1e2      	bne.n	800f258 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	3308      	adds	r3, #8
 800f298:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f29a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f29c:	e853 3f00 	ldrex	r3, [r3]
 800f2a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f2a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f2a4:	4b6f      	ldr	r3, [pc, #444]	@ (800f464 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f2a6:	4013      	ands	r3, r2
 800f2a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	3308      	adds	r3, #8
 800f2b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f2b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f2b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f2bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f2be:	e841 2300 	strex	r3, r2, [r1]
 800f2c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f2c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d1e3      	bne.n	800f292 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2220      	movs	r2, #32
 800f2ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a61      	ldr	r2, [pc, #388]	@ (800f468 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d021      	beq.n	800f32c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d01a      	beq.n	800f32c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2fe:	e853 3f00 	ldrex	r3, [r3]
 800f302:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f306:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f30a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	461a      	mov	r2, r3
 800f314:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f318:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f31a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f31e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f320:	e841 2300 	strex	r3, r2, [r1]
 800f324:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1e4      	bne.n	800f2f6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f330:	2b01      	cmp	r3, #1
 800f332:	d130      	bne.n	800f396 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f342:	e853 3f00 	ldrex	r3, [r3]
 800f346:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f34a:	f023 0310 	bic.w	r3, r3, #16
 800f34e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	461a      	mov	r2, r3
 800f358:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f35c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f35e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f364:	e841 2300 	strex	r3, r2, [r1]
 800f368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1e4      	bne.n	800f33a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	69db      	ldr	r3, [r3, #28]
 800f376:	f003 0310 	and.w	r3, r3, #16
 800f37a:	2b10      	cmp	r3, #16
 800f37c:	d103      	bne.n	800f386 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2210      	movs	r2, #16
 800f384:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f38c:	4619      	mov	r1, r3
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7fe fa5a 	bl	800d848 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f394:	e00e      	b.n	800f3b4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f7f1 fea0 	bl	80010dc <HAL_UART_RxCpltCallback>
        break;
 800f39c:	e00a      	b.n	800f3b4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f39e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d006      	beq.n	800f3b4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800f3a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3aa:	f003 0320 	and.w	r3, r3, #32
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	f47f aecc 	bne.w	800f14c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3ba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f3be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d049      	beq.n	800f45a <UART_RxISR_16BIT_FIFOEN+0x356>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f3cc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d242      	bcs.n	800f45a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	3308      	adds	r3, #8
 800f3da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3de:	e853 3f00 	ldrex	r3, [r3]
 800f3e2:	623b      	str	r3, [r7, #32]
   return(result);
 800f3e4:	6a3b      	ldr	r3, [r7, #32]
 800f3e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f3ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	3308      	adds	r3, #8
 800f3f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f3f8:	633a      	str	r2, [r7, #48]	@ 0x30
 800f3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f3fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f400:	e841 2300 	strex	r3, r2, [r1]
 800f404:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d1e3      	bne.n	800f3d4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	4a17      	ldr	r2, [pc, #92]	@ (800f46c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f410:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	e853 3f00 	ldrex	r3, [r3]
 800f41e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f043 0320 	orr.w	r3, r3, #32
 800f426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	461a      	mov	r2, r3
 800f430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f434:	61fb      	str	r3, [r7, #28]
 800f436:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f438:	69b9      	ldr	r1, [r7, #24]
 800f43a:	69fa      	ldr	r2, [r7, #28]
 800f43c:	e841 2300 	strex	r3, r2, [r1]
 800f440:	617b      	str	r3, [r7, #20]
   return(result);
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d1e4      	bne.n	800f412 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f448:	e007      	b.n	800f45a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	699a      	ldr	r2, [r3, #24]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f042 0208 	orr.w	r2, r2, #8
 800f458:	619a      	str	r2, [r3, #24]
}
 800f45a:	bf00      	nop
 800f45c:	37b8      	adds	r7, #184	@ 0xb8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	effffffe 	.word	0xeffffffe
 800f468:	58000c00 	.word	0x58000c00
 800f46c:	0800ebe9 	.word	0x0800ebe9

0800f470 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f478:	bf00      	nop
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f48c:	bf00      	nop
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f4a0:	bf00      	nop
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b085      	sub	sp, #20
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d101      	bne.n	800f4c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800f4be:	2302      	movs	r3, #2
 800f4c0:	e027      	b.n	800f512 <HAL_UARTEx_DisableFifoMode+0x66>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2224      	movs	r2, #36	@ 0x24
 800f4ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f022 0201 	bic.w	r2, r2, #1
 800f4e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f4f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	68fa      	ldr	r2, [r7, #12]
 800f4fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2220      	movs	r2, #32
 800f504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3714      	adds	r7, #20
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr

0800f51e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f51e:	b580      	push	{r7, lr}
 800f520:	b084      	sub	sp, #16
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
 800f526:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d101      	bne.n	800f536 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f532:	2302      	movs	r3, #2
 800f534:	e02d      	b.n	800f592 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2201      	movs	r2, #1
 800f53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2224      	movs	r2, #36	@ 0x24
 800f542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f022 0201 	bic.w	r2, r2, #1
 800f55c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	430a      	orrs	r2, r1
 800f570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 f850 	bl	800f618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2220      	movs	r2, #32
 800f584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b084      	sub	sp, #16
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d101      	bne.n	800f5b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	e02d      	b.n	800f60e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2224      	movs	r2, #36	@ 0x24
 800f5be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f022 0201 	bic.w	r2, r2, #1
 800f5d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	689b      	ldr	r3, [r3, #8]
 800f5e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	683a      	ldr	r2, [r7, #0]
 800f5ea:	430a      	orrs	r2, r1
 800f5ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 f812 	bl	800f618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2220      	movs	r2, #32
 800f600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f60c:	2300      	movs	r3, #0
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
	...

0800f618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f618:	b480      	push	{r7}
 800f61a:	b085      	sub	sp, #20
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f624:	2b00      	cmp	r3, #0
 800f626:	d108      	bne.n	800f63a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2201      	movs	r2, #1
 800f634:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f638:	e031      	b.n	800f69e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f63a:	2310      	movs	r3, #16
 800f63c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f63e:	2310      	movs	r3, #16
 800f640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	0e5b      	lsrs	r3, r3, #25
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	f003 0307 	and.w	r3, r3, #7
 800f650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	0f5b      	lsrs	r3, r3, #29
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	f003 0307 	and.w	r3, r3, #7
 800f660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f662:	7bbb      	ldrb	r3, [r7, #14]
 800f664:	7b3a      	ldrb	r2, [r7, #12]
 800f666:	4911      	ldr	r1, [pc, #68]	@ (800f6ac <UARTEx_SetNbDataToProcess+0x94>)
 800f668:	5c8a      	ldrb	r2, [r1, r2]
 800f66a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f66e:	7b3a      	ldrb	r2, [r7, #12]
 800f670:	490f      	ldr	r1, [pc, #60]	@ (800f6b0 <UARTEx_SetNbDataToProcess+0x98>)
 800f672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f674:	fb93 f3f2 	sdiv	r3, r3, r2
 800f678:	b29a      	uxth	r2, r3
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f680:	7bfb      	ldrb	r3, [r7, #15]
 800f682:	7b7a      	ldrb	r2, [r7, #13]
 800f684:	4909      	ldr	r1, [pc, #36]	@ (800f6ac <UARTEx_SetNbDataToProcess+0x94>)
 800f686:	5c8a      	ldrb	r2, [r1, r2]
 800f688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f68c:	7b7a      	ldrb	r2, [r7, #13]
 800f68e:	4908      	ldr	r1, [pc, #32]	@ (800f6b0 <UARTEx_SetNbDataToProcess+0x98>)
 800f690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f692:	fb93 f3f2 	sdiv	r3, r3, r2
 800f696:	b29a      	uxth	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f69e:	bf00      	nop
 800f6a0:	3714      	adds	r7, #20
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	08017224 	.word	0x08017224
 800f6b0:	0801722c 	.word	0x0801722c

0800f6b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d121      	bne.n	800f70a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	4b27      	ldr	r3, [pc, #156]	@ (800f768 <FMC_SDRAM_Init+0xb4>)
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	683a      	ldr	r2, [r7, #0]
 800f6d0:	6851      	ldr	r1, [r2, #4]
 800f6d2:	683a      	ldr	r2, [r7, #0]
 800f6d4:	6892      	ldr	r2, [r2, #8]
 800f6d6:	4311      	orrs	r1, r2
 800f6d8:	683a      	ldr	r2, [r7, #0]
 800f6da:	68d2      	ldr	r2, [r2, #12]
 800f6dc:	4311      	orrs	r1, r2
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	6912      	ldr	r2, [r2, #16]
 800f6e2:	4311      	orrs	r1, r2
 800f6e4:	683a      	ldr	r2, [r7, #0]
 800f6e6:	6952      	ldr	r2, [r2, #20]
 800f6e8:	4311      	orrs	r1, r2
 800f6ea:	683a      	ldr	r2, [r7, #0]
 800f6ec:	6992      	ldr	r2, [r2, #24]
 800f6ee:	4311      	orrs	r1, r2
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	69d2      	ldr	r2, [r2, #28]
 800f6f4:	4311      	orrs	r1, r2
 800f6f6:	683a      	ldr	r2, [r7, #0]
 800f6f8:	6a12      	ldr	r2, [r2, #32]
 800f6fa:	4311      	orrs	r1, r2
 800f6fc:	683a      	ldr	r2, [r7, #0]
 800f6fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f700:	430a      	orrs	r2, r1
 800f702:	431a      	orrs	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	e026      	b.n	800f758 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	69d9      	ldr	r1, [r3, #28]
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	6a1b      	ldr	r3, [r3, #32]
 800f71a:	4319      	orrs	r1, r3
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f720:	430b      	orrs	r3, r1
 800f722:	431a      	orrs	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	685a      	ldr	r2, [r3, #4]
 800f72c:	4b0e      	ldr	r3, [pc, #56]	@ (800f768 <FMC_SDRAM_Init+0xb4>)
 800f72e:	4013      	ands	r3, r2
 800f730:	683a      	ldr	r2, [r7, #0]
 800f732:	6851      	ldr	r1, [r2, #4]
 800f734:	683a      	ldr	r2, [r7, #0]
 800f736:	6892      	ldr	r2, [r2, #8]
 800f738:	4311      	orrs	r1, r2
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	68d2      	ldr	r2, [r2, #12]
 800f73e:	4311      	orrs	r1, r2
 800f740:	683a      	ldr	r2, [r7, #0]
 800f742:	6912      	ldr	r2, [r2, #16]
 800f744:	4311      	orrs	r1, r2
 800f746:	683a      	ldr	r2, [r7, #0]
 800f748:	6952      	ldr	r2, [r2, #20]
 800f74a:	4311      	orrs	r1, r2
 800f74c:	683a      	ldr	r2, [r7, #0]
 800f74e:	6992      	ldr	r2, [r2, #24]
 800f750:	430a      	orrs	r2, r1
 800f752:	431a      	orrs	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	370c      	adds	r7, #12
 800f75e:	46bd      	mov	sp, r7
 800f760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	ffff8000 	.word	0xffff8000

0800f76c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d128      	bne.n	800f7d0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	689b      	ldr	r3, [r3, #8]
 800f782:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	1e59      	subs	r1, r3, #1
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	3b01      	subs	r3, #1
 800f792:	011b      	lsls	r3, r3, #4
 800f794:	4319      	orrs	r1, r3
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	3b01      	subs	r3, #1
 800f79c:	021b      	lsls	r3, r3, #8
 800f79e:	4319      	orrs	r1, r3
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	031b      	lsls	r3, r3, #12
 800f7a8:	4319      	orrs	r1, r3
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	041b      	lsls	r3, r3, #16
 800f7b2:	4319      	orrs	r1, r3
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	051b      	lsls	r3, r3, #20
 800f7bc:	4319      	orrs	r1, r3
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	699b      	ldr	r3, [r3, #24]
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	061b      	lsls	r3, r3, #24
 800f7c6:	430b      	orrs	r3, r1
 800f7c8:	431a      	orrs	r2, r3
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	609a      	str	r2, [r3, #8]
 800f7ce:	e02d      	b.n	800f82c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	689a      	ldr	r2, [r3, #8]
 800f7d4:	4b19      	ldr	r3, [pc, #100]	@ (800f83c <FMC_SDRAM_Timing_Init+0xd0>)
 800f7d6:	4013      	ands	r3, r2
 800f7d8:	68ba      	ldr	r2, [r7, #8]
 800f7da:	68d2      	ldr	r2, [r2, #12]
 800f7dc:	3a01      	subs	r2, #1
 800f7de:	0311      	lsls	r1, r2, #12
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	6952      	ldr	r2, [r2, #20]
 800f7e4:	3a01      	subs	r2, #1
 800f7e6:	0512      	lsls	r2, r2, #20
 800f7e8:	430a      	orrs	r2, r1
 800f7ea:	431a      	orrs	r2, r3
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	1e59      	subs	r1, r3, #1
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	3b01      	subs	r3, #1
 800f804:	011b      	lsls	r3, r3, #4
 800f806:	4319      	orrs	r1, r3
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	021b      	lsls	r3, r3, #8
 800f810:	4319      	orrs	r1, r3
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	3b01      	subs	r3, #1
 800f818:	041b      	lsls	r3, r3, #16
 800f81a:	4319      	orrs	r1, r3
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	699b      	ldr	r3, [r3, #24]
 800f820:	3b01      	subs	r3, #1
 800f822:	061b      	lsls	r3, r3, #24
 800f824:	430b      	orrs	r3, r1
 800f826:	431a      	orrs	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800f82c:	2300      	movs	r3, #0
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3714      	adds	r7, #20
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	ff0f0fff 	.word	0xff0f0fff

0800f840 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f840:	b084      	sub	sp, #16
 800f842:	b580      	push	{r7, lr}
 800f844:	b084      	sub	sp, #16
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	f107 001c 	add.w	r0, r7, #28
 800f84e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f852:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f856:	2b01      	cmp	r3, #1
 800f858:	d121      	bne.n	800f89e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f85e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	68da      	ldr	r2, [r3, #12]
 800f86a:	4b2c      	ldr	r3, [pc, #176]	@ (800f91c <USB_CoreInit+0xdc>)
 800f86c:	4013      	ands	r3, r2
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f87e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f882:	2b01      	cmp	r3, #1
 800f884:	d105      	bne.n	800f892 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f001 fafa 	bl	8010e8c <USB_CoreReset>
 800f898:	4603      	mov	r3, r0
 800f89a:	73fb      	strb	r3, [r7, #15]
 800f89c:	e01b      	b.n	800f8d6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f001 faee 	bl	8010e8c <USB_CoreReset>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f8b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d106      	bne.n	800f8ca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	639a      	str	r2, [r3, #56]	@ 0x38
 800f8c8:	e005      	b.n	800f8d6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f8d6:	7fbb      	ldrb	r3, [r7, #30]
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d116      	bne.n	800f90a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f920 <USB_CoreInit+0xe0>)
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	689b      	ldr	r3, [r3, #8]
 800f8f6:	f043 0206 	orr.w	r2, r3, #6
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	689b      	ldr	r3, [r3, #8]
 800f902:	f043 0220 	orr.w	r2, r3, #32
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f916:	b004      	add	sp, #16
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	ffbdffbf 	.word	0xffbdffbf
 800f920:	03ee0000 	.word	0x03ee0000

0800f924 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f924:	b480      	push	{r7}
 800f926:	b087      	sub	sp, #28
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	4613      	mov	r3, r2
 800f930:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f932:	79fb      	ldrb	r3, [r7, #7]
 800f934:	2b02      	cmp	r3, #2
 800f936:	d165      	bne.n	800fa04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	4a41      	ldr	r2, [pc, #260]	@ (800fa40 <USB_SetTurnaroundTime+0x11c>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d906      	bls.n	800f94e <USB_SetTurnaroundTime+0x2a>
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	4a40      	ldr	r2, [pc, #256]	@ (800fa44 <USB_SetTurnaroundTime+0x120>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d202      	bcs.n	800f94e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f948:	230f      	movs	r3, #15
 800f94a:	617b      	str	r3, [r7, #20]
 800f94c:	e062      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	4a3c      	ldr	r2, [pc, #240]	@ (800fa44 <USB_SetTurnaroundTime+0x120>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d306      	bcc.n	800f964 <USB_SetTurnaroundTime+0x40>
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	4a3b      	ldr	r2, [pc, #236]	@ (800fa48 <USB_SetTurnaroundTime+0x124>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d202      	bcs.n	800f964 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f95e:	230e      	movs	r3, #14
 800f960:	617b      	str	r3, [r7, #20]
 800f962:	e057      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	4a38      	ldr	r2, [pc, #224]	@ (800fa48 <USB_SetTurnaroundTime+0x124>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d306      	bcc.n	800f97a <USB_SetTurnaroundTime+0x56>
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	4a37      	ldr	r2, [pc, #220]	@ (800fa4c <USB_SetTurnaroundTime+0x128>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d202      	bcs.n	800f97a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f974:	230d      	movs	r3, #13
 800f976:	617b      	str	r3, [r7, #20]
 800f978:	e04c      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	4a33      	ldr	r2, [pc, #204]	@ (800fa4c <USB_SetTurnaroundTime+0x128>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d306      	bcc.n	800f990 <USB_SetTurnaroundTime+0x6c>
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	4a32      	ldr	r2, [pc, #200]	@ (800fa50 <USB_SetTurnaroundTime+0x12c>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d802      	bhi.n	800f990 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f98a:	230c      	movs	r3, #12
 800f98c:	617b      	str	r3, [r7, #20]
 800f98e:	e041      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	4a2f      	ldr	r2, [pc, #188]	@ (800fa50 <USB_SetTurnaroundTime+0x12c>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d906      	bls.n	800f9a6 <USB_SetTurnaroundTime+0x82>
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	4a2e      	ldr	r2, [pc, #184]	@ (800fa54 <USB_SetTurnaroundTime+0x130>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d802      	bhi.n	800f9a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f9a0:	230b      	movs	r3, #11
 800f9a2:	617b      	str	r3, [r7, #20]
 800f9a4:	e036      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	4a2a      	ldr	r2, [pc, #168]	@ (800fa54 <USB_SetTurnaroundTime+0x130>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d906      	bls.n	800f9bc <USB_SetTurnaroundTime+0x98>
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	4a29      	ldr	r2, [pc, #164]	@ (800fa58 <USB_SetTurnaroundTime+0x134>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d802      	bhi.n	800f9bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f9b6:	230a      	movs	r3, #10
 800f9b8:	617b      	str	r3, [r7, #20]
 800f9ba:	e02b      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	4a26      	ldr	r2, [pc, #152]	@ (800fa58 <USB_SetTurnaroundTime+0x134>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d906      	bls.n	800f9d2 <USB_SetTurnaroundTime+0xae>
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	4a25      	ldr	r2, [pc, #148]	@ (800fa5c <USB_SetTurnaroundTime+0x138>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d202      	bcs.n	800f9d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f9cc:	2309      	movs	r3, #9
 800f9ce:	617b      	str	r3, [r7, #20]
 800f9d0:	e020      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	4a21      	ldr	r2, [pc, #132]	@ (800fa5c <USB_SetTurnaroundTime+0x138>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d306      	bcc.n	800f9e8 <USB_SetTurnaroundTime+0xc4>
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	4a20      	ldr	r2, [pc, #128]	@ (800fa60 <USB_SetTurnaroundTime+0x13c>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d802      	bhi.n	800f9e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f9e2:	2308      	movs	r3, #8
 800f9e4:	617b      	str	r3, [r7, #20]
 800f9e6:	e015      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	4a1d      	ldr	r2, [pc, #116]	@ (800fa60 <USB_SetTurnaroundTime+0x13c>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d906      	bls.n	800f9fe <USB_SetTurnaroundTime+0xda>
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	4a1c      	ldr	r2, [pc, #112]	@ (800fa64 <USB_SetTurnaroundTime+0x140>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d202      	bcs.n	800f9fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f9f8:	2307      	movs	r3, #7
 800f9fa:	617b      	str	r3, [r7, #20]
 800f9fc:	e00a      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f9fe:	2306      	movs	r3, #6
 800fa00:	617b      	str	r3, [r7, #20]
 800fa02:	e007      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fa04:	79fb      	ldrb	r3, [r7, #7]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d102      	bne.n	800fa10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fa0a:	2309      	movs	r3, #9
 800fa0c:	617b      	str	r3, [r7, #20]
 800fa0e:	e001      	b.n	800fa14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fa10:	2309      	movs	r3, #9
 800fa12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	68da      	ldr	r2, [r3, #12]
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	029b      	lsls	r3, r3, #10
 800fa28:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800fa2c:	431a      	orrs	r2, r3
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fa32:	2300      	movs	r3, #0
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	371c      	adds	r7, #28
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr
 800fa40:	00d8acbf 	.word	0x00d8acbf
 800fa44:	00e4e1c0 	.word	0x00e4e1c0
 800fa48:	00f42400 	.word	0x00f42400
 800fa4c:	01067380 	.word	0x01067380
 800fa50:	011a499f 	.word	0x011a499f
 800fa54:	01312cff 	.word	0x01312cff
 800fa58:	014ca43f 	.word	0x014ca43f
 800fa5c:	016e3600 	.word	0x016e3600
 800fa60:	01a6ab1f 	.word	0x01a6ab1f
 800fa64:	01e84800 	.word	0x01e84800

0800fa68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	f043 0201 	orr.w	r2, r3, #1
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa8a:	b480      	push	{r7}
 800fa8c:	b083      	sub	sp, #12
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	f023 0201 	bic.w	r2, r3, #1
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	460b      	mov	r3, r1
 800fab6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fab8:	2300      	movs	r3, #0
 800faba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fac8:	78fb      	ldrb	r3, [r7, #3]
 800faca:	2b01      	cmp	r3, #1
 800facc:	d115      	bne.n	800fafa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fada:	200a      	movs	r0, #10
 800fadc:	f7f3 f892 	bl	8002c04 <HAL_Delay>
      ms += 10U;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	330a      	adds	r3, #10
 800fae4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f001 f93f 	bl	8010d6a <USB_GetMode>
 800faec:	4603      	mov	r3, r0
 800faee:	2b01      	cmp	r3, #1
 800faf0:	d01e      	beq.n	800fb30 <USB_SetCurrentMode+0x84>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2bc7      	cmp	r3, #199	@ 0xc7
 800faf6:	d9f0      	bls.n	800fada <USB_SetCurrentMode+0x2e>
 800faf8:	e01a      	b.n	800fb30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fafa:	78fb      	ldrb	r3, [r7, #3]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d115      	bne.n	800fb2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fb0c:	200a      	movs	r0, #10
 800fb0e:	f7f3 f879 	bl	8002c04 <HAL_Delay>
      ms += 10U;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	330a      	adds	r3, #10
 800fb16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f001 f926 	bl	8010d6a <USB_GetMode>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d005      	beq.n	800fb30 <USB_SetCurrentMode+0x84>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2bc7      	cmp	r3, #199	@ 0xc7
 800fb28:	d9f0      	bls.n	800fb0c <USB_SetCurrentMode+0x60>
 800fb2a:	e001      	b.n	800fb30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e005      	b.n	800fb3c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2bc8      	cmp	r3, #200	@ 0xc8
 800fb34:	d101      	bne.n	800fb3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fb36:	2301      	movs	r3, #1
 800fb38:	e000      	b.n	800fb3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fb3a:	2300      	movs	r3, #0
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3710      	adds	r7, #16
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fb44:	b084      	sub	sp, #16
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b086      	sub	sp, #24
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
 800fb4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800fb52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fb56:	2300      	movs	r3, #0
 800fb58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fb5e:	2300      	movs	r3, #0
 800fb60:	613b      	str	r3, [r7, #16]
 800fb62:	e009      	b.n	800fb78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	3340      	adds	r3, #64	@ 0x40
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	4413      	add	r3, r2
 800fb6e:	2200      	movs	r2, #0
 800fb70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	3301      	adds	r3, #1
 800fb76:	613b      	str	r3, [r7, #16]
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	2b0e      	cmp	r3, #14
 800fb7c:	d9f2      	bls.n	800fb64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fb7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d11c      	bne.n	800fbc0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fb94:	f043 0302 	orr.w	r3, r3, #2
 800fb98:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb9e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	601a      	str	r2, [r3, #0]
 800fbbe:	e005      	b.n	800fbcc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbc4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fbd8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d10d      	bne.n	800fbfc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d104      	bne.n	800fbf2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fbe8:	2100      	movs	r1, #0
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f000 f968 	bl	800fec0 <USB_SetDevSpeed>
 800fbf0:	e008      	b.n	800fc04 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fbf2:	2101      	movs	r1, #1
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 f963 	bl	800fec0 <USB_SetDevSpeed>
 800fbfa:	e003      	b.n	800fc04 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fbfc:	2103      	movs	r1, #3
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f95e 	bl	800fec0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fc04:	2110      	movs	r1, #16
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 f8fa 	bl	800fe00 <USB_FlushTxFifo>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d001      	beq.n	800fc16 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800fc12:	2301      	movs	r3, #1
 800fc14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f000 f924 	bl	800fe64 <USB_FlushRxFifo>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800fc22:	2301      	movs	r3, #1
 800fc24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	2300      	movs	r3, #0
 800fc30:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc38:	461a      	mov	r2, r3
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc44:	461a      	mov	r2, r3
 800fc46:	2300      	movs	r3, #0
 800fc48:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	613b      	str	r3, [r7, #16]
 800fc4e:	e043      	b.n	800fcd8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	015a      	lsls	r2, r3, #5
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	4413      	add	r3, r2
 800fc58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fc62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fc66:	d118      	bne.n	800fc9a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d10a      	bne.n	800fc84 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	015a      	lsls	r2, r3, #5
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	4413      	add	r3, r2
 800fc76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fc80:	6013      	str	r3, [r2, #0]
 800fc82:	e013      	b.n	800fcac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	015a      	lsls	r2, r3, #5
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc90:	461a      	mov	r2, r3
 800fc92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fc96:	6013      	str	r3, [r2, #0]
 800fc98:	e008      	b.n	800fcac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	015a      	lsls	r2, r3, #5
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	4413      	add	r3, r2
 800fca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fca6:	461a      	mov	r2, r3
 800fca8:	2300      	movs	r3, #0
 800fcaa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	015a      	lsls	r2, r3, #5
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcb8:	461a      	mov	r2, r3
 800fcba:	2300      	movs	r3, #0
 800fcbc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	015a      	lsls	r2, r3, #5
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcca:	461a      	mov	r2, r3
 800fccc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fcd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	613b      	str	r3, [r7, #16]
 800fcd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fcdc:	461a      	mov	r2, r3
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d3b5      	bcc.n	800fc50 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fce4:	2300      	movs	r3, #0
 800fce6:	613b      	str	r3, [r7, #16]
 800fce8:	e043      	b.n	800fd72 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	015a      	lsls	r2, r3, #5
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fcfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd00:	d118      	bne.n	800fd34 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10a      	bne.n	800fd1e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	015a      	lsls	r2, r3, #5
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	4413      	add	r3, r2
 800fd10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd14:	461a      	mov	r2, r3
 800fd16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fd1a:	6013      	str	r3, [r2, #0]
 800fd1c:	e013      	b.n	800fd46 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	015a      	lsls	r2, r3, #5
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	4413      	add	r3, r2
 800fd26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fd30:	6013      	str	r3, [r2, #0]
 800fd32:	e008      	b.n	800fd46 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	015a      	lsls	r2, r3, #5
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd40:	461a      	mov	r2, r3
 800fd42:	2300      	movs	r3, #0
 800fd44:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	015a      	lsls	r2, r3, #5
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd52:	461a      	mov	r2, r3
 800fd54:	2300      	movs	r3, #0
 800fd56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	015a      	lsls	r2, r3, #5
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	4413      	add	r3, r2
 800fd60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd64:	461a      	mov	r2, r3
 800fd66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fd6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	613b      	str	r3, [r7, #16]
 800fd72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fd76:	461a      	mov	r2, r3
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d3b5      	bcc.n	800fcea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fd8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd90:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2200      	movs	r2, #0
 800fd96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800fd9e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fda0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d105      	bne.n	800fdb4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	699b      	ldr	r3, [r3, #24]
 800fdac:	f043 0210 	orr.w	r2, r3, #16
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	699a      	ldr	r2, [r3, #24]
 800fdb8:	4b0f      	ldr	r3, [pc, #60]	@ (800fdf8 <USB_DevInit+0x2b4>)
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fdc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d005      	beq.n	800fdd4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	699b      	ldr	r3, [r3, #24]
 800fdcc:	f043 0208 	orr.w	r2, r3, #8
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fdd4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d105      	bne.n	800fde8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	699a      	ldr	r2, [r3, #24]
 800fde0:	4b06      	ldr	r3, [pc, #24]	@ (800fdfc <USB_DevInit+0x2b8>)
 800fde2:	4313      	orrs	r3, r2
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fde8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3718      	adds	r7, #24
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fdf4:	b004      	add	sp, #16
 800fdf6:	4770      	bx	lr
 800fdf8:	803c3800 	.word	0x803c3800
 800fdfc:	40000004 	.word	0x40000004

0800fe00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b085      	sub	sp, #20
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	3301      	adds	r3, #1
 800fe12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fe1a:	d901      	bls.n	800fe20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fe1c:	2303      	movs	r3, #3
 800fe1e:	e01b      	b.n	800fe58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	daf2      	bge.n	800fe0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	019b      	lsls	r3, r3, #6
 800fe30:	f043 0220 	orr.w	r2, r3, #32
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fe44:	d901      	bls.n	800fe4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fe46:	2303      	movs	r3, #3
 800fe48:	e006      	b.n	800fe58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	691b      	ldr	r3, [r3, #16]
 800fe4e:	f003 0320 	and.w	r3, r3, #32
 800fe52:	2b20      	cmp	r3, #32
 800fe54:	d0f0      	beq.n	800fe38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fe56:	2300      	movs	r3, #0
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3714      	adds	r7, #20
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	3301      	adds	r3, #1
 800fe74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fe7c:	d901      	bls.n	800fe82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fe7e:	2303      	movs	r3, #3
 800fe80:	e018      	b.n	800feb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	daf2      	bge.n	800fe70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2210      	movs	r2, #16
 800fe92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	3301      	adds	r3, #1
 800fe98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fea0:	d901      	bls.n	800fea6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fea2:	2303      	movs	r3, #3
 800fea4:	e006      	b.n	800feb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	f003 0310 	and.w	r3, r3, #16
 800feae:	2b10      	cmp	r3, #16
 800feb0:	d0f0      	beq.n	800fe94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800feb2:	2300      	movs	r3, #0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3714      	adds	r7, #20
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b085      	sub	sp, #20
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	460b      	mov	r3, r1
 800feca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	78fb      	ldrb	r3, [r7, #3]
 800feda:	68f9      	ldr	r1, [r7, #12]
 800fedc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fee0:	4313      	orrs	r3, r2
 800fee2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3714      	adds	r7, #20
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr

0800fef2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800fef2:	b480      	push	{r7}
 800fef4:	b087      	sub	sp, #28
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	f003 0306 	and.w	r3, r3, #6
 800ff0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d102      	bne.n	800ff18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ff12:	2300      	movs	r3, #0
 800ff14:	75fb      	strb	r3, [r7, #23]
 800ff16:	e00a      	b.n	800ff2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2b02      	cmp	r3, #2
 800ff1c:	d002      	beq.n	800ff24 <USB_GetDevSpeed+0x32>
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2b06      	cmp	r3, #6
 800ff22:	d102      	bne.n	800ff2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ff24:	2302      	movs	r3, #2
 800ff26:	75fb      	strb	r3, [r7, #23]
 800ff28:	e001      	b.n	800ff2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ff2a:	230f      	movs	r3, #15
 800ff2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ff2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	371c      	adds	r7, #28
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	785b      	ldrb	r3, [r3, #1]
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d139      	bne.n	800ffcc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff5e:	69da      	ldr	r2, [r3, #28]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	f003 030f 	and.w	r3, r3, #15
 800ff68:	2101      	movs	r1, #1
 800ff6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	68f9      	ldr	r1, [r7, #12]
 800ff72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ff76:	4313      	orrs	r3, r2
 800ff78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	015a      	lsls	r2, r3, #5
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	4413      	add	r3, r2
 800ff82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d153      	bne.n	8010038 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	015a      	lsls	r2, r3, #5
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	4413      	add	r3, r2
 800ff98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	689b      	ldr	r3, [r3, #8]
 800ffa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	791b      	ldrb	r3, [r3, #4]
 800ffaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ffac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	059b      	lsls	r3, r3, #22
 800ffb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ffb4:	431a      	orrs	r2, r3
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	0159      	lsls	r1, r3, #5
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	440b      	add	r3, r1
 800ffbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	4b20      	ldr	r3, [pc, #128]	@ (8010048 <USB_ActivateEndpoint+0x10c>)
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	600b      	str	r3, [r1, #0]
 800ffca:	e035      	b.n	8010038 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ffd2:	69da      	ldr	r2, [r3, #28]
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	f003 030f 	and.w	r3, r3, #15
 800ffdc:	2101      	movs	r1, #1
 800ffde:	fa01 f303 	lsl.w	r3, r1, r3
 800ffe2:	041b      	lsls	r3, r3, #16
 800ffe4:	68f9      	ldr	r1, [r7, #12]
 800ffe6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ffea:	4313      	orrs	r3, r2
 800ffec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	015a      	lsls	r2, r3, #5
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	4413      	add	r3, r2
 800fff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010000:	2b00      	cmp	r3, #0
 8010002:	d119      	bne.n	8010038 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	015a      	lsls	r2, r3, #5
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	4413      	add	r3, r2
 801000c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	791b      	ldrb	r3, [r3, #4]
 801001e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010020:	430b      	orrs	r3, r1
 8010022:	431a      	orrs	r2, r3
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	0159      	lsls	r1, r3, #5
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	440b      	add	r3, r1
 801002c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010030:	4619      	mov	r1, r3
 8010032:	4b05      	ldr	r3, [pc, #20]	@ (8010048 <USB_ActivateEndpoint+0x10c>)
 8010034:	4313      	orrs	r3, r2
 8010036:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3714      	adds	r7, #20
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop
 8010048:	10008000 	.word	0x10008000

0801004c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801004c:	b480      	push	{r7}
 801004e:	b085      	sub	sp, #20
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	785b      	ldrb	r3, [r3, #1]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d161      	bne.n	801012c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	015a      	lsls	r2, r3, #5
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	4413      	add	r3, r2
 8010070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801007a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801007e:	d11f      	bne.n	80100c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	015a      	lsls	r2, r3, #5
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	4413      	add	r3, r2
 8010088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	68ba      	ldr	r2, [r7, #8]
 8010090:	0151      	lsls	r1, r2, #5
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	440a      	add	r2, r1
 8010096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801009a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801009e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	015a      	lsls	r2, r3, #5
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	4413      	add	r3, r2
 80100a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	68ba      	ldr	r2, [r7, #8]
 80100b0:	0151      	lsls	r1, r2, #5
 80100b2:	68fa      	ldr	r2, [r7, #12]
 80100b4:	440a      	add	r2, r1
 80100b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80100be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80100c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	f003 030f 	and.w	r3, r3, #15
 80100d0:	2101      	movs	r1, #1
 80100d2:	fa01 f303 	lsl.w	r3, r1, r3
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	43db      	mvns	r3, r3
 80100da:	68f9      	ldr	r1, [r7, #12]
 80100dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80100e0:	4013      	ands	r3, r2
 80100e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80100ea:	69da      	ldr	r2, [r3, #28]
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	f003 030f 	and.w	r3, r3, #15
 80100f4:	2101      	movs	r1, #1
 80100f6:	fa01 f303 	lsl.w	r3, r1, r3
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	43db      	mvns	r3, r3
 80100fe:	68f9      	ldr	r1, [r7, #12]
 8010100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010104:	4013      	ands	r3, r2
 8010106:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	015a      	lsls	r2, r3, #5
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	4413      	add	r3, r2
 8010110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	0159      	lsls	r1, r3, #5
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	440b      	add	r3, r1
 801011e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010122:	4619      	mov	r1, r3
 8010124:	4b35      	ldr	r3, [pc, #212]	@ (80101fc <USB_DeactivateEndpoint+0x1b0>)
 8010126:	4013      	ands	r3, r2
 8010128:	600b      	str	r3, [r1, #0]
 801012a:	e060      	b.n	80101ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	015a      	lsls	r2, r3, #5
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	4413      	add	r3, r2
 8010134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801013e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010142:	d11f      	bne.n	8010184 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	4413      	add	r3, r2
 801014c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	0151      	lsls	r1, r2, #5
 8010156:	68fa      	ldr	r2, [r7, #12]
 8010158:	440a      	add	r2, r1
 801015a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801015e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010162:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	015a      	lsls	r2, r3, #5
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	4413      	add	r3, r2
 801016c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	68ba      	ldr	r2, [r7, #8]
 8010174:	0151      	lsls	r1, r2, #5
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	440a      	add	r2, r1
 801017a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801017e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010182:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801018a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	f003 030f 	and.w	r3, r3, #15
 8010194:	2101      	movs	r1, #1
 8010196:	fa01 f303 	lsl.w	r3, r1, r3
 801019a:	041b      	lsls	r3, r3, #16
 801019c:	43db      	mvns	r3, r3
 801019e:	68f9      	ldr	r1, [r7, #12]
 80101a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80101a4:	4013      	ands	r3, r2
 80101a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101ae:	69da      	ldr	r2, [r3, #28]
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	f003 030f 	and.w	r3, r3, #15
 80101b8:	2101      	movs	r1, #1
 80101ba:	fa01 f303 	lsl.w	r3, r1, r3
 80101be:	041b      	lsls	r3, r3, #16
 80101c0:	43db      	mvns	r3, r3
 80101c2:	68f9      	ldr	r1, [r7, #12]
 80101c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80101c8:	4013      	ands	r3, r2
 80101ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	015a      	lsls	r2, r3, #5
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	4413      	add	r3, r2
 80101d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	0159      	lsls	r1, r3, #5
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	440b      	add	r3, r1
 80101e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101e6:	4619      	mov	r1, r3
 80101e8:	4b05      	ldr	r3, [pc, #20]	@ (8010200 <USB_DeactivateEndpoint+0x1b4>)
 80101ea:	4013      	ands	r3, r2
 80101ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80101ee:	2300      	movs	r3, #0
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3714      	adds	r7, #20
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	ec337800 	.word	0xec337800
 8010200:	eff37800 	.word	0xeff37800

08010204 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b08a      	sub	sp, #40	@ 0x28
 8010208:	af02      	add	r7, sp, #8
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	4613      	mov	r3, r2
 8010210:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	785b      	ldrb	r3, [r3, #1]
 8010220:	2b01      	cmp	r3, #1
 8010222:	f040 8185 	bne.w	8010530 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	691b      	ldr	r3, [r3, #16]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d132      	bne.n	8010294 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	015a      	lsls	r2, r3, #5
 8010232:	69fb      	ldr	r3, [r7, #28]
 8010234:	4413      	add	r3, r2
 8010236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801023a:	691a      	ldr	r2, [r3, #16]
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	0159      	lsls	r1, r3, #5
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	440b      	add	r3, r1
 8010244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010248:	4619      	mov	r1, r3
 801024a:	4ba7      	ldr	r3, [pc, #668]	@ (80104e8 <USB_EPStartXfer+0x2e4>)
 801024c:	4013      	ands	r3, r2
 801024e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	015a      	lsls	r2, r3, #5
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	4413      	add	r3, r2
 8010258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801025c:	691b      	ldr	r3, [r3, #16]
 801025e:	69ba      	ldr	r2, [r7, #24]
 8010260:	0151      	lsls	r1, r2, #5
 8010262:	69fa      	ldr	r2, [r7, #28]
 8010264:	440a      	add	r2, r1
 8010266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801026a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801026e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	015a      	lsls	r2, r3, #5
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	4413      	add	r3, r2
 8010278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801027c:	691a      	ldr	r2, [r3, #16]
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	0159      	lsls	r1, r3, #5
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	440b      	add	r3, r1
 8010286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801028a:	4619      	mov	r1, r3
 801028c:	4b97      	ldr	r3, [pc, #604]	@ (80104ec <USB_EPStartXfer+0x2e8>)
 801028e:	4013      	ands	r3, r2
 8010290:	610b      	str	r3, [r1, #16]
 8010292:	e097      	b.n	80103c4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	015a      	lsls	r2, r3, #5
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	4413      	add	r3, r2
 801029c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102a0:	691a      	ldr	r2, [r3, #16]
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	0159      	lsls	r1, r3, #5
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	440b      	add	r3, r1
 80102aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102ae:	4619      	mov	r1, r3
 80102b0:	4b8e      	ldr	r3, [pc, #568]	@ (80104ec <USB_EPStartXfer+0x2e8>)
 80102b2:	4013      	ands	r3, r2
 80102b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	015a      	lsls	r2, r3, #5
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	4413      	add	r3, r2
 80102be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102c2:	691a      	ldr	r2, [r3, #16]
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	0159      	lsls	r1, r3, #5
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	440b      	add	r3, r1
 80102cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102d0:	4619      	mov	r1, r3
 80102d2:	4b85      	ldr	r3, [pc, #532]	@ (80104e8 <USB_EPStartXfer+0x2e4>)
 80102d4:	4013      	ands	r3, r2
 80102d6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d11a      	bne.n	8010314 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	691a      	ldr	r2, [r3, #16]
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d903      	bls.n	80102f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	689a      	ldr	r2, [r3, #8]
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	015a      	lsls	r2, r3, #5
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	4413      	add	r3, r2
 80102fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102fe:	691b      	ldr	r3, [r3, #16]
 8010300:	69ba      	ldr	r2, [r7, #24]
 8010302:	0151      	lsls	r1, r2, #5
 8010304:	69fa      	ldr	r2, [r7, #28]
 8010306:	440a      	add	r2, r1
 8010308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801030c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010310:	6113      	str	r3, [r2, #16]
 8010312:	e044      	b.n	801039e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	691a      	ldr	r2, [r3, #16]
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	4413      	add	r3, r2
 801031e:	1e5a      	subs	r2, r3, #1
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	fbb2 f3f3 	udiv	r3, r2, r3
 8010328:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 801032a:	69bb      	ldr	r3, [r7, #24]
 801032c:	015a      	lsls	r2, r3, #5
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	4413      	add	r3, r2
 8010332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010336:	691a      	ldr	r2, [r3, #16]
 8010338:	8afb      	ldrh	r3, [r7, #22]
 801033a:	04d9      	lsls	r1, r3, #19
 801033c:	4b6c      	ldr	r3, [pc, #432]	@ (80104f0 <USB_EPStartXfer+0x2ec>)
 801033e:	400b      	ands	r3, r1
 8010340:	69b9      	ldr	r1, [r7, #24]
 8010342:	0148      	lsls	r0, r1, #5
 8010344:	69f9      	ldr	r1, [r7, #28]
 8010346:	4401      	add	r1, r0
 8010348:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801034c:	4313      	orrs	r3, r2
 801034e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	791b      	ldrb	r3, [r3, #4]
 8010354:	2b01      	cmp	r3, #1
 8010356:	d122      	bne.n	801039e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	015a      	lsls	r2, r3, #5
 801035c:	69fb      	ldr	r3, [r7, #28]
 801035e:	4413      	add	r3, r2
 8010360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010364:	691b      	ldr	r3, [r3, #16]
 8010366:	69ba      	ldr	r2, [r7, #24]
 8010368:	0151      	lsls	r1, r2, #5
 801036a:	69fa      	ldr	r2, [r7, #28]
 801036c:	440a      	add	r2, r1
 801036e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010372:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010376:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8010378:	69bb      	ldr	r3, [r7, #24]
 801037a:	015a      	lsls	r2, r3, #5
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	4413      	add	r3, r2
 8010380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010384:	691a      	ldr	r2, [r3, #16]
 8010386:	8afb      	ldrh	r3, [r7, #22]
 8010388:	075b      	lsls	r3, r3, #29
 801038a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801038e:	69b9      	ldr	r1, [r7, #24]
 8010390:	0148      	lsls	r0, r1, #5
 8010392:	69f9      	ldr	r1, [r7, #28]
 8010394:	4401      	add	r1, r0
 8010396:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801039a:	4313      	orrs	r3, r2
 801039c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	015a      	lsls	r2, r3, #5
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	4413      	add	r3, r2
 80103a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103aa:	691a      	ldr	r2, [r3, #16]
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	691b      	ldr	r3, [r3, #16]
 80103b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103b4:	69b9      	ldr	r1, [r7, #24]
 80103b6:	0148      	lsls	r0, r1, #5
 80103b8:	69f9      	ldr	r1, [r7, #28]
 80103ba:	4401      	add	r1, r0
 80103bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80103c0:	4313      	orrs	r3, r2
 80103c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80103c4:	79fb      	ldrb	r3, [r7, #7]
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d14b      	bne.n	8010462 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	69db      	ldr	r3, [r3, #28]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d009      	beq.n	80103e6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	015a      	lsls	r2, r3, #5
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	4413      	add	r3, r2
 80103da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103de:	461a      	mov	r2, r3
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	69db      	ldr	r3, [r3, #28]
 80103e4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	791b      	ldrb	r3, [r3, #4]
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d128      	bne.n	8010440 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80103f4:	689b      	ldr	r3, [r3, #8]
 80103f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d110      	bne.n	8010420 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	015a      	lsls	r2, r3, #5
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	4413      	add	r3, r2
 8010406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	69ba      	ldr	r2, [r7, #24]
 801040e:	0151      	lsls	r1, r2, #5
 8010410:	69fa      	ldr	r2, [r7, #28]
 8010412:	440a      	add	r2, r1
 8010414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010418:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801041c:	6013      	str	r3, [r2, #0]
 801041e:	e00f      	b.n	8010440 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	015a      	lsls	r2, r3, #5
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	4413      	add	r3, r2
 8010428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	69ba      	ldr	r2, [r7, #24]
 8010430:	0151      	lsls	r1, r2, #5
 8010432:	69fa      	ldr	r2, [r7, #28]
 8010434:	440a      	add	r2, r1
 8010436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801043a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801043e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010440:	69bb      	ldr	r3, [r7, #24]
 8010442:	015a      	lsls	r2, r3, #5
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	4413      	add	r3, r2
 8010448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	69ba      	ldr	r2, [r7, #24]
 8010450:	0151      	lsls	r1, r2, #5
 8010452:	69fa      	ldr	r2, [r7, #28]
 8010454:	440a      	add	r2, r1
 8010456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801045a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801045e:	6013      	str	r3, [r2, #0]
 8010460:	e169      	b.n	8010736 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010462:	69bb      	ldr	r3, [r7, #24]
 8010464:	015a      	lsls	r2, r3, #5
 8010466:	69fb      	ldr	r3, [r7, #28]
 8010468:	4413      	add	r3, r2
 801046a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	69ba      	ldr	r2, [r7, #24]
 8010472:	0151      	lsls	r1, r2, #5
 8010474:	69fa      	ldr	r2, [r7, #28]
 8010476:	440a      	add	r2, r1
 8010478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801047c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010480:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	791b      	ldrb	r3, [r3, #4]
 8010486:	2b01      	cmp	r3, #1
 8010488:	d015      	beq.n	80104b6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	691b      	ldr	r3, [r3, #16]
 801048e:	2b00      	cmp	r3, #0
 8010490:	f000 8151 	beq.w	8010736 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801049a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	f003 030f 	and.w	r3, r3, #15
 80104a4:	2101      	movs	r1, #1
 80104a6:	fa01 f303 	lsl.w	r3, r1, r3
 80104aa:	69f9      	ldr	r1, [r7, #28]
 80104ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80104b0:	4313      	orrs	r3, r2
 80104b2:	634b      	str	r3, [r1, #52]	@ 0x34
 80104b4:	e13f      	b.n	8010736 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104bc:	689b      	ldr	r3, [r3, #8]
 80104be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d116      	bne.n	80104f4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	015a      	lsls	r2, r3, #5
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	4413      	add	r3, r2
 80104ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	69ba      	ldr	r2, [r7, #24]
 80104d6:	0151      	lsls	r1, r2, #5
 80104d8:	69fa      	ldr	r2, [r7, #28]
 80104da:	440a      	add	r2, r1
 80104dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80104e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80104e4:	6013      	str	r3, [r2, #0]
 80104e6:	e015      	b.n	8010514 <USB_EPStartXfer+0x310>
 80104e8:	e007ffff 	.word	0xe007ffff
 80104ec:	fff80000 	.word	0xfff80000
 80104f0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	015a      	lsls	r2, r3, #5
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	4413      	add	r3, r2
 80104fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	69ba      	ldr	r2, [r7, #24]
 8010504:	0151      	lsls	r1, r2, #5
 8010506:	69fa      	ldr	r2, [r7, #28]
 8010508:	440a      	add	r2, r1
 801050a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801050e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010512:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	68d9      	ldr	r1, [r3, #12]
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	781a      	ldrb	r2, [r3, #0]
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	691b      	ldr	r3, [r3, #16]
 8010520:	b298      	uxth	r0, r3
 8010522:	79fb      	ldrb	r3, [r7, #7]
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	4603      	mov	r3, r0
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f000 f9b9 	bl	80108a0 <USB_WritePacket>
 801052e:	e102      	b.n	8010736 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010530:	69bb      	ldr	r3, [r7, #24]
 8010532:	015a      	lsls	r2, r3, #5
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	4413      	add	r3, r2
 8010538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801053c:	691a      	ldr	r2, [r3, #16]
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	0159      	lsls	r1, r3, #5
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	440b      	add	r3, r1
 8010546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801054a:	4619      	mov	r1, r3
 801054c:	4b7c      	ldr	r3, [pc, #496]	@ (8010740 <USB_EPStartXfer+0x53c>)
 801054e:	4013      	ands	r3, r2
 8010550:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	015a      	lsls	r2, r3, #5
 8010556:	69fb      	ldr	r3, [r7, #28]
 8010558:	4413      	add	r3, r2
 801055a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801055e:	691a      	ldr	r2, [r3, #16]
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	0159      	lsls	r1, r3, #5
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	440b      	add	r3, r1
 8010568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801056c:	4619      	mov	r1, r3
 801056e:	4b75      	ldr	r3, [pc, #468]	@ (8010744 <USB_EPStartXfer+0x540>)
 8010570:	4013      	ands	r3, r2
 8010572:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d12f      	bne.n	80105da <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	691b      	ldr	r3, [r3, #16]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d003      	beq.n	801058a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	689a      	ldr	r2, [r3, #8]
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	689a      	ldr	r2, [r3, #8]
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	015a      	lsls	r2, r3, #5
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	4413      	add	r3, r2
 801059a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801059e:	691a      	ldr	r2, [r3, #16]
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	6a1b      	ldr	r3, [r3, #32]
 80105a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105a8:	69b9      	ldr	r1, [r7, #24]
 80105aa:	0148      	lsls	r0, r1, #5
 80105ac:	69f9      	ldr	r1, [r7, #28]
 80105ae:	4401      	add	r1, r0
 80105b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80105b4:	4313      	orrs	r3, r2
 80105b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	015a      	lsls	r2, r3, #5
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	4413      	add	r3, r2
 80105c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105c4:	691b      	ldr	r3, [r3, #16]
 80105c6:	69ba      	ldr	r2, [r7, #24]
 80105c8:	0151      	lsls	r1, r2, #5
 80105ca:	69fa      	ldr	r2, [r7, #28]
 80105cc:	440a      	add	r2, r1
 80105ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80105d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80105d6:	6113      	str	r3, [r2, #16]
 80105d8:	e05f      	b.n	801069a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	691b      	ldr	r3, [r3, #16]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d123      	bne.n	801062a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	015a      	lsls	r2, r3, #5
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	4413      	add	r3, r2
 80105ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105ee:	691a      	ldr	r2, [r3, #16]
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	689b      	ldr	r3, [r3, #8]
 80105f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105f8:	69b9      	ldr	r1, [r7, #24]
 80105fa:	0148      	lsls	r0, r1, #5
 80105fc:	69f9      	ldr	r1, [r7, #28]
 80105fe:	4401      	add	r1, r0
 8010600:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010604:	4313      	orrs	r3, r2
 8010606:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010608:	69bb      	ldr	r3, [r7, #24]
 801060a:	015a      	lsls	r2, r3, #5
 801060c:	69fb      	ldr	r3, [r7, #28]
 801060e:	4413      	add	r3, r2
 8010610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010614:	691b      	ldr	r3, [r3, #16]
 8010616:	69ba      	ldr	r2, [r7, #24]
 8010618:	0151      	lsls	r1, r2, #5
 801061a:	69fa      	ldr	r2, [r7, #28]
 801061c:	440a      	add	r2, r1
 801061e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010622:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010626:	6113      	str	r3, [r2, #16]
 8010628:	e037      	b.n	801069a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	691a      	ldr	r2, [r3, #16]
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	4413      	add	r3, r2
 8010634:	1e5a      	subs	r2, r3, #1
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	689b      	ldr	r3, [r3, #8]
 801063a:	fbb2 f3f3 	udiv	r3, r2, r3
 801063e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	689b      	ldr	r3, [r3, #8]
 8010644:	8afa      	ldrh	r2, [r7, #22]
 8010646:	fb03 f202 	mul.w	r2, r3, r2
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	015a      	lsls	r2, r3, #5
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	4413      	add	r3, r2
 8010656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801065a:	691a      	ldr	r2, [r3, #16]
 801065c:	8afb      	ldrh	r3, [r7, #22]
 801065e:	04d9      	lsls	r1, r3, #19
 8010660:	4b39      	ldr	r3, [pc, #228]	@ (8010748 <USB_EPStartXfer+0x544>)
 8010662:	400b      	ands	r3, r1
 8010664:	69b9      	ldr	r1, [r7, #24]
 8010666:	0148      	lsls	r0, r1, #5
 8010668:	69f9      	ldr	r1, [r7, #28]
 801066a:	4401      	add	r1, r0
 801066c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010670:	4313      	orrs	r3, r2
 8010672:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	015a      	lsls	r2, r3, #5
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	4413      	add	r3, r2
 801067c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010680:	691a      	ldr	r2, [r3, #16]
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	6a1b      	ldr	r3, [r3, #32]
 8010686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801068a:	69b9      	ldr	r1, [r7, #24]
 801068c:	0148      	lsls	r0, r1, #5
 801068e:	69f9      	ldr	r1, [r7, #28]
 8010690:	4401      	add	r1, r0
 8010692:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010696:	4313      	orrs	r3, r2
 8010698:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801069a:	79fb      	ldrb	r3, [r7, #7]
 801069c:	2b01      	cmp	r3, #1
 801069e:	d10d      	bne.n	80106bc <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d009      	beq.n	80106bc <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	68d9      	ldr	r1, [r3, #12]
 80106ac:	69bb      	ldr	r3, [r7, #24]
 80106ae:	015a      	lsls	r2, r3, #5
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	4413      	add	r3, r2
 80106b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80106b8:	460a      	mov	r2, r1
 80106ba:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	791b      	ldrb	r3, [r3, #4]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d128      	bne.n	8010716 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106ca:	689b      	ldr	r3, [r3, #8]
 80106cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d110      	bne.n	80106f6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80106d4:	69bb      	ldr	r3, [r7, #24]
 80106d6:	015a      	lsls	r2, r3, #5
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	4413      	add	r3, r2
 80106dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	69ba      	ldr	r2, [r7, #24]
 80106e4:	0151      	lsls	r1, r2, #5
 80106e6:	69fa      	ldr	r2, [r7, #28]
 80106e8:	440a      	add	r2, r1
 80106ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80106ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80106f2:	6013      	str	r3, [r2, #0]
 80106f4:	e00f      	b.n	8010716 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	015a      	lsls	r2, r3, #5
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	4413      	add	r3, r2
 80106fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	69ba      	ldr	r2, [r7, #24]
 8010706:	0151      	lsls	r1, r2, #5
 8010708:	69fa      	ldr	r2, [r7, #28]
 801070a:	440a      	add	r2, r1
 801070c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010714:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	015a      	lsls	r2, r3, #5
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	4413      	add	r3, r2
 801071e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	69ba      	ldr	r2, [r7, #24]
 8010726:	0151      	lsls	r1, r2, #5
 8010728:	69fa      	ldr	r2, [r7, #28]
 801072a:	440a      	add	r2, r1
 801072c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010730:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010734:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010736:	2300      	movs	r3, #0
}
 8010738:	4618      	mov	r0, r3
 801073a:	3720      	adds	r7, #32
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}
 8010740:	fff80000 	.word	0xfff80000
 8010744:	e007ffff 	.word	0xe007ffff
 8010748:	1ff80000 	.word	0x1ff80000

0801074c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801074c:	b480      	push	{r7}
 801074e:	b087      	sub	sp, #28
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010756:	2300      	movs	r3, #0
 8010758:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801075a:	2300      	movs	r3, #0
 801075c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	785b      	ldrb	r3, [r3, #1]
 8010766:	2b01      	cmp	r3, #1
 8010768:	d14a      	bne.n	8010800 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	015a      	lsls	r2, r3, #5
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	4413      	add	r3, r2
 8010774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801077e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010782:	f040 8086 	bne.w	8010892 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	015a      	lsls	r2, r3, #5
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	4413      	add	r3, r2
 8010790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	683a      	ldr	r2, [r7, #0]
 8010798:	7812      	ldrb	r2, [r2, #0]
 801079a:	0151      	lsls	r1, r2, #5
 801079c:	693a      	ldr	r2, [r7, #16]
 801079e:	440a      	add	r2, r1
 80107a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80107a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80107a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	015a      	lsls	r2, r3, #5
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	4413      	add	r3, r2
 80107b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	683a      	ldr	r2, [r7, #0]
 80107bc:	7812      	ldrb	r2, [r2, #0]
 80107be:	0151      	lsls	r1, r2, #5
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	440a      	add	r2, r1
 80107c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80107c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80107cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3301      	adds	r3, #1
 80107d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80107da:	4293      	cmp	r3, r2
 80107dc:	d902      	bls.n	80107e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80107de:	2301      	movs	r3, #1
 80107e0:	75fb      	strb	r3, [r7, #23]
          break;
 80107e2:	e056      	b.n	8010892 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	015a      	lsls	r2, r3, #5
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	4413      	add	r3, r2
 80107ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80107f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80107fc:	d0e7      	beq.n	80107ce <USB_EPStopXfer+0x82>
 80107fe:	e048      	b.n	8010892 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	015a      	lsls	r2, r3, #5
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	4413      	add	r3, r2
 801080a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010818:	d13b      	bne.n	8010892 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	015a      	lsls	r2, r3, #5
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	4413      	add	r3, r2
 8010824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	683a      	ldr	r2, [r7, #0]
 801082c:	7812      	ldrb	r2, [r2, #0]
 801082e:	0151      	lsls	r1, r2, #5
 8010830:	693a      	ldr	r2, [r7, #16]
 8010832:	440a      	add	r2, r1
 8010834:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010838:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801083c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	015a      	lsls	r2, r3, #5
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	4413      	add	r3, r2
 8010848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	683a      	ldr	r2, [r7, #0]
 8010850:	7812      	ldrb	r2, [r2, #0]
 8010852:	0151      	lsls	r1, r2, #5
 8010854:	693a      	ldr	r2, [r7, #16]
 8010856:	440a      	add	r2, r1
 8010858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801085c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010860:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	3301      	adds	r3, #1
 8010866:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801086e:	4293      	cmp	r3, r2
 8010870:	d902      	bls.n	8010878 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010872:	2301      	movs	r3, #1
 8010874:	75fb      	strb	r3, [r7, #23]
          break;
 8010876:	e00c      	b.n	8010892 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	015a      	lsls	r2, r3, #5
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	4413      	add	r3, r2
 8010882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801088c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010890:	d0e7      	beq.n	8010862 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010892:	7dfb      	ldrb	r3, [r7, #23]
}
 8010894:	4618      	mov	r0, r3
 8010896:	371c      	adds	r7, #28
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr

080108a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b089      	sub	sp, #36	@ 0x24
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	4611      	mov	r1, r2
 80108ac:	461a      	mov	r2, r3
 80108ae:	460b      	mov	r3, r1
 80108b0:	71fb      	strb	r3, [r7, #7]
 80108b2:	4613      	mov	r3, r2
 80108b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80108be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d123      	bne.n	801090e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80108c6:	88bb      	ldrh	r3, [r7, #4]
 80108c8:	3303      	adds	r3, #3
 80108ca:	089b      	lsrs	r3, r3, #2
 80108cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80108ce:	2300      	movs	r3, #0
 80108d0:	61bb      	str	r3, [r7, #24]
 80108d2:	e018      	b.n	8010906 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80108d4:	79fb      	ldrb	r3, [r7, #7]
 80108d6:	031a      	lsls	r2, r3, #12
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	4413      	add	r3, r2
 80108dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80108e0:	461a      	mov	r2, r3
 80108e2:	69fb      	ldr	r3, [r7, #28]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	3301      	adds	r3, #1
 80108ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	3301      	adds	r3, #1
 80108f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	3301      	adds	r3, #1
 80108f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80108fa:	69fb      	ldr	r3, [r7, #28]
 80108fc:	3301      	adds	r3, #1
 80108fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	3301      	adds	r3, #1
 8010904:	61bb      	str	r3, [r7, #24]
 8010906:	69ba      	ldr	r2, [r7, #24]
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	429a      	cmp	r2, r3
 801090c:	d3e2      	bcc.n	80108d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	3724      	adds	r7, #36	@ 0x24
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801091c:	b480      	push	{r7}
 801091e:	b08b      	sub	sp, #44	@ 0x2c
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	4613      	mov	r3, r2
 8010928:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010932:	88fb      	ldrh	r3, [r7, #6]
 8010934:	089b      	lsrs	r3, r3, #2
 8010936:	b29b      	uxth	r3, r3
 8010938:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801093a:	88fb      	ldrh	r3, [r7, #6]
 801093c:	f003 0303 	and.w	r3, r3, #3
 8010940:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010942:	2300      	movs	r3, #0
 8010944:	623b      	str	r3, [r7, #32]
 8010946:	e014      	b.n	8010972 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010948:	69bb      	ldr	r3, [r7, #24]
 801094a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010952:	601a      	str	r2, [r3, #0]
    pDest++;
 8010954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010956:	3301      	adds	r3, #1
 8010958:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801095c:	3301      	adds	r3, #1
 801095e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010962:	3301      	adds	r3, #1
 8010964:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010968:	3301      	adds	r3, #1
 801096a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801096c:	6a3b      	ldr	r3, [r7, #32]
 801096e:	3301      	adds	r3, #1
 8010970:	623b      	str	r3, [r7, #32]
 8010972:	6a3a      	ldr	r2, [r7, #32]
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	429a      	cmp	r2, r3
 8010978:	d3e6      	bcc.n	8010948 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801097a:	8bfb      	ldrh	r3, [r7, #30]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d01e      	beq.n	80109be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010980:	2300      	movs	r3, #0
 8010982:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801098a:	461a      	mov	r2, r3
 801098c:	f107 0310 	add.w	r3, r7, #16
 8010990:	6812      	ldr	r2, [r2, #0]
 8010992:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010994:	693a      	ldr	r2, [r7, #16]
 8010996:	6a3b      	ldr	r3, [r7, #32]
 8010998:	b2db      	uxtb	r3, r3
 801099a:	00db      	lsls	r3, r3, #3
 801099c:	fa22 f303 	lsr.w	r3, r2, r3
 80109a0:	b2da      	uxtb	r2, r3
 80109a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a4:	701a      	strb	r2, [r3, #0]
      i++;
 80109a6:	6a3b      	ldr	r3, [r7, #32]
 80109a8:	3301      	adds	r3, #1
 80109aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80109ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ae:	3301      	adds	r3, #1
 80109b0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80109b2:	8bfb      	ldrh	r3, [r7, #30]
 80109b4:	3b01      	subs	r3, #1
 80109b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80109b8:	8bfb      	ldrh	r3, [r7, #30]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d1ea      	bne.n	8010994 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80109be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	372c      	adds	r7, #44	@ 0x2c
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr

080109cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b085      	sub	sp, #20
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	785b      	ldrb	r3, [r3, #1]
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	d12c      	bne.n	8010a42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	015a      	lsls	r2, r3, #5
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	4413      	add	r3, r2
 80109f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	db12      	blt.n	8010a20 <USB_EPSetStall+0x54>
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d00f      	beq.n	8010a20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	015a      	lsls	r2, r3, #5
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	4413      	add	r3, r2
 8010a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	68ba      	ldr	r2, [r7, #8]
 8010a10:	0151      	lsls	r1, r2, #5
 8010a12:	68fa      	ldr	r2, [r7, #12]
 8010a14:	440a      	add	r2, r1
 8010a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010a1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010a1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	015a      	lsls	r2, r3, #5
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	4413      	add	r3, r2
 8010a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	68ba      	ldr	r2, [r7, #8]
 8010a30:	0151      	lsls	r1, r2, #5
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	440a      	add	r2, r1
 8010a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010a3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010a3e:	6013      	str	r3, [r2, #0]
 8010a40:	e02b      	b.n	8010a9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	015a      	lsls	r2, r3, #5
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	4413      	add	r3, r2
 8010a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	db12      	blt.n	8010a7a <USB_EPSetStall+0xae>
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00f      	beq.n	8010a7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	015a      	lsls	r2, r3, #5
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	4413      	add	r3, r2
 8010a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	68ba      	ldr	r2, [r7, #8]
 8010a6a:	0151      	lsls	r1, r2, #5
 8010a6c:	68fa      	ldr	r2, [r7, #12]
 8010a6e:	440a      	add	r2, r1
 8010a70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010a78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	015a      	lsls	r2, r3, #5
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	4413      	add	r3, r2
 8010a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	68ba      	ldr	r2, [r7, #8]
 8010a8a:	0151      	lsls	r1, r2, #5
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	440a      	add	r2, r1
 8010a90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010a98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010a9a:	2300      	movs	r3, #0
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3714      	adds	r7, #20
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	785b      	ldrb	r3, [r3, #1]
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d128      	bne.n	8010b16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	015a      	lsls	r2, r3, #5
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	4413      	add	r3, r2
 8010acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	68ba      	ldr	r2, [r7, #8]
 8010ad4:	0151      	lsls	r1, r2, #5
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	440a      	add	r2, r1
 8010ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ade:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010ae2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	791b      	ldrb	r3, [r3, #4]
 8010ae8:	2b03      	cmp	r3, #3
 8010aea:	d003      	beq.n	8010af4 <USB_EPClearStall+0x4c>
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	791b      	ldrb	r3, [r3, #4]
 8010af0:	2b02      	cmp	r3, #2
 8010af2:	d138      	bne.n	8010b66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	015a      	lsls	r2, r3, #5
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	4413      	add	r3, r2
 8010afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	68ba      	ldr	r2, [r7, #8]
 8010b04:	0151      	lsls	r1, r2, #5
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	440a      	add	r2, r1
 8010b0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010b12:	6013      	str	r3, [r2, #0]
 8010b14:	e027      	b.n	8010b66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	015a      	lsls	r2, r3, #5
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	68ba      	ldr	r2, [r7, #8]
 8010b26:	0151      	lsls	r1, r2, #5
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	440a      	add	r2, r1
 8010b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010b34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	791b      	ldrb	r3, [r3, #4]
 8010b3a:	2b03      	cmp	r3, #3
 8010b3c:	d003      	beq.n	8010b46 <USB_EPClearStall+0x9e>
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	791b      	ldrb	r3, [r3, #4]
 8010b42:	2b02      	cmp	r3, #2
 8010b44:	d10f      	bne.n	8010b66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	015a      	lsls	r2, r3, #5
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	4413      	add	r3, r2
 8010b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	68ba      	ldr	r2, [r7, #8]
 8010b56:	0151      	lsls	r1, r2, #5
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	440a      	add	r2, r1
 8010b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010b64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3714      	adds	r7, #20
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b085      	sub	sp, #20
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	68fa      	ldr	r2, [r7, #12]
 8010b8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010b92:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010b96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b9e:	681a      	ldr	r2, [r3, #0]
 8010ba0:	78fb      	ldrb	r3, [r7, #3]
 8010ba2:	011b      	lsls	r3, r3, #4
 8010ba4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8010ba8:	68f9      	ldr	r1, [r7, #12]
 8010baa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010bb2:	2300      	movs	r3, #0
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3714      	adds	r7, #20
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbe:	4770      	bx	lr

08010bc0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	68fa      	ldr	r2, [r7, #12]
 8010bd6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010bda:	f023 0303 	bic.w	r3, r3, #3
 8010bde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010bee:	f023 0302 	bic.w	r3, r3, #2
 8010bf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010bf4:	2300      	movs	r3, #0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3714      	adds	r7, #20
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr

08010c02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c02:	b480      	push	{r7}
 8010c04:	b085      	sub	sp, #20
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	68fa      	ldr	r2, [r7, #12]
 8010c18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010c1c:	f023 0303 	bic.w	r3, r3, #3
 8010c20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	68fa      	ldr	r2, [r7, #12]
 8010c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010c30:	f043 0302 	orr.w	r3, r3, #2
 8010c34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c36:	2300      	movs	r3, #0
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3714      	adds	r7, #20
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr

08010c44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b085      	sub	sp, #20
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	695b      	ldr	r3, [r3, #20]
 8010c50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	699b      	ldr	r3, [r3, #24]
 8010c56:	68fa      	ldr	r2, [r7, #12]
 8010c58:	4013      	ands	r3, r2
 8010c5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3714      	adds	r7, #20
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr

08010c6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c6a:	b480      	push	{r7}
 8010c6c:	b085      	sub	sp, #20
 8010c6e:	af00      	add	r7, sp, #0
 8010c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c7c:	699b      	ldr	r3, [r3, #24]
 8010c7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c86:	69db      	ldr	r3, [r3, #28]
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	4013      	ands	r3, r2
 8010c8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	0c1b      	lsrs	r3, r3, #16
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3714      	adds	r7, #20
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr

08010c9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c9e:	b480      	push	{r7}
 8010ca0:	b085      	sub	sp, #20
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cb0:	699b      	ldr	r3, [r3, #24]
 8010cb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cba:	69db      	ldr	r3, [r3, #28]
 8010cbc:	68ba      	ldr	r2, [r7, #8]
 8010cbe:	4013      	ands	r3, r2
 8010cc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	b29b      	uxth	r3, r3
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3714      	adds	r7, #20
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr

08010cd2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010cd2:	b480      	push	{r7}
 8010cd4:	b085      	sub	sp, #20
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
 8010cda:	460b      	mov	r3, r1
 8010cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010ce2:	78fb      	ldrb	r3, [r7, #3]
 8010ce4:	015a      	lsls	r2, r3, #5
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	4413      	add	r3, r2
 8010cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010cee:	689b      	ldr	r3, [r3, #8]
 8010cf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	68ba      	ldr	r2, [r7, #8]
 8010cfc:	4013      	ands	r3, r2
 8010cfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d00:	68bb      	ldr	r3, [r7, #8]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr

08010d0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d0e:	b480      	push	{r7}
 8010d10:	b087      	sub	sp, #28
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
 8010d16:	460b      	mov	r3, r1
 8010d18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d24:	691b      	ldr	r3, [r3, #16]
 8010d26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010d32:	78fb      	ldrb	r3, [r7, #3]
 8010d34:	f003 030f 	and.w	r3, r3, #15
 8010d38:	68fa      	ldr	r2, [r7, #12]
 8010d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8010d3e:	01db      	lsls	r3, r3, #7
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	693a      	ldr	r2, [r7, #16]
 8010d44:	4313      	orrs	r3, r2
 8010d46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010d48:	78fb      	ldrb	r3, [r7, #3]
 8010d4a:	015a      	lsls	r2, r3, #5
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	4413      	add	r3, r2
 8010d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d54:	689b      	ldr	r3, [r3, #8]
 8010d56:	693a      	ldr	r2, [r7, #16]
 8010d58:	4013      	ands	r3, r2
 8010d5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d5c:	68bb      	ldr	r3, [r7, #8]
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	371c      	adds	r7, #28
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr

08010d6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010d6a:	b480      	push	{r7}
 8010d6c:	b083      	sub	sp, #12
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	695b      	ldr	r3, [r3, #20]
 8010d76:	f003 0301 	and.w	r3, r3, #1
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	370c      	adds	r7, #12
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr
	...

08010d88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b085      	sub	sp, #20
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010da2:	4619      	mov	r1, r3
 8010da4:	4b09      	ldr	r3, [pc, #36]	@ (8010dcc <USB_ActivateSetup+0x44>)
 8010da6:	4013      	ands	r3, r2
 8010da8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	68fa      	ldr	r2, [r7, #12]
 8010db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010dbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010dbe:	2300      	movs	r3, #0
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3714      	adds	r7, #20
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr
 8010dcc:	fffff800 	.word	0xfffff800

08010dd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b087      	sub	sp, #28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	460b      	mov	r3, r1
 8010dda:	607a      	str	r2, [r7, #4]
 8010ddc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	333c      	adds	r3, #60	@ 0x3c
 8010de6:	3304      	adds	r3, #4
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	4a26      	ldr	r2, [pc, #152]	@ (8010e88 <USB_EP0_OutStart+0xb8>)
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d90a      	bls.n	8010e0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010e00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010e04:	d101      	bne.n	8010e0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010e06:	2300      	movs	r3, #0
 8010e08:	e037      	b.n	8010e7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e10:	461a      	mov	r2, r3
 8010e12:	2300      	movs	r3, #0
 8010e14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e1c:	691b      	ldr	r3, [r3, #16]
 8010e1e:	697a      	ldr	r2, [r7, #20]
 8010e20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010e24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010e28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e30:	691b      	ldr	r3, [r3, #16]
 8010e32:	697a      	ldr	r2, [r7, #20]
 8010e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010e38:	f043 0318 	orr.w	r3, r3, #24
 8010e3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e44:	691b      	ldr	r3, [r3, #16]
 8010e46:	697a      	ldr	r2, [r7, #20]
 8010e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010e4c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010e50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010e52:	7afb      	ldrb	r3, [r7, #11]
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d10f      	bne.n	8010e78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e5e:	461a      	mov	r2, r3
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	697a      	ldr	r2, [r7, #20]
 8010e6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010e72:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010e76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e78:	2300      	movs	r3, #0
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	371c      	adds	r7, #28
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop
 8010e88:	4f54300a 	.word	0x4f54300a

08010e8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b085      	sub	sp, #20
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010e94:	2300      	movs	r3, #0
 8010e96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ea4:	d901      	bls.n	8010eaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010ea6:	2303      	movs	r3, #3
 8010ea8:	e01b      	b.n	8010ee2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	691b      	ldr	r3, [r3, #16]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	daf2      	bge.n	8010e98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	691b      	ldr	r3, [r3, #16]
 8010eba:	f043 0201 	orr.w	r2, r3, #1
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ece:	d901      	bls.n	8010ed4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010ed0:	2303      	movs	r3, #3
 8010ed2:	e006      	b.n	8010ee2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	691b      	ldr	r3, [r3, #16]
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d0f0      	beq.n	8010ec2 <USB_CoreReset+0x36>

  return HAL_OK;
 8010ee0:	2300      	movs	r3, #0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3714      	adds	r7, #20
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
	...

08010ef0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b084      	sub	sp, #16
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	460b      	mov	r3, r1
 8010efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8010efc:	2010      	movs	r0, #16
 8010efe:	f004 fe7d 	bl	8015bfc <USBD_static_malloc>
 8010f02:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d109      	bne.n	8010f1e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	32b0      	adds	r2, #176	@ 0xb0
 8010f14:	2100      	movs	r1, #0
 8010f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010f1a:	2302      	movs	r3, #2
 8010f1c:	e048      	b.n	8010fb0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	32b0      	adds	r2, #176	@ 0xb0
 8010f28:	68f9      	ldr	r1, [r7, #12]
 8010f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	32b0      	adds	r2, #176	@ 0xb0
 8010f38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	7c1b      	ldrb	r3, [r3, #16]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d10d      	bne.n	8010f66 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8010f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8010fb8 <USBD_HID_Init+0xc8>)
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	f003 020f 	and.w	r2, r3, #15
 8010f52:	6879      	ldr	r1, [r7, #4]
 8010f54:	4613      	mov	r3, r2
 8010f56:	009b      	lsls	r3, r3, #2
 8010f58:	4413      	add	r3, r2
 8010f5a:	009b      	lsls	r3, r3, #2
 8010f5c:	440b      	add	r3, r1
 8010f5e:	3326      	adds	r3, #38	@ 0x26
 8010f60:	2207      	movs	r2, #7
 8010f62:	801a      	strh	r2, [r3, #0]
 8010f64:	e00c      	b.n	8010f80 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8010f66:	4b14      	ldr	r3, [pc, #80]	@ (8010fb8 <USBD_HID_Init+0xc8>)
 8010f68:	781b      	ldrb	r3, [r3, #0]
 8010f6a:	f003 020f 	and.w	r2, r3, #15
 8010f6e:	6879      	ldr	r1, [r7, #4]
 8010f70:	4613      	mov	r3, r2
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	4413      	add	r3, r2
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	440b      	add	r3, r1
 8010f7a:	3326      	adds	r3, #38	@ 0x26
 8010f7c:	220a      	movs	r2, #10
 8010f7e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8010f80:	4b0d      	ldr	r3, [pc, #52]	@ (8010fb8 <USBD_HID_Init+0xc8>)
 8010f82:	7819      	ldrb	r1, [r3, #0]
 8010f84:	2304      	movs	r3, #4
 8010f86:	2203      	movs	r2, #3
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f004 fd26 	bl	80159da <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8010f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8010fb8 <USBD_HID_Init+0xc8>)
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	f003 020f 	and.w	r2, r3, #15
 8010f96:	6879      	ldr	r1, [r7, #4]
 8010f98:	4613      	mov	r3, r2
 8010f9a:	009b      	lsls	r3, r3, #2
 8010f9c:	4413      	add	r3, r2
 8010f9e:	009b      	lsls	r3, r3, #2
 8010fa0:	440b      	add	r3, r1
 8010fa2:	3324      	adds	r3, #36	@ 0x24
 8010fa4:	2201      	movs	r2, #1
 8010fa6:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2200      	movs	r2, #0
 8010fac:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3710      	adds	r7, #16
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	240000c7 	.word	0x240000c7

08010fbc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8010fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8011048 <USBD_HID_DeInit+0x8c>)
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	4619      	mov	r1, r3
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f004 fd29 	bl	8015a26 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8010fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8011048 <USBD_HID_DeInit+0x8c>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	f003 020f 	and.w	r2, r3, #15
 8010fdc:	6879      	ldr	r1, [r7, #4]
 8010fde:	4613      	mov	r3, r2
 8010fe0:	009b      	lsls	r3, r3, #2
 8010fe2:	4413      	add	r3, r2
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	440b      	add	r3, r1
 8010fe8:	3324      	adds	r3, #36	@ 0x24
 8010fea:	2200      	movs	r2, #0
 8010fec:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8010fee:	4b16      	ldr	r3, [pc, #88]	@ (8011048 <USBD_HID_DeInit+0x8c>)
 8010ff0:	781b      	ldrb	r3, [r3, #0]
 8010ff2:	f003 020f 	and.w	r2, r3, #15
 8010ff6:	6879      	ldr	r1, [r7, #4]
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	009b      	lsls	r3, r3, #2
 8010ffc:	4413      	add	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	440b      	add	r3, r1
 8011002:	3326      	adds	r3, #38	@ 0x26
 8011004:	2200      	movs	r2, #0
 8011006:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	32b0      	adds	r2, #176	@ 0xb0
 8011012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d011      	beq.n	801103e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	32b0      	adds	r2, #176	@ 0xb0
 8011024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011028:	4618      	mov	r0, r3
 801102a:	f004 fdf5 	bl	8015c18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	32b0      	adds	r2, #176	@ 0xb0
 8011038:	2100      	movs	r1, #0
 801103a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 801103e:	2300      	movs	r3, #0
}
 8011040:	4618      	mov	r0, r3
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	240000c7 	.word	0x240000c7

0801104c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b086      	sub	sp, #24
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	32b0      	adds	r2, #176	@ 0xb0
 8011060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011064:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8011066:	2300      	movs	r3, #0
 8011068:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 801106a:	2300      	movs	r3, #0
 801106c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d101      	bne.n	8011078 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011074:	2303      	movs	r3, #3
 8011076:	e0e8      	b.n	801124a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011080:	2b00      	cmp	r3, #0
 8011082:	d046      	beq.n	8011112 <USBD_HID_Setup+0xc6>
 8011084:	2b20      	cmp	r3, #32
 8011086:	f040 80d8 	bne.w	801123a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	785b      	ldrb	r3, [r3, #1]
 801108e:	3b02      	subs	r3, #2
 8011090:	2b09      	cmp	r3, #9
 8011092:	d836      	bhi.n	8011102 <USBD_HID_Setup+0xb6>
 8011094:	a201      	add	r2, pc, #4	@ (adr r2, 801109c <USBD_HID_Setup+0x50>)
 8011096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801109a:	bf00      	nop
 801109c:	080110f3 	.word	0x080110f3
 80110a0:	080110d3 	.word	0x080110d3
 80110a4:	08011103 	.word	0x08011103
 80110a8:	08011103 	.word	0x08011103
 80110ac:	08011103 	.word	0x08011103
 80110b0:	08011103 	.word	0x08011103
 80110b4:	08011103 	.word	0x08011103
 80110b8:	08011103 	.word	0x08011103
 80110bc:	080110e1 	.word	0x080110e1
 80110c0:	080110c5 	.word	0x080110c5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	885b      	ldrh	r3, [r3, #2]
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	461a      	mov	r2, r3
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	601a      	str	r2, [r3, #0]
          break;
 80110d0:	e01e      	b.n	8011110 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	2201      	movs	r2, #1
 80110d6:	4619      	mov	r1, r3
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f001 fc0f 	bl	80128fc <USBD_CtlSendData>
          break;
 80110de:	e017      	b.n	8011110 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	885b      	ldrh	r3, [r3, #2]
 80110e4:	0a1b      	lsrs	r3, r3, #8
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	b2db      	uxtb	r3, r3
 80110ea:	461a      	mov	r2, r3
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	605a      	str	r2, [r3, #4]
          break;
 80110f0:	e00e      	b.n	8011110 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	3304      	adds	r3, #4
 80110f6:	2201      	movs	r2, #1
 80110f8:	4619      	mov	r1, r3
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f001 fbfe 	bl	80128fc <USBD_CtlSendData>
          break;
 8011100:	e006      	b.n	8011110 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011102:	6839      	ldr	r1, [r7, #0]
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f001 fb7c 	bl	8012802 <USBD_CtlError>
          ret = USBD_FAIL;
 801110a:	2303      	movs	r3, #3
 801110c:	75fb      	strb	r3, [r7, #23]
          break;
 801110e:	bf00      	nop
      }
      break;
 8011110:	e09a      	b.n	8011248 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	785b      	ldrb	r3, [r3, #1]
 8011116:	2b0b      	cmp	r3, #11
 8011118:	f200 8086 	bhi.w	8011228 <USBD_HID_Setup+0x1dc>
 801111c:	a201      	add	r2, pc, #4	@ (adr r2, 8011124 <USBD_HID_Setup+0xd8>)
 801111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011122:	bf00      	nop
 8011124:	08011155 	.word	0x08011155
 8011128:	08011237 	.word	0x08011237
 801112c:	08011229 	.word	0x08011229
 8011130:	08011229 	.word	0x08011229
 8011134:	08011229 	.word	0x08011229
 8011138:	08011229 	.word	0x08011229
 801113c:	0801117f 	.word	0x0801117f
 8011140:	08011229 	.word	0x08011229
 8011144:	08011229 	.word	0x08011229
 8011148:	08011229 	.word	0x08011229
 801114c:	080111d7 	.word	0x080111d7
 8011150:	08011201 	.word	0x08011201
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801115a:	b2db      	uxtb	r3, r3
 801115c:	2b03      	cmp	r3, #3
 801115e:	d107      	bne.n	8011170 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011160:	f107 030a 	add.w	r3, r7, #10
 8011164:	2202      	movs	r2, #2
 8011166:	4619      	mov	r1, r3
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f001 fbc7 	bl	80128fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801116e:	e063      	b.n	8011238 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011170:	6839      	ldr	r1, [r7, #0]
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f001 fb45 	bl	8012802 <USBD_CtlError>
            ret = USBD_FAIL;
 8011178:	2303      	movs	r3, #3
 801117a:	75fb      	strb	r3, [r7, #23]
          break;
 801117c:	e05c      	b.n	8011238 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	885b      	ldrh	r3, [r3, #2]
 8011182:	0a1b      	lsrs	r3, r3, #8
 8011184:	b29b      	uxth	r3, r3
 8011186:	2b22      	cmp	r3, #34	@ 0x22
 8011188:	d108      	bne.n	801119c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	88db      	ldrh	r3, [r3, #6]
 801118e:	2b3f      	cmp	r3, #63	@ 0x3f
 8011190:	bf28      	it	cs
 8011192:	233f      	movcs	r3, #63	@ 0x3f
 8011194:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8011196:	4b2f      	ldr	r3, [pc, #188]	@ (8011254 <USBD_HID_Setup+0x208>)
 8011198:	613b      	str	r3, [r7, #16]
 801119a:	e015      	b.n	80111c8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	885b      	ldrh	r3, [r3, #2]
 80111a0:	0a1b      	lsrs	r3, r3, #8
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	2b21      	cmp	r3, #33	@ 0x21
 80111a6:	d108      	bne.n	80111ba <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80111a8:	4b2b      	ldr	r3, [pc, #172]	@ (8011258 <USBD_HID_Setup+0x20c>)
 80111aa:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	88db      	ldrh	r3, [r3, #6]
 80111b0:	2b09      	cmp	r3, #9
 80111b2:	bf28      	it	cs
 80111b4:	2309      	movcs	r3, #9
 80111b6:	82bb      	strh	r3, [r7, #20]
 80111b8:	e006      	b.n	80111c8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80111ba:	6839      	ldr	r1, [r7, #0]
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f001 fb20 	bl	8012802 <USBD_CtlError>
            ret = USBD_FAIL;
 80111c2:	2303      	movs	r3, #3
 80111c4:	75fb      	strb	r3, [r7, #23]
            break;
 80111c6:	e037      	b.n	8011238 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80111c8:	8abb      	ldrh	r3, [r7, #20]
 80111ca:	461a      	mov	r2, r3
 80111cc:	6939      	ldr	r1, [r7, #16]
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f001 fb94 	bl	80128fc <USBD_CtlSendData>
          break;
 80111d4:	e030      	b.n	8011238 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	2b03      	cmp	r3, #3
 80111e0:	d107      	bne.n	80111f2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	3308      	adds	r3, #8
 80111e6:	2201      	movs	r2, #1
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f001 fb86 	bl	80128fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80111f0:	e022      	b.n	8011238 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80111f2:	6839      	ldr	r1, [r7, #0]
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f001 fb04 	bl	8012802 <USBD_CtlError>
            ret = USBD_FAIL;
 80111fa:	2303      	movs	r3, #3
 80111fc:	75fb      	strb	r3, [r7, #23]
          break;
 80111fe:	e01b      	b.n	8011238 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011206:	b2db      	uxtb	r3, r3
 8011208:	2b03      	cmp	r3, #3
 801120a:	d106      	bne.n	801121a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	885b      	ldrh	r3, [r3, #2]
 8011210:	b2db      	uxtb	r3, r3
 8011212:	461a      	mov	r2, r3
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011218:	e00e      	b.n	8011238 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 801121a:	6839      	ldr	r1, [r7, #0]
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f001 faf0 	bl	8012802 <USBD_CtlError>
            ret = USBD_FAIL;
 8011222:	2303      	movs	r3, #3
 8011224:	75fb      	strb	r3, [r7, #23]
          break;
 8011226:	e007      	b.n	8011238 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011228:	6839      	ldr	r1, [r7, #0]
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f001 fae9 	bl	8012802 <USBD_CtlError>
          ret = USBD_FAIL;
 8011230:	2303      	movs	r3, #3
 8011232:	75fb      	strb	r3, [r7, #23]
          break;
 8011234:	e000      	b.n	8011238 <USBD_HID_Setup+0x1ec>
          break;
 8011236:	bf00      	nop
      }
      break;
 8011238:	e006      	b.n	8011248 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 801123a:	6839      	ldr	r1, [r7, #0]
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f001 fae0 	bl	8012802 <USBD_CtlError>
      ret = USBD_FAIL;
 8011242:	2303      	movs	r3, #3
 8011244:	75fb      	strb	r3, [r7, #23]
      break;
 8011246:	bf00      	nop
  }

  return (uint8_t)ret;
 8011248:	7dfb      	ldrb	r3, [r7, #23]
}
 801124a:	4618      	mov	r0, r3
 801124c:	3718      	adds	r7, #24
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	24000088 	.word	0x24000088
 8011258:	24000070 	.word	0x24000070

0801125c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	4613      	mov	r3, r2
 8011268:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	32b0      	adds	r2, #176	@ 0xb0
 8011274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011278:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d101      	bne.n	8011284 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011280:	2303      	movs	r3, #3
 8011282:	e014      	b.n	80112ae <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801128a:	b2db      	uxtb	r3, r3
 801128c:	2b03      	cmp	r3, #3
 801128e:	d10d      	bne.n	80112ac <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	7b1b      	ldrb	r3, [r3, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d109      	bne.n	80112ac <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	2201      	movs	r2, #1
 801129c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 801129e:	4b06      	ldr	r3, [pc, #24]	@ (80112b8 <USBD_HID_SendReport+0x5c>)
 80112a0:	7819      	ldrb	r1, [r3, #0]
 80112a2:	88fb      	ldrh	r3, [r7, #6]
 80112a4:	68ba      	ldr	r2, [r7, #8]
 80112a6:	68f8      	ldr	r0, [r7, #12]
 80112a8:	f004 fc65 	bl	8015b76 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3718      	adds	r7, #24
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	240000c7 	.word	0x240000c7

080112bc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80112c4:	2181      	movs	r1, #129	@ 0x81
 80112c6:	4809      	ldr	r0, [pc, #36]	@ (80112ec <USBD_HID_GetFSCfgDesc+0x30>)
 80112c8:	f000 fc3b 	bl	8011b42 <USBD_GetEpDesc>
 80112cc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d002      	beq.n	80112da <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	220a      	movs	r2, #10
 80112d8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2222      	movs	r2, #34	@ 0x22
 80112de:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80112e0:	4b02      	ldr	r3, [pc, #8]	@ (80112ec <USBD_HID_GetFSCfgDesc+0x30>)
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3710      	adds	r7, #16
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	2400004c 	.word	0x2400004c

080112f0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80112f8:	2181      	movs	r1, #129	@ 0x81
 80112fa:	4809      	ldr	r0, [pc, #36]	@ (8011320 <USBD_HID_GetHSCfgDesc+0x30>)
 80112fc:	f000 fc21 	bl	8011b42 <USBD_GetEpDesc>
 8011300:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d002      	beq.n	801130e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2207      	movs	r2, #7
 801130c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2222      	movs	r2, #34	@ 0x22
 8011312:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8011314:	4b02      	ldr	r3, [pc, #8]	@ (8011320 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8011316:	4618      	mov	r0, r3
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	2400004c 	.word	0x2400004c

08011324 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 801132c:	2181      	movs	r1, #129	@ 0x81
 801132e:	4809      	ldr	r0, [pc, #36]	@ (8011354 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8011330:	f000 fc07 	bl	8011b42 <USBD_GetEpDesc>
 8011334:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d002      	beq.n	8011342 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	220a      	movs	r2, #10
 8011340:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2222      	movs	r2, #34	@ 0x22
 8011346:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8011348:	4b02      	ldr	r3, [pc, #8]	@ (8011354 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 801134a:	4618      	mov	r0, r3
 801134c:	3710      	adds	r7, #16
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	2400004c 	.word	0x2400004c

08011358 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
 8011360:	460b      	mov	r3, r1
 8011362:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	32b0      	adds	r2, #176	@ 0xb0
 801136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011372:	2200      	movs	r2, #0
 8011374:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8011376:	2300      	movs	r3, #0
}
 8011378:	4618      	mov	r0, r3
 801137a:	370c      	adds	r7, #12
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	220a      	movs	r2, #10
 8011390:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8011392:	4b03      	ldr	r3, [pc, #12]	@ (80113a0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8011394:	4618      	mov	r0, r3
 8011396:	370c      	adds	r7, #12
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr
 80113a0:	2400007c 	.word	0x2400007c

080113a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b086      	sub	sp, #24
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	4613      	mov	r3, r2
 80113b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d101      	bne.n	80113bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80113b8:	2303      	movs	r3, #3
 80113ba:	e01f      	b.n	80113fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2200      	movs	r2, #0
 80113c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2200      	movs	r2, #0
 80113c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2200      	movs	r2, #0
 80113d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d003      	beq.n	80113e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	68ba      	ldr	r2, [r7, #8]
 80113de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	2201      	movs	r2, #1
 80113e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	79fa      	ldrb	r2, [r7, #7]
 80113ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80113f0:	68f8      	ldr	r0, [r7, #12]
 80113f2:	f004 fa87 	bl	8015904 <USBD_LL_Init>
 80113f6:	4603      	mov	r3, r0
 80113f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80113fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3718      	adds	r7, #24
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801140e:	2300      	movs	r3, #0
 8011410:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d101      	bne.n	801141c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011418:	2303      	movs	r3, #3
 801141a:	e025      	b.n	8011468 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	683a      	ldr	r2, [r7, #0]
 8011420:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	32ae      	adds	r2, #174	@ 0xae
 801142e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00f      	beq.n	8011458 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	32ae      	adds	r2, #174	@ 0xae
 8011442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011448:	f107 020e 	add.w	r2, r7, #14
 801144c:	4610      	mov	r0, r2
 801144e:	4798      	blx	r3
 8011450:	4602      	mov	r2, r0
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801145e:	1c5a      	adds	r2, r3, #1
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011466:	2300      	movs	r3, #0
}
 8011468:	4618      	mov	r0, r3
 801146a:	3710      	adds	r7, #16
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f004 fa93 	bl	80159a4 <USBD_LL_Start>
 801147e:	4603      	mov	r3, r0
}
 8011480:	4618      	mov	r0, r3
 8011482:	3708      	adds	r7, #8
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011490:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011492:	4618      	mov	r0, r3
 8011494:	370c      	adds	r7, #12
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr

0801149e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801149e:	b580      	push	{r7, lr}
 80114a0:	b084      	sub	sp, #16
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6078      	str	r0, [r7, #4]
 80114a6:	460b      	mov	r3, r1
 80114a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80114aa:	2300      	movs	r3, #0
 80114ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d009      	beq.n	80114cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	78fa      	ldrb	r2, [r7, #3]
 80114c2:	4611      	mov	r1, r2
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	4798      	blx	r3
 80114c8:	4603      	mov	r3, r0
 80114ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80114cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b084      	sub	sp, #16
 80114da:	af00      	add	r7, sp, #0
 80114dc:	6078      	str	r0, [r7, #4]
 80114de:	460b      	mov	r3, r1
 80114e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	78fa      	ldrb	r2, [r7, #3]
 80114f0:	4611      	mov	r1, r2
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	4798      	blx	r3
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d001      	beq.n	8011500 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80114fc:	2303      	movs	r3, #3
 80114fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011500:	7bfb      	ldrb	r3, [r7, #15]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801150a:	b580      	push	{r7, lr}
 801150c:	b084      	sub	sp, #16
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
 8011512:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801151a:	6839      	ldr	r1, [r7, #0]
 801151c:	4618      	mov	r0, r3
 801151e:	f001 f936 	bl	801278e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2201      	movs	r2, #1
 8011526:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011530:	461a      	mov	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801153e:	f003 031f 	and.w	r3, r3, #31
 8011542:	2b02      	cmp	r3, #2
 8011544:	d01a      	beq.n	801157c <USBD_LL_SetupStage+0x72>
 8011546:	2b02      	cmp	r3, #2
 8011548:	d822      	bhi.n	8011590 <USBD_LL_SetupStage+0x86>
 801154a:	2b00      	cmp	r3, #0
 801154c:	d002      	beq.n	8011554 <USBD_LL_SetupStage+0x4a>
 801154e:	2b01      	cmp	r3, #1
 8011550:	d00a      	beq.n	8011568 <USBD_LL_SetupStage+0x5e>
 8011552:	e01d      	b.n	8011590 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801155a:	4619      	mov	r1, r3
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f000 fb63 	bl	8011c28 <USBD_StdDevReq>
 8011562:	4603      	mov	r3, r0
 8011564:	73fb      	strb	r3, [r7, #15]
      break;
 8011566:	e020      	b.n	80115aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801156e:	4619      	mov	r1, r3
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f000 fbcb 	bl	8011d0c <USBD_StdItfReq>
 8011576:	4603      	mov	r3, r0
 8011578:	73fb      	strb	r3, [r7, #15]
      break;
 801157a:	e016      	b.n	80115aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011582:	4619      	mov	r1, r3
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 fc2d 	bl	8011de4 <USBD_StdEPReq>
 801158a:	4603      	mov	r3, r0
 801158c:	73fb      	strb	r3, [r7, #15]
      break;
 801158e:	e00c      	b.n	80115aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011596:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801159a:	b2db      	uxtb	r3, r3
 801159c:	4619      	mov	r1, r3
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f004 fa60 	bl	8015a64 <USBD_LL_StallEP>
 80115a4:	4603      	mov	r3, r0
 80115a6:	73fb      	strb	r3, [r7, #15]
      break;
 80115a8:	bf00      	nop
  }

  return ret;
 80115aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3710      	adds	r7, #16
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	460b      	mov	r3, r1
 80115be:	607a      	str	r2, [r7, #4]
 80115c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80115c2:	2300      	movs	r3, #0
 80115c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80115c6:	7afb      	ldrb	r3, [r7, #11]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d16e      	bne.n	80116aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80115d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80115da:	2b03      	cmp	r3, #3
 80115dc:	f040 8098 	bne.w	8011710 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	689a      	ldr	r2, [r3, #8]
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d913      	bls.n	8011614 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	689a      	ldr	r2, [r3, #8]
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	1ad2      	subs	r2, r2, r3
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	68da      	ldr	r2, [r3, #12]
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	689b      	ldr	r3, [r3, #8]
 8011602:	4293      	cmp	r3, r2
 8011604:	bf28      	it	cs
 8011606:	4613      	movcs	r3, r2
 8011608:	461a      	mov	r2, r3
 801160a:	6879      	ldr	r1, [r7, #4]
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f001 f9a1 	bl	8012954 <USBD_CtlContinueRx>
 8011612:	e07d      	b.n	8011710 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801161a:	f003 031f 	and.w	r3, r3, #31
 801161e:	2b02      	cmp	r3, #2
 8011620:	d014      	beq.n	801164c <USBD_LL_DataOutStage+0x98>
 8011622:	2b02      	cmp	r3, #2
 8011624:	d81d      	bhi.n	8011662 <USBD_LL_DataOutStage+0xae>
 8011626:	2b00      	cmp	r3, #0
 8011628:	d002      	beq.n	8011630 <USBD_LL_DataOutStage+0x7c>
 801162a:	2b01      	cmp	r3, #1
 801162c:	d003      	beq.n	8011636 <USBD_LL_DataOutStage+0x82>
 801162e:	e018      	b.n	8011662 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011630:	2300      	movs	r3, #0
 8011632:	75bb      	strb	r3, [r7, #22]
            break;
 8011634:	e018      	b.n	8011668 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801163c:	b2db      	uxtb	r3, r3
 801163e:	4619      	mov	r1, r3
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	f000 fa64 	bl	8011b0e <USBD_CoreFindIF>
 8011646:	4603      	mov	r3, r0
 8011648:	75bb      	strb	r3, [r7, #22]
            break;
 801164a:	e00d      	b.n	8011668 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011652:	b2db      	uxtb	r3, r3
 8011654:	4619      	mov	r1, r3
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f000 fa66 	bl	8011b28 <USBD_CoreFindEP>
 801165c:	4603      	mov	r3, r0
 801165e:	75bb      	strb	r3, [r7, #22]
            break;
 8011660:	e002      	b.n	8011668 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011662:	2300      	movs	r3, #0
 8011664:	75bb      	strb	r3, [r7, #22]
            break;
 8011666:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011668:	7dbb      	ldrb	r3, [r7, #22]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d119      	bne.n	80116a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011674:	b2db      	uxtb	r3, r3
 8011676:	2b03      	cmp	r3, #3
 8011678:	d113      	bne.n	80116a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801167a:	7dba      	ldrb	r2, [r7, #22]
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	32ae      	adds	r2, #174	@ 0xae
 8011680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011684:	691b      	ldr	r3, [r3, #16]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d00b      	beq.n	80116a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801168a:	7dba      	ldrb	r2, [r7, #22]
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011692:	7dba      	ldrb	r2, [r7, #22]
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	32ae      	adds	r2, #174	@ 0xae
 8011698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801169c:	691b      	ldr	r3, [r3, #16]
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80116a2:	68f8      	ldr	r0, [r7, #12]
 80116a4:	f001 f967 	bl	8012976 <USBD_CtlSendStatus>
 80116a8:	e032      	b.n	8011710 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80116aa:	7afb      	ldrb	r3, [r7, #11]
 80116ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	4619      	mov	r1, r3
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f000 fa37 	bl	8011b28 <USBD_CoreFindEP>
 80116ba:	4603      	mov	r3, r0
 80116bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80116be:	7dbb      	ldrb	r3, [r7, #22]
 80116c0:	2bff      	cmp	r3, #255	@ 0xff
 80116c2:	d025      	beq.n	8011710 <USBD_LL_DataOutStage+0x15c>
 80116c4:	7dbb      	ldrb	r3, [r7, #22]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d122      	bne.n	8011710 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	2b03      	cmp	r3, #3
 80116d4:	d117      	bne.n	8011706 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80116d6:	7dba      	ldrb	r2, [r7, #22]
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	32ae      	adds	r2, #174	@ 0xae
 80116dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116e0:	699b      	ldr	r3, [r3, #24]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00f      	beq.n	8011706 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80116e6:	7dba      	ldrb	r2, [r7, #22]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80116ee:	7dba      	ldrb	r2, [r7, #22]
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	32ae      	adds	r2, #174	@ 0xae
 80116f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116f8:	699b      	ldr	r3, [r3, #24]
 80116fa:	7afa      	ldrb	r2, [r7, #11]
 80116fc:	4611      	mov	r1, r2
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	4798      	blx	r3
 8011702:	4603      	mov	r3, r0
 8011704:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011706:	7dfb      	ldrb	r3, [r7, #23]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d001      	beq.n	8011710 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801170c:	7dfb      	ldrb	r3, [r7, #23]
 801170e:	e000      	b.n	8011712 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011710:	2300      	movs	r3, #0
}
 8011712:	4618      	mov	r0, r3
 8011714:	3718      	adds	r7, #24
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}

0801171a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801171a:	b580      	push	{r7, lr}
 801171c:	b086      	sub	sp, #24
 801171e:	af00      	add	r7, sp, #0
 8011720:	60f8      	str	r0, [r7, #12]
 8011722:	460b      	mov	r3, r1
 8011724:	607a      	str	r2, [r7, #4]
 8011726:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011728:	7afb      	ldrb	r3, [r7, #11]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d16f      	bne.n	801180e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	3314      	adds	r3, #20
 8011732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801173a:	2b02      	cmp	r3, #2
 801173c:	d15a      	bne.n	80117f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	689a      	ldr	r2, [r3, #8]
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	429a      	cmp	r2, r3
 8011748:	d914      	bls.n	8011774 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	689a      	ldr	r2, [r3, #8]
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	68db      	ldr	r3, [r3, #12]
 8011752:	1ad2      	subs	r2, r2, r3
 8011754:	693b      	ldr	r3, [r7, #16]
 8011756:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	689b      	ldr	r3, [r3, #8]
 801175c:	461a      	mov	r2, r3
 801175e:	6879      	ldr	r1, [r7, #4]
 8011760:	68f8      	ldr	r0, [r7, #12]
 8011762:	f001 f8e6 	bl	8012932 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011766:	2300      	movs	r3, #0
 8011768:	2200      	movs	r2, #0
 801176a:	2100      	movs	r1, #0
 801176c:	68f8      	ldr	r0, [r7, #12]
 801176e:	f004 fa23 	bl	8015bb8 <USBD_LL_PrepareReceive>
 8011772:	e03f      	b.n	80117f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	68da      	ldr	r2, [r3, #12]
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	689b      	ldr	r3, [r3, #8]
 801177c:	429a      	cmp	r2, r3
 801177e:	d11c      	bne.n	80117ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	685a      	ldr	r2, [r3, #4]
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011788:	429a      	cmp	r2, r3
 801178a:	d316      	bcc.n	80117ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	685a      	ldr	r2, [r3, #4]
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011796:	429a      	cmp	r2, r3
 8011798:	d20f      	bcs.n	80117ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801179a:	2200      	movs	r2, #0
 801179c:	2100      	movs	r1, #0
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f001 f8c7 	bl	8012932 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2200      	movs	r2, #0
 80117a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80117ac:	2300      	movs	r3, #0
 80117ae:	2200      	movs	r2, #0
 80117b0:	2100      	movs	r1, #0
 80117b2:	68f8      	ldr	r0, [r7, #12]
 80117b4:	f004 fa00 	bl	8015bb8 <USBD_LL_PrepareReceive>
 80117b8:	e01c      	b.n	80117f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	2b03      	cmp	r3, #3
 80117c4:	d10f      	bne.n	80117e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117cc:	68db      	ldr	r3, [r3, #12]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d009      	beq.n	80117e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2200      	movs	r2, #0
 80117d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117e0:	68db      	ldr	r3, [r3, #12]
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80117e6:	2180      	movs	r1, #128	@ 0x80
 80117e8:	68f8      	ldr	r0, [r7, #12]
 80117ea:	f004 f93b 	bl	8015a64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80117ee:	68f8      	ldr	r0, [r7, #12]
 80117f0:	f001 f8d4 	bl	801299c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d03a      	beq.n	8011874 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f7ff fe42 	bl	8011488 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2200      	movs	r2, #0
 8011808:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801180c:	e032      	b.n	8011874 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801180e:	7afb      	ldrb	r3, [r7, #11]
 8011810:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011814:	b2db      	uxtb	r3, r3
 8011816:	4619      	mov	r1, r3
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f000 f985 	bl	8011b28 <USBD_CoreFindEP>
 801181e:	4603      	mov	r3, r0
 8011820:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011822:	7dfb      	ldrb	r3, [r7, #23]
 8011824:	2bff      	cmp	r3, #255	@ 0xff
 8011826:	d025      	beq.n	8011874 <USBD_LL_DataInStage+0x15a>
 8011828:	7dfb      	ldrb	r3, [r7, #23]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d122      	bne.n	8011874 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011834:	b2db      	uxtb	r3, r3
 8011836:	2b03      	cmp	r3, #3
 8011838:	d11c      	bne.n	8011874 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801183a:	7dfa      	ldrb	r2, [r7, #23]
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	32ae      	adds	r2, #174	@ 0xae
 8011840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011844:	695b      	ldr	r3, [r3, #20]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d014      	beq.n	8011874 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801184a:	7dfa      	ldrb	r2, [r7, #23]
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011852:	7dfa      	ldrb	r2, [r7, #23]
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	32ae      	adds	r2, #174	@ 0xae
 8011858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801185c:	695b      	ldr	r3, [r3, #20]
 801185e:	7afa      	ldrb	r2, [r7, #11]
 8011860:	4611      	mov	r1, r2
 8011862:	68f8      	ldr	r0, [r7, #12]
 8011864:	4798      	blx	r3
 8011866:	4603      	mov	r3, r0
 8011868:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801186a:	7dbb      	ldrb	r3, [r7, #22]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d001      	beq.n	8011874 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011870:	7dbb      	ldrb	r3, [r7, #22]
 8011872:	e000      	b.n	8011876 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011874:	2300      	movs	r3, #0
}
 8011876:	4618      	mov	r0, r3
 8011878:	3718      	adds	r7, #24
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b084      	sub	sp, #16
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011886:	2300      	movs	r3, #0
 8011888:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2201      	movs	r2, #1
 801188e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2200      	movs	r2, #0
 8011896:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2200      	movs	r2, #0
 801189e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d014      	beq.n	80118e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d00e      	beq.n	80118e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	6852      	ldr	r2, [r2, #4]
 80118d2:	b2d2      	uxtb	r2, r2
 80118d4:	4611      	mov	r1, r2
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	4798      	blx	r3
 80118da:	4603      	mov	r3, r0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d001      	beq.n	80118e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80118e0:	2303      	movs	r3, #3
 80118e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80118e4:	2340      	movs	r3, #64	@ 0x40
 80118e6:	2200      	movs	r2, #0
 80118e8:	2100      	movs	r1, #0
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f004 f875 	bl	80159da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2201      	movs	r2, #1
 80118f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2240      	movs	r2, #64	@ 0x40
 80118fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011900:	2340      	movs	r3, #64	@ 0x40
 8011902:	2200      	movs	r2, #0
 8011904:	2180      	movs	r1, #128	@ 0x80
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f004 f867 	bl	80159da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2201      	movs	r2, #1
 8011910:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2240      	movs	r2, #64	@ 0x40
 8011916:	621a      	str	r2, [r3, #32]

  return ret;
 8011918:	7bfb      	ldrb	r3, [r7, #15]
}
 801191a:	4618      	mov	r0, r3
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011922:	b480      	push	{r7}
 8011924:	b083      	sub	sp, #12
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
 801192a:	460b      	mov	r3, r1
 801192c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	78fa      	ldrb	r2, [r7, #3]
 8011932:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011942:	b480      	push	{r7}
 8011944:	b083      	sub	sp, #12
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011950:	b2db      	uxtb	r3, r3
 8011952:	2b04      	cmp	r3, #4
 8011954:	d006      	beq.n	8011964 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801195c:	b2da      	uxtb	r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2204      	movs	r2, #4
 8011968:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801196c:	2300      	movs	r3, #0
}
 801196e:	4618      	mov	r0, r3
 8011970:	370c      	adds	r7, #12
 8011972:	46bd      	mov	sp, r7
 8011974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011978:	4770      	bx	lr

0801197a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801197a:	b480      	push	{r7}
 801197c:	b083      	sub	sp, #12
 801197e:	af00      	add	r7, sp, #0
 8011980:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011988:	b2db      	uxtb	r3, r3
 801198a:	2b04      	cmp	r3, #4
 801198c:	d106      	bne.n	801199c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011994:	b2da      	uxtb	r2, r3
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 801199c:	2300      	movs	r3, #0
}
 801199e:	4618      	mov	r0, r3
 80119a0:	370c      	adds	r7, #12
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr

080119aa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80119aa:	b580      	push	{r7, lr}
 80119ac:	b082      	sub	sp, #8
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	2b03      	cmp	r3, #3
 80119bc:	d110      	bne.n	80119e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d00b      	beq.n	80119e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119ce:	69db      	ldr	r3, [r3, #28]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d005      	beq.n	80119e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119da:	69db      	ldr	r3, [r3, #28]
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3708      	adds	r7, #8
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b082      	sub	sp, #8
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
 80119f2:	460b      	mov	r3, r1
 80119f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	32ae      	adds	r2, #174	@ 0xae
 8011a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d101      	bne.n	8011a0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011a08:	2303      	movs	r3, #3
 8011a0a:	e01c      	b.n	8011a46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	2b03      	cmp	r3, #3
 8011a16:	d115      	bne.n	8011a44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	32ae      	adds	r2, #174	@ 0xae
 8011a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a26:	6a1b      	ldr	r3, [r3, #32]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d00b      	beq.n	8011a44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	32ae      	adds	r2, #174	@ 0xae
 8011a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a3a:	6a1b      	ldr	r3, [r3, #32]
 8011a3c:	78fa      	ldrb	r2, [r7, #3]
 8011a3e:	4611      	mov	r1, r2
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011a44:	2300      	movs	r3, #0
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}

08011a4e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011a4e:	b580      	push	{r7, lr}
 8011a50:	b082      	sub	sp, #8
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	6078      	str	r0, [r7, #4]
 8011a56:	460b      	mov	r3, r1
 8011a58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	32ae      	adds	r2, #174	@ 0xae
 8011a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d101      	bne.n	8011a70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011a6c:	2303      	movs	r3, #3
 8011a6e:	e01c      	b.n	8011aaa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a76:	b2db      	uxtb	r3, r3
 8011a78:	2b03      	cmp	r3, #3
 8011a7a:	d115      	bne.n	8011aa8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	32ae      	adds	r2, #174	@ 0xae
 8011a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d00b      	beq.n	8011aa8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	32ae      	adds	r2, #174	@ 0xae
 8011a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011aa0:	78fa      	ldrb	r2, [r7, #3]
 8011aa2:	4611      	mov	r1, r2
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011aa8:	2300      	movs	r3, #0
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3708      	adds	r7, #8
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}

08011ab2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011ab2:	b480      	push	{r7}
 8011ab4:	b083      	sub	sp, #12
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011aba:	2300      	movs	r3, #0
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d00e      	beq.n	8011b04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011aec:	685b      	ldr	r3, [r3, #4]
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	6852      	ldr	r2, [r2, #4]
 8011af2:	b2d2      	uxtb	r2, r2
 8011af4:	4611      	mov	r1, r2
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	4798      	blx	r3
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d001      	beq.n	8011b04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011b00:	2303      	movs	r3, #3
 8011b02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011b0e:	b480      	push	{r7}
 8011b10:	b083      	sub	sp, #12
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	460b      	mov	r3, r1
 8011b18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011b1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	370c      	adds	r7, #12
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	460b      	mov	r3, r1
 8011b32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011b34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	370c      	adds	r7, #12
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b40:	4770      	bx	lr

08011b42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b086      	sub	sp, #24
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	6078      	str	r0, [r7, #4]
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011b56:	2300      	movs	r3, #0
 8011b58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	885b      	ldrh	r3, [r3, #2]
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	68fa      	ldr	r2, [r7, #12]
 8011b62:	7812      	ldrb	r2, [r2, #0]
 8011b64:	4293      	cmp	r3, r2
 8011b66:	d91f      	bls.n	8011ba8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011b6e:	e013      	b.n	8011b98 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011b70:	f107 030a 	add.w	r3, r7, #10
 8011b74:	4619      	mov	r1, r3
 8011b76:	6978      	ldr	r0, [r7, #20]
 8011b78:	f000 f81b 	bl	8011bb2 <USBD_GetNextDesc>
 8011b7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	785b      	ldrb	r3, [r3, #1]
 8011b82:	2b05      	cmp	r3, #5
 8011b84:	d108      	bne.n	8011b98 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	789b      	ldrb	r3, [r3, #2]
 8011b8e:	78fa      	ldrb	r2, [r7, #3]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d008      	beq.n	8011ba6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011b94:	2300      	movs	r3, #0
 8011b96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	885b      	ldrh	r3, [r3, #2]
 8011b9c:	b29a      	uxth	r2, r3
 8011b9e:	897b      	ldrh	r3, [r7, #10]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d8e5      	bhi.n	8011b70 <USBD_GetEpDesc+0x2e>
 8011ba4:	e000      	b.n	8011ba8 <USBD_GetEpDesc+0x66>
          break;
 8011ba6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011ba8:	693b      	ldr	r3, [r7, #16]
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3718      	adds	r7, #24
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}

08011bb2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011bb2:	b480      	push	{r7}
 8011bb4:	b085      	sub	sp, #20
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	6078      	str	r0, [r7, #4]
 8011bba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	7812      	ldrb	r2, [r2, #0]
 8011bc8:	4413      	add	r3, r2
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4413      	add	r3, r2
 8011bda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3714      	adds	r7, #20
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr

08011bea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011bea:	b480      	push	{r7}
 8011bec:	b087      	sub	sp, #28
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011c08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011c0c:	021b      	lsls	r3, r3, #8
 8011c0e:	b21a      	sxth	r2, r3
 8011c10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011c14:	4313      	orrs	r3, r2
 8011c16:	b21b      	sxth	r3, r3
 8011c18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011c1a:	89fb      	ldrh	r3, [r7, #14]
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	371c      	adds	r7, #28
 8011c20:	46bd      	mov	sp, r7
 8011c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c26:	4770      	bx	lr

08011c28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c32:	2300      	movs	r3, #0
 8011c34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011c3e:	2b40      	cmp	r3, #64	@ 0x40
 8011c40:	d005      	beq.n	8011c4e <USBD_StdDevReq+0x26>
 8011c42:	2b40      	cmp	r3, #64	@ 0x40
 8011c44:	d857      	bhi.n	8011cf6 <USBD_StdDevReq+0xce>
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d00f      	beq.n	8011c6a <USBD_StdDevReq+0x42>
 8011c4a:	2b20      	cmp	r3, #32
 8011c4c:	d153      	bne.n	8011cf6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	32ae      	adds	r2, #174	@ 0xae
 8011c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c5c:	689b      	ldr	r3, [r3, #8]
 8011c5e:	6839      	ldr	r1, [r7, #0]
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	4798      	blx	r3
 8011c64:	4603      	mov	r3, r0
 8011c66:	73fb      	strb	r3, [r7, #15]
      break;
 8011c68:	e04a      	b.n	8011d00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	785b      	ldrb	r3, [r3, #1]
 8011c6e:	2b09      	cmp	r3, #9
 8011c70:	d83b      	bhi.n	8011cea <USBD_StdDevReq+0xc2>
 8011c72:	a201      	add	r2, pc, #4	@ (adr r2, 8011c78 <USBD_StdDevReq+0x50>)
 8011c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c78:	08011ccd 	.word	0x08011ccd
 8011c7c:	08011ce1 	.word	0x08011ce1
 8011c80:	08011ceb 	.word	0x08011ceb
 8011c84:	08011cd7 	.word	0x08011cd7
 8011c88:	08011ceb 	.word	0x08011ceb
 8011c8c:	08011cab 	.word	0x08011cab
 8011c90:	08011ca1 	.word	0x08011ca1
 8011c94:	08011ceb 	.word	0x08011ceb
 8011c98:	08011cc3 	.word	0x08011cc3
 8011c9c:	08011cb5 	.word	0x08011cb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011ca0:	6839      	ldr	r1, [r7, #0]
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 fa3c 	bl	8012120 <USBD_GetDescriptor>
          break;
 8011ca8:	e024      	b.n	8011cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011caa:	6839      	ldr	r1, [r7, #0]
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f000 fbcb 	bl	8012448 <USBD_SetAddress>
          break;
 8011cb2:	e01f      	b.n	8011cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 fc0a 	bl	80124d0 <USBD_SetConfig>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	73fb      	strb	r3, [r7, #15]
          break;
 8011cc0:	e018      	b.n	8011cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011cc2:	6839      	ldr	r1, [r7, #0]
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f000 fcad 	bl	8012624 <USBD_GetConfig>
          break;
 8011cca:	e013      	b.n	8011cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011ccc:	6839      	ldr	r1, [r7, #0]
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f000 fcde 	bl	8012690 <USBD_GetStatus>
          break;
 8011cd4:	e00e      	b.n	8011cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011cd6:	6839      	ldr	r1, [r7, #0]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 fd0d 	bl	80126f8 <USBD_SetFeature>
          break;
 8011cde:	e009      	b.n	8011cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011ce0:	6839      	ldr	r1, [r7, #0]
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f000 fd31 	bl	801274a <USBD_ClrFeature>
          break;
 8011ce8:	e004      	b.n	8011cf4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011cea:	6839      	ldr	r1, [r7, #0]
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f000 fd88 	bl	8012802 <USBD_CtlError>
          break;
 8011cf2:	bf00      	nop
      }
      break;
 8011cf4:	e004      	b.n	8011d00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011cf6:	6839      	ldr	r1, [r7, #0]
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f000 fd82 	bl	8012802 <USBD_CtlError>
      break;
 8011cfe:	bf00      	nop
  }

  return ret;
 8011d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3710      	adds	r7, #16
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop

08011d0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b084      	sub	sp, #16
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d16:	2300      	movs	r3, #0
 8011d18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011d22:	2b40      	cmp	r3, #64	@ 0x40
 8011d24:	d005      	beq.n	8011d32 <USBD_StdItfReq+0x26>
 8011d26:	2b40      	cmp	r3, #64	@ 0x40
 8011d28:	d852      	bhi.n	8011dd0 <USBD_StdItfReq+0xc4>
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d001      	beq.n	8011d32 <USBD_StdItfReq+0x26>
 8011d2e:	2b20      	cmp	r3, #32
 8011d30:	d14e      	bne.n	8011dd0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	2b02      	cmp	r3, #2
 8011d3e:	d840      	bhi.n	8011dc2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	889b      	ldrh	r3, [r3, #4]
 8011d44:	b2db      	uxtb	r3, r3
 8011d46:	2b01      	cmp	r3, #1
 8011d48:	d836      	bhi.n	8011db8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	889b      	ldrh	r3, [r3, #4]
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	4619      	mov	r1, r3
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f7ff fedb 	bl	8011b0e <USBD_CoreFindIF>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011d5c:	7bbb      	ldrb	r3, [r7, #14]
 8011d5e:	2bff      	cmp	r3, #255	@ 0xff
 8011d60:	d01d      	beq.n	8011d9e <USBD_StdItfReq+0x92>
 8011d62:	7bbb      	ldrb	r3, [r7, #14]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d11a      	bne.n	8011d9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011d68:	7bba      	ldrb	r2, [r7, #14]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	32ae      	adds	r2, #174	@ 0xae
 8011d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00f      	beq.n	8011d98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011d78:	7bba      	ldrb	r2, [r7, #14]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011d80:	7bba      	ldrb	r2, [r7, #14]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	32ae      	adds	r2, #174	@ 0xae
 8011d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d8a:	689b      	ldr	r3, [r3, #8]
 8011d8c:	6839      	ldr	r1, [r7, #0]
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	4798      	blx	r3
 8011d92:	4603      	mov	r3, r0
 8011d94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011d96:	e004      	b.n	8011da2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011d98:	2303      	movs	r3, #3
 8011d9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011d9c:	e001      	b.n	8011da2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011d9e:	2303      	movs	r3, #3
 8011da0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	88db      	ldrh	r3, [r3, #6]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d110      	bne.n	8011dcc <USBD_StdItfReq+0xc0>
 8011daa:	7bfb      	ldrb	r3, [r7, #15]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d10d      	bne.n	8011dcc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f000 fde0 	bl	8012976 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011db6:	e009      	b.n	8011dcc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011db8:	6839      	ldr	r1, [r7, #0]
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f000 fd21 	bl	8012802 <USBD_CtlError>
          break;
 8011dc0:	e004      	b.n	8011dcc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011dc2:	6839      	ldr	r1, [r7, #0]
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f000 fd1c 	bl	8012802 <USBD_CtlError>
          break;
 8011dca:	e000      	b.n	8011dce <USBD_StdItfReq+0xc2>
          break;
 8011dcc:	bf00      	nop
      }
      break;
 8011dce:	e004      	b.n	8011dda <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011dd0:	6839      	ldr	r1, [r7, #0]
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f000 fd15 	bl	8012802 <USBD_CtlError>
      break;
 8011dd8:	bf00      	nop
  }

  return ret;
 8011dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3710      	adds	r7, #16
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011dee:	2300      	movs	r3, #0
 8011df0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	889b      	ldrh	r3, [r3, #4]
 8011df6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011e00:	2b40      	cmp	r3, #64	@ 0x40
 8011e02:	d007      	beq.n	8011e14 <USBD_StdEPReq+0x30>
 8011e04:	2b40      	cmp	r3, #64	@ 0x40
 8011e06:	f200 817f 	bhi.w	8012108 <USBD_StdEPReq+0x324>
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d02a      	beq.n	8011e64 <USBD_StdEPReq+0x80>
 8011e0e:	2b20      	cmp	r3, #32
 8011e10:	f040 817a 	bne.w	8012108 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011e14:	7bbb      	ldrb	r3, [r7, #14]
 8011e16:	4619      	mov	r1, r3
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f7ff fe85 	bl	8011b28 <USBD_CoreFindEP>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011e22:	7b7b      	ldrb	r3, [r7, #13]
 8011e24:	2bff      	cmp	r3, #255	@ 0xff
 8011e26:	f000 8174 	beq.w	8012112 <USBD_StdEPReq+0x32e>
 8011e2a:	7b7b      	ldrb	r3, [r7, #13]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f040 8170 	bne.w	8012112 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011e32:	7b7a      	ldrb	r2, [r7, #13]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011e3a:	7b7a      	ldrb	r2, [r7, #13]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	32ae      	adds	r2, #174	@ 0xae
 8011e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e44:	689b      	ldr	r3, [r3, #8]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	f000 8163 	beq.w	8012112 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011e4c:	7b7a      	ldrb	r2, [r7, #13]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	32ae      	adds	r2, #174	@ 0xae
 8011e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e56:	689b      	ldr	r3, [r3, #8]
 8011e58:	6839      	ldr	r1, [r7, #0]
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	4798      	blx	r3
 8011e5e:	4603      	mov	r3, r0
 8011e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011e62:	e156      	b.n	8012112 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	785b      	ldrb	r3, [r3, #1]
 8011e68:	2b03      	cmp	r3, #3
 8011e6a:	d008      	beq.n	8011e7e <USBD_StdEPReq+0x9a>
 8011e6c:	2b03      	cmp	r3, #3
 8011e6e:	f300 8145 	bgt.w	80120fc <USBD_StdEPReq+0x318>
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f000 809b 	beq.w	8011fae <USBD_StdEPReq+0x1ca>
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d03c      	beq.n	8011ef6 <USBD_StdEPReq+0x112>
 8011e7c:	e13e      	b.n	80120fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e84:	b2db      	uxtb	r3, r3
 8011e86:	2b02      	cmp	r3, #2
 8011e88:	d002      	beq.n	8011e90 <USBD_StdEPReq+0xac>
 8011e8a:	2b03      	cmp	r3, #3
 8011e8c:	d016      	beq.n	8011ebc <USBD_StdEPReq+0xd8>
 8011e8e:	e02c      	b.n	8011eea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011e90:	7bbb      	ldrb	r3, [r7, #14]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d00d      	beq.n	8011eb2 <USBD_StdEPReq+0xce>
 8011e96:	7bbb      	ldrb	r3, [r7, #14]
 8011e98:	2b80      	cmp	r3, #128	@ 0x80
 8011e9a:	d00a      	beq.n	8011eb2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011e9c:	7bbb      	ldrb	r3, [r7, #14]
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f003 fddf 	bl	8015a64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ea6:	2180      	movs	r1, #128	@ 0x80
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f003 fddb 	bl	8015a64 <USBD_LL_StallEP>
 8011eae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011eb0:	e020      	b.n	8011ef4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011eb2:	6839      	ldr	r1, [r7, #0]
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f000 fca4 	bl	8012802 <USBD_CtlError>
              break;
 8011eba:	e01b      	b.n	8011ef4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	885b      	ldrh	r3, [r3, #2]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d10e      	bne.n	8011ee2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011ec4:	7bbb      	ldrb	r3, [r7, #14]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d00b      	beq.n	8011ee2 <USBD_StdEPReq+0xfe>
 8011eca:	7bbb      	ldrb	r3, [r7, #14]
 8011ecc:	2b80      	cmp	r3, #128	@ 0x80
 8011ece:	d008      	beq.n	8011ee2 <USBD_StdEPReq+0xfe>
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	88db      	ldrh	r3, [r3, #6]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d104      	bne.n	8011ee2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ed8:	7bbb      	ldrb	r3, [r7, #14]
 8011eda:	4619      	mov	r1, r3
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f003 fdc1 	bl	8015a64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f000 fd47 	bl	8012976 <USBD_CtlSendStatus>

              break;
 8011ee8:	e004      	b.n	8011ef4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011eea:	6839      	ldr	r1, [r7, #0]
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f000 fc88 	bl	8012802 <USBD_CtlError>
              break;
 8011ef2:	bf00      	nop
          }
          break;
 8011ef4:	e107      	b.n	8012106 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011efc:	b2db      	uxtb	r3, r3
 8011efe:	2b02      	cmp	r3, #2
 8011f00:	d002      	beq.n	8011f08 <USBD_StdEPReq+0x124>
 8011f02:	2b03      	cmp	r3, #3
 8011f04:	d016      	beq.n	8011f34 <USBD_StdEPReq+0x150>
 8011f06:	e04b      	b.n	8011fa0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f08:	7bbb      	ldrb	r3, [r7, #14]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00d      	beq.n	8011f2a <USBD_StdEPReq+0x146>
 8011f0e:	7bbb      	ldrb	r3, [r7, #14]
 8011f10:	2b80      	cmp	r3, #128	@ 0x80
 8011f12:	d00a      	beq.n	8011f2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f14:	7bbb      	ldrb	r3, [r7, #14]
 8011f16:	4619      	mov	r1, r3
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f003 fda3 	bl	8015a64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f1e:	2180      	movs	r1, #128	@ 0x80
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f003 fd9f 	bl	8015a64 <USBD_LL_StallEP>
 8011f26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011f28:	e040      	b.n	8011fac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011f2a:	6839      	ldr	r1, [r7, #0]
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f000 fc68 	bl	8012802 <USBD_CtlError>
              break;
 8011f32:	e03b      	b.n	8011fac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	885b      	ldrh	r3, [r3, #2]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d136      	bne.n	8011faa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011f3c:	7bbb      	ldrb	r3, [r7, #14]
 8011f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d004      	beq.n	8011f50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011f46:	7bbb      	ldrb	r3, [r7, #14]
 8011f48:	4619      	mov	r1, r3
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f003 fda9 	bl	8015aa2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 fd10 	bl	8012976 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011f56:	7bbb      	ldrb	r3, [r7, #14]
 8011f58:	4619      	mov	r1, r3
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7ff fde4 	bl	8011b28 <USBD_CoreFindEP>
 8011f60:	4603      	mov	r3, r0
 8011f62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f64:	7b7b      	ldrb	r3, [r7, #13]
 8011f66:	2bff      	cmp	r3, #255	@ 0xff
 8011f68:	d01f      	beq.n	8011faa <USBD_StdEPReq+0x1c6>
 8011f6a:	7b7b      	ldrb	r3, [r7, #13]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d11c      	bne.n	8011faa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011f70:	7b7a      	ldrb	r2, [r7, #13]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011f78:	7b7a      	ldrb	r2, [r7, #13]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	32ae      	adds	r2, #174	@ 0xae
 8011f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f82:	689b      	ldr	r3, [r3, #8]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d010      	beq.n	8011faa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011f88:	7b7a      	ldrb	r2, [r7, #13]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	32ae      	adds	r2, #174	@ 0xae
 8011f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f92:	689b      	ldr	r3, [r3, #8]
 8011f94:	6839      	ldr	r1, [r7, #0]
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	4798      	blx	r3
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011f9e:	e004      	b.n	8011faa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011fa0:	6839      	ldr	r1, [r7, #0]
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f000 fc2d 	bl	8012802 <USBD_CtlError>
              break;
 8011fa8:	e000      	b.n	8011fac <USBD_StdEPReq+0x1c8>
              break;
 8011faa:	bf00      	nop
          }
          break;
 8011fac:	e0ab      	b.n	8012106 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fb4:	b2db      	uxtb	r3, r3
 8011fb6:	2b02      	cmp	r3, #2
 8011fb8:	d002      	beq.n	8011fc0 <USBD_StdEPReq+0x1dc>
 8011fba:	2b03      	cmp	r3, #3
 8011fbc:	d032      	beq.n	8012024 <USBD_StdEPReq+0x240>
 8011fbe:	e097      	b.n	80120f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fc0:	7bbb      	ldrb	r3, [r7, #14]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d007      	beq.n	8011fd6 <USBD_StdEPReq+0x1f2>
 8011fc6:	7bbb      	ldrb	r3, [r7, #14]
 8011fc8:	2b80      	cmp	r3, #128	@ 0x80
 8011fca:	d004      	beq.n	8011fd6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011fcc:	6839      	ldr	r1, [r7, #0]
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f000 fc17 	bl	8012802 <USBD_CtlError>
                break;
 8011fd4:	e091      	b.n	80120fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	da0b      	bge.n	8011ff6 <USBD_StdEPReq+0x212>
 8011fde:	7bbb      	ldrb	r3, [r7, #14]
 8011fe0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011fe4:	4613      	mov	r3, r2
 8011fe6:	009b      	lsls	r3, r3, #2
 8011fe8:	4413      	add	r3, r2
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	3310      	adds	r3, #16
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	3304      	adds	r3, #4
 8011ff4:	e00b      	b.n	801200e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011ff6:	7bbb      	ldrb	r3, [r7, #14]
 8011ff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	4413      	add	r3, r2
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012008:	687a      	ldr	r2, [r7, #4]
 801200a:	4413      	add	r3, r2
 801200c:	3304      	adds	r3, #4
 801200e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	2200      	movs	r2, #0
 8012014:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	2202      	movs	r2, #2
 801201a:	4619      	mov	r1, r3
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 fc6d 	bl	80128fc <USBD_CtlSendData>
              break;
 8012022:	e06a      	b.n	80120fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012028:	2b00      	cmp	r3, #0
 801202a:	da11      	bge.n	8012050 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801202c:	7bbb      	ldrb	r3, [r7, #14]
 801202e:	f003 020f 	and.w	r2, r3, #15
 8012032:	6879      	ldr	r1, [r7, #4]
 8012034:	4613      	mov	r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	4413      	add	r3, r2
 801203a:	009b      	lsls	r3, r3, #2
 801203c:	440b      	add	r3, r1
 801203e:	3324      	adds	r3, #36	@ 0x24
 8012040:	881b      	ldrh	r3, [r3, #0]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d117      	bne.n	8012076 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012046:	6839      	ldr	r1, [r7, #0]
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f000 fbda 	bl	8012802 <USBD_CtlError>
                  break;
 801204e:	e054      	b.n	80120fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012050:	7bbb      	ldrb	r3, [r7, #14]
 8012052:	f003 020f 	and.w	r2, r3, #15
 8012056:	6879      	ldr	r1, [r7, #4]
 8012058:	4613      	mov	r3, r2
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	4413      	add	r3, r2
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	440b      	add	r3, r1
 8012062:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012066:	881b      	ldrh	r3, [r3, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d104      	bne.n	8012076 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801206c:	6839      	ldr	r1, [r7, #0]
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f000 fbc7 	bl	8012802 <USBD_CtlError>
                  break;
 8012074:	e041      	b.n	80120fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801207a:	2b00      	cmp	r3, #0
 801207c:	da0b      	bge.n	8012096 <USBD_StdEPReq+0x2b2>
 801207e:	7bbb      	ldrb	r3, [r7, #14]
 8012080:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012084:	4613      	mov	r3, r2
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	4413      	add	r3, r2
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	3310      	adds	r3, #16
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	4413      	add	r3, r2
 8012092:	3304      	adds	r3, #4
 8012094:	e00b      	b.n	80120ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012096:	7bbb      	ldrb	r3, [r7, #14]
 8012098:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801209c:	4613      	mov	r3, r2
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	4413      	add	r3, r2
 80120a2:	009b      	lsls	r3, r3, #2
 80120a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80120a8:	687a      	ldr	r2, [r7, #4]
 80120aa:	4413      	add	r3, r2
 80120ac:	3304      	adds	r3, #4
 80120ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80120b0:	7bbb      	ldrb	r3, [r7, #14]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d002      	beq.n	80120bc <USBD_StdEPReq+0x2d8>
 80120b6:	7bbb      	ldrb	r3, [r7, #14]
 80120b8:	2b80      	cmp	r3, #128	@ 0x80
 80120ba:	d103      	bne.n	80120c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	2200      	movs	r2, #0
 80120c0:	601a      	str	r2, [r3, #0]
 80120c2:	e00e      	b.n	80120e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80120c4:	7bbb      	ldrb	r3, [r7, #14]
 80120c6:	4619      	mov	r1, r3
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f003 fd09 	bl	8015ae0 <USBD_LL_IsStallEP>
 80120ce:	4603      	mov	r3, r0
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d003      	beq.n	80120dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	2201      	movs	r2, #1
 80120d8:	601a      	str	r2, [r3, #0]
 80120da:	e002      	b.n	80120e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	2200      	movs	r2, #0
 80120e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	2202      	movs	r2, #2
 80120e6:	4619      	mov	r1, r3
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 fc07 	bl	80128fc <USBD_CtlSendData>
              break;
 80120ee:	e004      	b.n	80120fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 fb85 	bl	8012802 <USBD_CtlError>
              break;
 80120f8:	bf00      	nop
          }
          break;
 80120fa:	e004      	b.n	8012106 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80120fc:	6839      	ldr	r1, [r7, #0]
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 fb7f 	bl	8012802 <USBD_CtlError>
          break;
 8012104:	bf00      	nop
      }
      break;
 8012106:	e005      	b.n	8012114 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012108:	6839      	ldr	r1, [r7, #0]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 fb79 	bl	8012802 <USBD_CtlError>
      break;
 8012110:	e000      	b.n	8012114 <USBD_StdEPReq+0x330>
      break;
 8012112:	bf00      	nop
  }

  return ret;
 8012114:	7bfb      	ldrb	r3, [r7, #15]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3710      	adds	r7, #16
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
	...

08012120 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801212a:	2300      	movs	r3, #0
 801212c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801212e:	2300      	movs	r3, #0
 8012130:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012132:	2300      	movs	r3, #0
 8012134:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	885b      	ldrh	r3, [r3, #2]
 801213a:	0a1b      	lsrs	r3, r3, #8
 801213c:	b29b      	uxth	r3, r3
 801213e:	3b01      	subs	r3, #1
 8012140:	2b0e      	cmp	r3, #14
 8012142:	f200 8152 	bhi.w	80123ea <USBD_GetDescriptor+0x2ca>
 8012146:	a201      	add	r2, pc, #4	@ (adr r2, 801214c <USBD_GetDescriptor+0x2c>)
 8012148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214c:	080121bd 	.word	0x080121bd
 8012150:	080121d5 	.word	0x080121d5
 8012154:	08012215 	.word	0x08012215
 8012158:	080123eb 	.word	0x080123eb
 801215c:	080123eb 	.word	0x080123eb
 8012160:	0801238b 	.word	0x0801238b
 8012164:	080123b7 	.word	0x080123b7
 8012168:	080123eb 	.word	0x080123eb
 801216c:	080123eb 	.word	0x080123eb
 8012170:	080123eb 	.word	0x080123eb
 8012174:	080123eb 	.word	0x080123eb
 8012178:	080123eb 	.word	0x080123eb
 801217c:	080123eb 	.word	0x080123eb
 8012180:	080123eb 	.word	0x080123eb
 8012184:	08012189 	.word	0x08012189
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801218e:	69db      	ldr	r3, [r3, #28]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d00b      	beq.n	80121ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801219a:	69db      	ldr	r3, [r3, #28]
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	7c12      	ldrb	r2, [r2, #16]
 80121a0:	f107 0108 	add.w	r1, r7, #8
 80121a4:	4610      	mov	r0, r2
 80121a6:	4798      	blx	r3
 80121a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121aa:	e126      	b.n	80123fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80121ac:	6839      	ldr	r1, [r7, #0]
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f000 fb27 	bl	8012802 <USBD_CtlError>
        err++;
 80121b4:	7afb      	ldrb	r3, [r7, #11]
 80121b6:	3301      	adds	r3, #1
 80121b8:	72fb      	strb	r3, [r7, #11]
      break;
 80121ba:	e11e      	b.n	80123fa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	7c12      	ldrb	r2, [r2, #16]
 80121c8:	f107 0108 	add.w	r1, r7, #8
 80121cc:	4610      	mov	r0, r2
 80121ce:	4798      	blx	r3
 80121d0:	60f8      	str	r0, [r7, #12]
      break;
 80121d2:	e112      	b.n	80123fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	7c1b      	ldrb	r3, [r3, #16]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d10d      	bne.n	80121f8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121e4:	f107 0208 	add.w	r2, r7, #8
 80121e8:	4610      	mov	r0, r2
 80121ea:	4798      	blx	r3
 80121ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	3301      	adds	r3, #1
 80121f2:	2202      	movs	r2, #2
 80121f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80121f6:	e100      	b.n	80123fa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012200:	f107 0208 	add.w	r2, r7, #8
 8012204:	4610      	mov	r0, r2
 8012206:	4798      	blx	r3
 8012208:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	3301      	adds	r3, #1
 801220e:	2202      	movs	r2, #2
 8012210:	701a      	strb	r2, [r3, #0]
      break;
 8012212:	e0f2      	b.n	80123fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	885b      	ldrh	r3, [r3, #2]
 8012218:	b2db      	uxtb	r3, r3
 801221a:	2b05      	cmp	r3, #5
 801221c:	f200 80ac 	bhi.w	8012378 <USBD_GetDescriptor+0x258>
 8012220:	a201      	add	r2, pc, #4	@ (adr r2, 8012228 <USBD_GetDescriptor+0x108>)
 8012222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012226:	bf00      	nop
 8012228:	08012241 	.word	0x08012241
 801222c:	08012275 	.word	0x08012275
 8012230:	080122a9 	.word	0x080122a9
 8012234:	080122dd 	.word	0x080122dd
 8012238:	08012311 	.word	0x08012311
 801223c:	08012345 	.word	0x08012345
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00b      	beq.n	8012264 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	687a      	ldr	r2, [r7, #4]
 8012256:	7c12      	ldrb	r2, [r2, #16]
 8012258:	f107 0108 	add.w	r1, r7, #8
 801225c:	4610      	mov	r0, r2
 801225e:	4798      	blx	r3
 8012260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012262:	e091      	b.n	8012388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012264:	6839      	ldr	r1, [r7, #0]
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f000 facb 	bl	8012802 <USBD_CtlError>
            err++;
 801226c:	7afb      	ldrb	r3, [r7, #11]
 801226e:	3301      	adds	r3, #1
 8012270:	72fb      	strb	r3, [r7, #11]
          break;
 8012272:	e089      	b.n	8012388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801227a:	689b      	ldr	r3, [r3, #8]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d00b      	beq.n	8012298 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012286:	689b      	ldr	r3, [r3, #8]
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	7c12      	ldrb	r2, [r2, #16]
 801228c:	f107 0108 	add.w	r1, r7, #8
 8012290:	4610      	mov	r0, r2
 8012292:	4798      	blx	r3
 8012294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012296:	e077      	b.n	8012388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012298:	6839      	ldr	r1, [r7, #0]
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f000 fab1 	bl	8012802 <USBD_CtlError>
            err++;
 80122a0:	7afb      	ldrb	r3, [r7, #11]
 80122a2:	3301      	adds	r3, #1
 80122a4:	72fb      	strb	r3, [r7, #11]
          break;
 80122a6:	e06f      	b.n	8012388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00b      	beq.n	80122cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	687a      	ldr	r2, [r7, #4]
 80122be:	7c12      	ldrb	r2, [r2, #16]
 80122c0:	f107 0108 	add.w	r1, r7, #8
 80122c4:	4610      	mov	r0, r2
 80122c6:	4798      	blx	r3
 80122c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122ca:	e05d      	b.n	8012388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80122cc:	6839      	ldr	r1, [r7, #0]
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fa97 	bl	8012802 <USBD_CtlError>
            err++;
 80122d4:	7afb      	ldrb	r3, [r7, #11]
 80122d6:	3301      	adds	r3, #1
 80122d8:	72fb      	strb	r3, [r7, #11]
          break;
 80122da:	e055      	b.n	8012388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122e2:	691b      	ldr	r3, [r3, #16]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00b      	beq.n	8012300 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122ee:	691b      	ldr	r3, [r3, #16]
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	7c12      	ldrb	r2, [r2, #16]
 80122f4:	f107 0108 	add.w	r1, r7, #8
 80122f8:	4610      	mov	r0, r2
 80122fa:	4798      	blx	r3
 80122fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122fe:	e043      	b.n	8012388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012300:	6839      	ldr	r1, [r7, #0]
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fa7d 	bl	8012802 <USBD_CtlError>
            err++;
 8012308:	7afb      	ldrb	r3, [r7, #11]
 801230a:	3301      	adds	r3, #1
 801230c:	72fb      	strb	r3, [r7, #11]
          break;
 801230e:	e03b      	b.n	8012388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012316:	695b      	ldr	r3, [r3, #20]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d00b      	beq.n	8012334 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012322:	695b      	ldr	r3, [r3, #20]
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	7c12      	ldrb	r2, [r2, #16]
 8012328:	f107 0108 	add.w	r1, r7, #8
 801232c:	4610      	mov	r0, r2
 801232e:	4798      	blx	r3
 8012330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012332:	e029      	b.n	8012388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012334:	6839      	ldr	r1, [r7, #0]
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f000 fa63 	bl	8012802 <USBD_CtlError>
            err++;
 801233c:	7afb      	ldrb	r3, [r7, #11]
 801233e:	3301      	adds	r3, #1
 8012340:	72fb      	strb	r3, [r7, #11]
          break;
 8012342:	e021      	b.n	8012388 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801234a:	699b      	ldr	r3, [r3, #24]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00b      	beq.n	8012368 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012356:	699b      	ldr	r3, [r3, #24]
 8012358:	687a      	ldr	r2, [r7, #4]
 801235a:	7c12      	ldrb	r2, [r2, #16]
 801235c:	f107 0108 	add.w	r1, r7, #8
 8012360:	4610      	mov	r0, r2
 8012362:	4798      	blx	r3
 8012364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012366:	e00f      	b.n	8012388 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012368:	6839      	ldr	r1, [r7, #0]
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 fa49 	bl	8012802 <USBD_CtlError>
            err++;
 8012370:	7afb      	ldrb	r3, [r7, #11]
 8012372:	3301      	adds	r3, #1
 8012374:	72fb      	strb	r3, [r7, #11]
          break;
 8012376:	e007      	b.n	8012388 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012378:	6839      	ldr	r1, [r7, #0]
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f000 fa41 	bl	8012802 <USBD_CtlError>
          err++;
 8012380:	7afb      	ldrb	r3, [r7, #11]
 8012382:	3301      	adds	r3, #1
 8012384:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012386:	bf00      	nop
      }
      break;
 8012388:	e037      	b.n	80123fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	7c1b      	ldrb	r3, [r3, #16]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d109      	bne.n	80123a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801239a:	f107 0208 	add.w	r2, r7, #8
 801239e:	4610      	mov	r0, r2
 80123a0:	4798      	blx	r3
 80123a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123a4:	e029      	b.n	80123fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80123a6:	6839      	ldr	r1, [r7, #0]
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f000 fa2a 	bl	8012802 <USBD_CtlError>
        err++;
 80123ae:	7afb      	ldrb	r3, [r7, #11]
 80123b0:	3301      	adds	r3, #1
 80123b2:	72fb      	strb	r3, [r7, #11]
      break;
 80123b4:	e021      	b.n	80123fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	7c1b      	ldrb	r3, [r3, #16]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d10d      	bne.n	80123da <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123c6:	f107 0208 	add.w	r2, r7, #8
 80123ca:	4610      	mov	r0, r2
 80123cc:	4798      	blx	r3
 80123ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	3301      	adds	r3, #1
 80123d4:	2207      	movs	r2, #7
 80123d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123d8:	e00f      	b.n	80123fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80123da:	6839      	ldr	r1, [r7, #0]
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f000 fa10 	bl	8012802 <USBD_CtlError>
        err++;
 80123e2:	7afb      	ldrb	r3, [r7, #11]
 80123e4:	3301      	adds	r3, #1
 80123e6:	72fb      	strb	r3, [r7, #11]
      break;
 80123e8:	e007      	b.n	80123fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80123ea:	6839      	ldr	r1, [r7, #0]
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f000 fa08 	bl	8012802 <USBD_CtlError>
      err++;
 80123f2:	7afb      	ldrb	r3, [r7, #11]
 80123f4:	3301      	adds	r3, #1
 80123f6:	72fb      	strb	r3, [r7, #11]
      break;
 80123f8:	bf00      	nop
  }

  if (err != 0U)
 80123fa:	7afb      	ldrb	r3, [r7, #11]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d11e      	bne.n	801243e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	88db      	ldrh	r3, [r3, #6]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d016      	beq.n	8012436 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012408:	893b      	ldrh	r3, [r7, #8]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00e      	beq.n	801242c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	88da      	ldrh	r2, [r3, #6]
 8012412:	893b      	ldrh	r3, [r7, #8]
 8012414:	4293      	cmp	r3, r2
 8012416:	bf28      	it	cs
 8012418:	4613      	movcs	r3, r2
 801241a:	b29b      	uxth	r3, r3
 801241c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801241e:	893b      	ldrh	r3, [r7, #8]
 8012420:	461a      	mov	r2, r3
 8012422:	68f9      	ldr	r1, [r7, #12]
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f000 fa69 	bl	80128fc <USBD_CtlSendData>
 801242a:	e009      	b.n	8012440 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801242c:	6839      	ldr	r1, [r7, #0]
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f000 f9e7 	bl	8012802 <USBD_CtlError>
 8012434:	e004      	b.n	8012440 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fa9d 	bl	8012976 <USBD_CtlSendStatus>
 801243c:	e000      	b.n	8012440 <USBD_GetDescriptor+0x320>
    return;
 801243e:	bf00      	nop
  }
}
 8012440:	3710      	adds	r7, #16
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
 8012446:	bf00      	nop

08012448 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	889b      	ldrh	r3, [r3, #4]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d131      	bne.n	80124be <USBD_SetAddress+0x76>
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	88db      	ldrh	r3, [r3, #6]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d12d      	bne.n	80124be <USBD_SetAddress+0x76>
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	885b      	ldrh	r3, [r3, #2]
 8012466:	2b7f      	cmp	r3, #127	@ 0x7f
 8012468:	d829      	bhi.n	80124be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	885b      	ldrh	r3, [r3, #2]
 801246e:	b2db      	uxtb	r3, r3
 8012470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012474:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801247c:	b2db      	uxtb	r3, r3
 801247e:	2b03      	cmp	r3, #3
 8012480:	d104      	bne.n	801248c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012482:	6839      	ldr	r1, [r7, #0]
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f000 f9bc 	bl	8012802 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801248a:	e01d      	b.n	80124c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	7bfa      	ldrb	r2, [r7, #15]
 8012490:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012494:	7bfb      	ldrb	r3, [r7, #15]
 8012496:	4619      	mov	r1, r3
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f003 fb4d 	bl	8015b38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f000 fa69 	bl	8012976 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d004      	beq.n	80124b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2202      	movs	r2, #2
 80124ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124b2:	e009      	b.n	80124c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2201      	movs	r2, #1
 80124b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124bc:	e004      	b.n	80124c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80124be:	6839      	ldr	r1, [r7, #0]
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f000 f99e 	bl	8012802 <USBD_CtlError>
  }
}
 80124c6:	bf00      	nop
 80124c8:	bf00      	nop
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b084      	sub	sp, #16
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80124da:	2300      	movs	r3, #0
 80124dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	885b      	ldrh	r3, [r3, #2]
 80124e2:	b2da      	uxtb	r2, r3
 80124e4:	4b4e      	ldr	r3, [pc, #312]	@ (8012620 <USBD_SetConfig+0x150>)
 80124e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80124e8:	4b4d      	ldr	r3, [pc, #308]	@ (8012620 <USBD_SetConfig+0x150>)
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	d905      	bls.n	80124fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80124f0:	6839      	ldr	r1, [r7, #0]
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	f000 f985 	bl	8012802 <USBD_CtlError>
    return USBD_FAIL;
 80124f8:	2303      	movs	r3, #3
 80124fa:	e08c      	b.n	8012616 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012502:	b2db      	uxtb	r3, r3
 8012504:	2b02      	cmp	r3, #2
 8012506:	d002      	beq.n	801250e <USBD_SetConfig+0x3e>
 8012508:	2b03      	cmp	r3, #3
 801250a:	d029      	beq.n	8012560 <USBD_SetConfig+0x90>
 801250c:	e075      	b.n	80125fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801250e:	4b44      	ldr	r3, [pc, #272]	@ (8012620 <USBD_SetConfig+0x150>)
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d020      	beq.n	8012558 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012516:	4b42      	ldr	r3, [pc, #264]	@ (8012620 <USBD_SetConfig+0x150>)
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	461a      	mov	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012520:	4b3f      	ldr	r3, [pc, #252]	@ (8012620 <USBD_SetConfig+0x150>)
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	4619      	mov	r1, r3
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f7fe ffb9 	bl	801149e <USBD_SetClassConfig>
 801252c:	4603      	mov	r3, r0
 801252e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012530:	7bfb      	ldrb	r3, [r7, #15]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d008      	beq.n	8012548 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012536:	6839      	ldr	r1, [r7, #0]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f000 f962 	bl	8012802 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2202      	movs	r2, #2
 8012542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012546:	e065      	b.n	8012614 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f000 fa14 	bl	8012976 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2203      	movs	r2, #3
 8012552:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012556:	e05d      	b.n	8012614 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f000 fa0c 	bl	8012976 <USBD_CtlSendStatus>
      break;
 801255e:	e059      	b.n	8012614 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012560:	4b2f      	ldr	r3, [pc, #188]	@ (8012620 <USBD_SetConfig+0x150>)
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d112      	bne.n	801258e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2202      	movs	r2, #2
 801256c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012570:	4b2b      	ldr	r3, [pc, #172]	@ (8012620 <USBD_SetConfig+0x150>)
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	461a      	mov	r2, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801257a:	4b29      	ldr	r3, [pc, #164]	@ (8012620 <USBD_SetConfig+0x150>)
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	4619      	mov	r1, r3
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f7fe ffa8 	bl	80114d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f000 f9f5 	bl	8012976 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801258c:	e042      	b.n	8012614 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801258e:	4b24      	ldr	r3, [pc, #144]	@ (8012620 <USBD_SetConfig+0x150>)
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	461a      	mov	r2, r3
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	685b      	ldr	r3, [r3, #4]
 8012598:	429a      	cmp	r2, r3
 801259a:	d02a      	beq.n	80125f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	4619      	mov	r1, r3
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7fe ff96 	bl	80114d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80125aa:	4b1d      	ldr	r3, [pc, #116]	@ (8012620 <USBD_SetConfig+0x150>)
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	461a      	mov	r2, r3
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80125b4:	4b1a      	ldr	r3, [pc, #104]	@ (8012620 <USBD_SetConfig+0x150>)
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	4619      	mov	r1, r3
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f7fe ff6f 	bl	801149e <USBD_SetClassConfig>
 80125c0:	4603      	mov	r3, r0
 80125c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80125c4:	7bfb      	ldrb	r3, [r7, #15]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d00f      	beq.n	80125ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80125ca:	6839      	ldr	r1, [r7, #0]
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f000 f918 	bl	8012802 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	4619      	mov	r1, r3
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f7fe ff7b 	bl	80114d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2202      	movs	r2, #2
 80125e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80125e8:	e014      	b.n	8012614 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f000 f9c3 	bl	8012976 <USBD_CtlSendStatus>
      break;
 80125f0:	e010      	b.n	8012614 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 f9bf 	bl	8012976 <USBD_CtlSendStatus>
      break;
 80125f8:	e00c      	b.n	8012614 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80125fa:	6839      	ldr	r1, [r7, #0]
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f000 f900 	bl	8012802 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012602:	4b07      	ldr	r3, [pc, #28]	@ (8012620 <USBD_SetConfig+0x150>)
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	4619      	mov	r1, r3
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f7fe ff64 	bl	80114d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801260e:	2303      	movs	r3, #3
 8012610:	73fb      	strb	r3, [r7, #15]
      break;
 8012612:	bf00      	nop
  }

  return ret;
 8012614:	7bfb      	ldrb	r3, [r7, #15]
}
 8012616:	4618      	mov	r0, r3
 8012618:	3710      	adds	r7, #16
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	2404b858 	.word	0x2404b858

08012624 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	88db      	ldrh	r3, [r3, #6]
 8012632:	2b01      	cmp	r3, #1
 8012634:	d004      	beq.n	8012640 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012636:	6839      	ldr	r1, [r7, #0]
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f000 f8e2 	bl	8012802 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801263e:	e023      	b.n	8012688 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012646:	b2db      	uxtb	r3, r3
 8012648:	2b02      	cmp	r3, #2
 801264a:	dc02      	bgt.n	8012652 <USBD_GetConfig+0x2e>
 801264c:	2b00      	cmp	r3, #0
 801264e:	dc03      	bgt.n	8012658 <USBD_GetConfig+0x34>
 8012650:	e015      	b.n	801267e <USBD_GetConfig+0x5a>
 8012652:	2b03      	cmp	r3, #3
 8012654:	d00b      	beq.n	801266e <USBD_GetConfig+0x4a>
 8012656:	e012      	b.n	801267e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2200      	movs	r2, #0
 801265c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	3308      	adds	r3, #8
 8012662:	2201      	movs	r2, #1
 8012664:	4619      	mov	r1, r3
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f000 f948 	bl	80128fc <USBD_CtlSendData>
        break;
 801266c:	e00c      	b.n	8012688 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	3304      	adds	r3, #4
 8012672:	2201      	movs	r2, #1
 8012674:	4619      	mov	r1, r3
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f000 f940 	bl	80128fc <USBD_CtlSendData>
        break;
 801267c:	e004      	b.n	8012688 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801267e:	6839      	ldr	r1, [r7, #0]
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f000 f8be 	bl	8012802 <USBD_CtlError>
        break;
 8012686:	bf00      	nop
}
 8012688:	bf00      	nop
 801268a:	3708      	adds	r7, #8
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b082      	sub	sp, #8
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	3b01      	subs	r3, #1
 80126a4:	2b02      	cmp	r3, #2
 80126a6:	d81e      	bhi.n	80126e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	88db      	ldrh	r3, [r3, #6]
 80126ac:	2b02      	cmp	r3, #2
 80126ae:	d004      	beq.n	80126ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80126b0:	6839      	ldr	r1, [r7, #0]
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f000 f8a5 	bl	8012802 <USBD_CtlError>
        break;
 80126b8:	e01a      	b.n	80126f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2201      	movs	r2, #1
 80126be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d005      	beq.n	80126d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	f043 0202 	orr.w	r2, r3, #2
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	330c      	adds	r3, #12
 80126da:	2202      	movs	r2, #2
 80126dc:	4619      	mov	r1, r3
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 f90c 	bl	80128fc <USBD_CtlSendData>
      break;
 80126e4:	e004      	b.n	80126f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80126e6:	6839      	ldr	r1, [r7, #0]
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f000 f88a 	bl	8012802 <USBD_CtlError>
      break;
 80126ee:	bf00      	nop
  }
}
 80126f0:	bf00      	nop
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	885b      	ldrh	r3, [r3, #2]
 8012706:	2b01      	cmp	r3, #1
 8012708:	d107      	bne.n	801271a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2201      	movs	r2, #1
 801270e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f000 f92f 	bl	8012976 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012718:	e013      	b.n	8012742 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	885b      	ldrh	r3, [r3, #2]
 801271e:	2b02      	cmp	r3, #2
 8012720:	d10b      	bne.n	801273a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	889b      	ldrh	r3, [r3, #4]
 8012726:	0a1b      	lsrs	r3, r3, #8
 8012728:	b29b      	uxth	r3, r3
 801272a:	b2da      	uxtb	r2, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f000 f91f 	bl	8012976 <USBD_CtlSendStatus>
}
 8012738:	e003      	b.n	8012742 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801273a:	6839      	ldr	r1, [r7, #0]
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 f860 	bl	8012802 <USBD_CtlError>
}
 8012742:	bf00      	nop
 8012744:	3708      	adds	r7, #8
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}

0801274a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801274a:	b580      	push	{r7, lr}
 801274c:	b082      	sub	sp, #8
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
 8012752:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801275a:	b2db      	uxtb	r3, r3
 801275c:	3b01      	subs	r3, #1
 801275e:	2b02      	cmp	r3, #2
 8012760:	d80b      	bhi.n	801277a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	885b      	ldrh	r3, [r3, #2]
 8012766:	2b01      	cmp	r3, #1
 8012768:	d10c      	bne.n	8012784 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2200      	movs	r2, #0
 801276e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 f8ff 	bl	8012976 <USBD_CtlSendStatus>
      }
      break;
 8012778:	e004      	b.n	8012784 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801277a:	6839      	ldr	r1, [r7, #0]
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 f840 	bl	8012802 <USBD_CtlError>
      break;
 8012782:	e000      	b.n	8012786 <USBD_ClrFeature+0x3c>
      break;
 8012784:	bf00      	nop
  }
}
 8012786:	bf00      	nop
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b084      	sub	sp, #16
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
 8012796:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	781a      	ldrb	r2, [r3, #0]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	3301      	adds	r3, #1
 80127a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	781a      	ldrb	r2, [r3, #0]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	3301      	adds	r3, #1
 80127b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	f7ff fa16 	bl	8011bea <SWAPBYTE>
 80127be:	4603      	mov	r3, r0
 80127c0:	461a      	mov	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	3301      	adds	r3, #1
 80127ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	3301      	adds	r3, #1
 80127d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80127d2:	68f8      	ldr	r0, [r7, #12]
 80127d4:	f7ff fa09 	bl	8011bea <SWAPBYTE>
 80127d8:	4603      	mov	r3, r0
 80127da:	461a      	mov	r2, r3
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	3301      	adds	r3, #1
 80127e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	3301      	adds	r3, #1
 80127ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80127ec:	68f8      	ldr	r0, [r7, #12]
 80127ee:	f7ff f9fc 	bl	8011bea <SWAPBYTE>
 80127f2:	4603      	mov	r3, r0
 80127f4:	461a      	mov	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	80da      	strh	r2, [r3, #6]
}
 80127fa:	bf00      	nop
 80127fc:	3710      	adds	r7, #16
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}

08012802 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012802:	b580      	push	{r7, lr}
 8012804:	b082      	sub	sp, #8
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
 801280a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801280c:	2180      	movs	r1, #128	@ 0x80
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f003 f928 	bl	8015a64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012814:	2100      	movs	r1, #0
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f003 f924 	bl	8015a64 <USBD_LL_StallEP>
}
 801281c:	bf00      	nop
 801281e:	3708      	adds	r7, #8
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b086      	sub	sp, #24
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012830:	2300      	movs	r3, #0
 8012832:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d042      	beq.n	80128c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801283e:	6938      	ldr	r0, [r7, #16]
 8012840:	f000 f842 	bl	80128c8 <USBD_GetLen>
 8012844:	4603      	mov	r3, r0
 8012846:	3301      	adds	r3, #1
 8012848:	005b      	lsls	r3, r3, #1
 801284a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801284e:	d808      	bhi.n	8012862 <USBD_GetString+0x3e>
 8012850:	6938      	ldr	r0, [r7, #16]
 8012852:	f000 f839 	bl	80128c8 <USBD_GetLen>
 8012856:	4603      	mov	r3, r0
 8012858:	3301      	adds	r3, #1
 801285a:	b29b      	uxth	r3, r3
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	b29a      	uxth	r2, r3
 8012860:	e001      	b.n	8012866 <USBD_GetString+0x42>
 8012862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801286a:	7dfb      	ldrb	r3, [r7, #23]
 801286c:	68ba      	ldr	r2, [r7, #8]
 801286e:	4413      	add	r3, r2
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	7812      	ldrb	r2, [r2, #0]
 8012874:	701a      	strb	r2, [r3, #0]
  idx++;
 8012876:	7dfb      	ldrb	r3, [r7, #23]
 8012878:	3301      	adds	r3, #1
 801287a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801287c:	7dfb      	ldrb	r3, [r7, #23]
 801287e:	68ba      	ldr	r2, [r7, #8]
 8012880:	4413      	add	r3, r2
 8012882:	2203      	movs	r2, #3
 8012884:	701a      	strb	r2, [r3, #0]
  idx++;
 8012886:	7dfb      	ldrb	r3, [r7, #23]
 8012888:	3301      	adds	r3, #1
 801288a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801288c:	e013      	b.n	80128b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801288e:	7dfb      	ldrb	r3, [r7, #23]
 8012890:	68ba      	ldr	r2, [r7, #8]
 8012892:	4413      	add	r3, r2
 8012894:	693a      	ldr	r2, [r7, #16]
 8012896:	7812      	ldrb	r2, [r2, #0]
 8012898:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	3301      	adds	r3, #1
 801289e:	613b      	str	r3, [r7, #16]
    idx++;
 80128a0:	7dfb      	ldrb	r3, [r7, #23]
 80128a2:	3301      	adds	r3, #1
 80128a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80128a6:	7dfb      	ldrb	r3, [r7, #23]
 80128a8:	68ba      	ldr	r2, [r7, #8]
 80128aa:	4413      	add	r3, r2
 80128ac:	2200      	movs	r2, #0
 80128ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80128b0:	7dfb      	ldrb	r3, [r7, #23]
 80128b2:	3301      	adds	r3, #1
 80128b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	781b      	ldrb	r3, [r3, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d1e7      	bne.n	801288e <USBD_GetString+0x6a>
 80128be:	e000      	b.n	80128c2 <USBD_GetString+0x9e>
    return;
 80128c0:	bf00      	nop
  }
}
 80128c2:	3718      	adds	r7, #24
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80128c8:	b480      	push	{r7}
 80128ca:	b085      	sub	sp, #20
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80128d0:	2300      	movs	r3, #0
 80128d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80128d8:	e005      	b.n	80128e6 <USBD_GetLen+0x1e>
  {
    len++;
 80128da:	7bfb      	ldrb	r3, [r7, #15]
 80128dc:	3301      	adds	r3, #1
 80128de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	3301      	adds	r3, #1
 80128e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d1f5      	bne.n	80128da <USBD_GetLen+0x12>
  }

  return len;
 80128ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3714      	adds	r7, #20
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr

080128fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	60b9      	str	r1, [r7, #8]
 8012906:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2202      	movs	r2, #2
 801290c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	687a      	ldr	r2, [r7, #4]
 801291a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	68ba      	ldr	r2, [r7, #8]
 8012920:	2100      	movs	r1, #0
 8012922:	68f8      	ldr	r0, [r7, #12]
 8012924:	f003 f927 	bl	8015b76 <USBD_LL_Transmit>

  return USBD_OK;
 8012928:	2300      	movs	r3, #0
}
 801292a:	4618      	mov	r0, r3
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012932:	b580      	push	{r7, lr}
 8012934:	b084      	sub	sp, #16
 8012936:	af00      	add	r7, sp, #0
 8012938:	60f8      	str	r0, [r7, #12]
 801293a:	60b9      	str	r1, [r7, #8]
 801293c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	68ba      	ldr	r2, [r7, #8]
 8012942:	2100      	movs	r1, #0
 8012944:	68f8      	ldr	r0, [r7, #12]
 8012946:	f003 f916 	bl	8015b76 <USBD_LL_Transmit>

  return USBD_OK;
 801294a:	2300      	movs	r3, #0
}
 801294c:	4618      	mov	r0, r3
 801294e:	3710      	adds	r7, #16
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b084      	sub	sp, #16
 8012958:	af00      	add	r7, sp, #0
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	68ba      	ldr	r2, [r7, #8]
 8012964:	2100      	movs	r1, #0
 8012966:	68f8      	ldr	r0, [r7, #12]
 8012968:	f003 f926 	bl	8015bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801296c:	2300      	movs	r3, #0
}
 801296e:	4618      	mov	r0, r3
 8012970:	3710      	adds	r7, #16
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}

08012976 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012976:	b580      	push	{r7, lr}
 8012978:	b082      	sub	sp, #8
 801297a:	af00      	add	r7, sp, #0
 801297c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2204      	movs	r2, #4
 8012982:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012986:	2300      	movs	r3, #0
 8012988:	2200      	movs	r2, #0
 801298a:	2100      	movs	r1, #0
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f003 f8f2 	bl	8015b76 <USBD_LL_Transmit>

  return USBD_OK;
 8012992:	2300      	movs	r3, #0
}
 8012994:	4618      	mov	r0, r3
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2205      	movs	r2, #5
 80129a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80129ac:	2300      	movs	r3, #0
 80129ae:	2200      	movs	r2, #0
 80129b0:	2100      	movs	r1, #0
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f003 f900 	bl	8015bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80129b8:	2300      	movs	r3, #0
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3708      	adds	r7, #8
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}

080129c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80129c2:	b480      	push	{r7}
 80129c4:	b085      	sub	sp, #20
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	4603      	mov	r3, r0
 80129ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80129cc:	2300      	movs	r3, #0
 80129ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80129d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129d4:	2b84      	cmp	r3, #132	@ 0x84
 80129d6:	d005      	beq.n	80129e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80129d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	4413      	add	r3, r2
 80129e0:	3303      	adds	r3, #3
 80129e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80129e4:	68fb      	ldr	r3, [r7, #12]
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3714      	adds	r7, #20
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80129f2:	b480      	push	{r7}
 80129f4:	b083      	sub	sp, #12
 80129f6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129f8:	f3ef 8305 	mrs	r3, IPSR
 80129fc:	607b      	str	r3, [r7, #4]
  return(result);
 80129fe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	bf14      	ite	ne
 8012a04:	2301      	movne	r3, #1
 8012a06:	2300      	moveq	r3, #0
 8012a08:	b2db      	uxtb	r3, r3
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	370c      	adds	r7, #12
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a14:	4770      	bx	lr

08012a16 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012a16:	b580      	push	{r7, lr}
 8012a18:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012a1a:	f001 fb65 	bl	80140e8 <vTaskStartScheduler>
  
  return osOK;
 8012a1e:	2300      	movs	r3, #0
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a26:	b089      	sub	sp, #36	@ 0x24
 8012a28:	af04      	add	r7, sp, #16
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	695b      	ldr	r3, [r3, #20]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d020      	beq.n	8012a78 <osThreadCreate+0x54>
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	699b      	ldr	r3, [r3, #24]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d01c      	beq.n	8012a78 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	685c      	ldr	r4, [r3, #4]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	691e      	ldr	r6, [r3, #16]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7ff ffb6 	bl	80129c2 <makeFreeRtosPriority>
 8012a56:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	695b      	ldr	r3, [r3, #20]
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a60:	9202      	str	r2, [sp, #8]
 8012a62:	9301      	str	r3, [sp, #4]
 8012a64:	9100      	str	r1, [sp, #0]
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	4632      	mov	r2, r6
 8012a6a:	4629      	mov	r1, r5
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	f001 f955 	bl	8013d1c <xTaskCreateStatic>
 8012a72:	4603      	mov	r3, r0
 8012a74:	60fb      	str	r3, [r7, #12]
 8012a76:	e01c      	b.n	8012ab2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	685c      	ldr	r4, [r3, #4]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a84:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7ff ff98 	bl	80129c2 <makeFreeRtosPriority>
 8012a92:	4602      	mov	r2, r0
 8012a94:	f107 030c 	add.w	r3, r7, #12
 8012a98:	9301      	str	r3, [sp, #4]
 8012a9a:	9200      	str	r2, [sp, #0]
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	4632      	mov	r2, r6
 8012aa0:	4629      	mov	r1, r5
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f001 f99a 	bl	8013ddc <xTaskCreate>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b01      	cmp	r3, #1
 8012aac:	d001      	beq.n	8012ab2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	e000      	b.n	8012ab4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	3714      	adds	r7, #20
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012abc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d001      	beq.n	8012ad2 <osDelay+0x16>
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	e000      	b.n	8012ad4 <osDelay+0x18>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f001 fad1 	bl	801407c <vTaskDelay>
  
  return osOK;
 8012ada:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3710      	adds	r7, #16
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}

08012ae4 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b086      	sub	sp, #24
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	3303      	adds	r3, #3
 8012af2:	f023 0303 	bic.w	r3, r3, #3
 8012af6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8012af8:	2014      	movs	r0, #20
 8012afa:	f002 fa77 	bl	8014fec <pvPortMalloc>
 8012afe:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d046      	beq.n	8012b94 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8012b0e:	68fa      	ldr	r2, [r7, #12]
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	2200      	movs	r2, #0
 8012b18:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f002 fa64 	bl	8014fec <pvPortMalloc>
 8012b24:	4602      	mov	r2, r0
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	685b      	ldr	r3, [r3, #4]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d02b      	beq.n	8012b8a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	fb02 f303 	mul.w	r3, r2, r3
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f002 fa55 	bl	8014fec <pvPortMalloc>
 8012b42:	4602      	mov	r2, r0
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d011      	beq.n	8012b74 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012b50:	2300      	movs	r3, #0
 8012b52:	613b      	str	r3, [r7, #16]
 8012b54:	e008      	b.n	8012b68 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	685a      	ldr	r2, [r3, #4]
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	2200      	movs	r2, #0
 8012b60:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	3301      	adds	r3, #1
 8012b66:	613b      	str	r3, [r7, #16]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	693a      	ldr	r2, [r7, #16]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d3f1      	bcc.n	8012b56 <osPoolCreate+0x72>
 8012b72:	e00f      	b.n	8012b94 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f002 fb05 	bl	8015188 <vPortFree>
        vPortFree(thePool);
 8012b7e:	6978      	ldr	r0, [r7, #20]
 8012b80:	f002 fb02 	bl	8015188 <vPortFree>
        thePool = NULL;
 8012b84:	2300      	movs	r3, #0
 8012b86:	617b      	str	r3, [r7, #20]
 8012b88:	e004      	b.n	8012b94 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8012b8a:	6978      	ldr	r0, [r7, #20]
 8012b8c:	f002 fafc 	bl	8015188 <vPortFree>
      thePool = NULL;
 8012b90:	2300      	movs	r3, #0
 8012b92:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8012b94:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3718      	adds	r7, #24
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}

08012b9e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8012b9e:	b580      	push	{r7, lr}
 8012ba0:	b08a      	sub	sp, #40	@ 0x28
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8012baa:	2300      	movs	r3, #0
 8012bac:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8012bae:	f7ff ff20 	bl	80129f2 <inHandlerMode>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d00e      	beq.n	8012bd6 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012bb8:	f3ef 8211 	mrs	r2, BASEPRI
 8012bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bc0:	f383 8811 	msr	BASEPRI, r3
 8012bc4:	f3bf 8f6f 	isb	sy
 8012bc8:	f3bf 8f4f 	dsb	sy
 8012bcc:	617a      	str	r2, [r7, #20]
 8012bce:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012bd0:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8012bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bd4:	e001      	b.n	8012bda <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8012bd6:	f002 f8e7 	bl	8014da8 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012bda:	2300      	movs	r3, #0
 8012bdc:	61fb      	str	r3, [r7, #28]
 8012bde:	e029      	b.n	8012c34 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	691a      	ldr	r2, [r3, #16]
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	4413      	add	r3, r2
 8012be8:	687a      	ldr	r2, [r7, #4]
 8012bea:	6892      	ldr	r2, [r2, #8]
 8012bec:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bf0:	fb01 f202 	mul.w	r2, r1, r2
 8012bf4:	1a9b      	subs	r3, r3, r2
 8012bf6:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	685a      	ldr	r2, [r3, #4]
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	4413      	add	r3, r2
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d113      	bne.n	8012c2e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	685a      	ldr	r2, [r3, #4]
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	2201      	movs	r2, #1
 8012c10:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	4619      	mov	r1, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	69ba      	ldr	r2, [r7, #24]
 8012c1e:	fb02 f303 	mul.w	r3, r2, r3
 8012c22:	440b      	add	r3, r1
 8012c24:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	69ba      	ldr	r2, [r7, #24]
 8012c2a:	611a      	str	r2, [r3, #16]
      break;
 8012c2c:	e007      	b.n	8012c3e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8012c2e:	69fb      	ldr	r3, [r7, #28]
 8012c30:	3301      	adds	r3, #1
 8012c32:	61fb      	str	r3, [r7, #28]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	69fa      	ldr	r2, [r7, #28]
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	d3d0      	bcc.n	8012be0 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8012c3e:	f7ff fed8 	bl	80129f2 <inHandlerMode>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d005      	beq.n	8012c54 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8012c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c4a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012c52:	e001      	b.n	8012c58 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8012c54:	f002 f8da 	bl	8014e0c <vPortExitCritical>
  }
  
  return p;
 8012c58:	6a3b      	ldr	r3, [r7, #32]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3728      	adds	r7, #40	@ 0x28
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012c62:	b480      	push	{r7}
 8012c64:	b085      	sub	sp, #20
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
 8012c6a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d101      	bne.n	8012c76 <osPoolFree+0x14>
    return osErrorParameter;
 8012c72:	2380      	movs	r3, #128	@ 0x80
 8012c74:	e030      	b.n	8012cd8 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d101      	bne.n	8012c80 <osPoolFree+0x1e>
    return osErrorParameter;
 8012c7c:	2380      	movs	r3, #128	@ 0x80
 8012c7e:	e02b      	b.n	8012cd8 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	683a      	ldr	r2, [r7, #0]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d201      	bcs.n	8012c8e <osPoolFree+0x2c>
    return osErrorParameter;
 8012c8a:	2380      	movs	r3, #128	@ 0x80
 8012c8c:	e024      	b.n	8012cd8 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	6812      	ldr	r2, [r2, #0]
 8012c94:	1a9b      	subs	r3, r3, r2
 8012c96:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	68da      	ldr	r2, [r3, #12]
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ca2:	fb01 f202 	mul.w	r2, r1, r2
 8012ca6:	1a9b      	subs	r3, r3, r2
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d001      	beq.n	8012cb0 <osPoolFree+0x4e>
    return osErrorParameter;
 8012cac:	2380      	movs	r3, #128	@ 0x80
 8012cae:	e013      	b.n	8012cd8 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	68fa      	ldr	r2, [r7, #12]
 8012cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8012cba:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	689b      	ldr	r3, [r3, #8]
 8012cc0:	68fa      	ldr	r2, [r7, #12]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d301      	bcc.n	8012cca <osPoolFree+0x68>
    return osErrorParameter;
 8012cc6:	2380      	movs	r3, #128	@ 0x80
 8012cc8:	e006      	b.n	8012cd8 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	685a      	ldr	r2, [r3, #4]
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	4413      	add	r3, r2
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8012cd6:	2300      	movs	r3, #0
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3714      	adds	r7, #20
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012ce4:	b590      	push	{r4, r7, lr}
 8012ce6:	b085      	sub	sp, #20
 8012ce8:	af02      	add	r7, sp, #8
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	689b      	ldr	r3, [r3, #8]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d011      	beq.n	8012d1a <osMessageCreate+0x36>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	68db      	ldr	r3, [r3, #12]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d00d      	beq.n	8012d1a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6818      	ldr	r0, [r3, #0]
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6859      	ldr	r1, [r3, #4]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	689a      	ldr	r2, [r3, #8]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	2400      	movs	r4, #0
 8012d10:	9400      	str	r4, [sp, #0]
 8012d12:	f000 fb17 	bl	8013344 <xQueueGenericCreateStatic>
 8012d16:	4603      	mov	r3, r0
 8012d18:	e008      	b.n	8012d2c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6818      	ldr	r0, [r3, #0]
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	2200      	movs	r2, #0
 8012d24:	4619      	mov	r1, r3
 8012d26:	f000 fb8a 	bl	801343e <xQueueGenericCreate>
 8012d2a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	370c      	adds	r7, #12
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd90      	pop	{r4, r7, pc}

08012d34 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b086      	sub	sp, #24
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012d40:	2300      	movs	r3, #0
 8012d42:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d101      	bne.n	8012d52 <osMessagePut+0x1e>
    ticks = 1;
 8012d4e:	2301      	movs	r3, #1
 8012d50:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012d52:	f7ff fe4e 	bl	80129f2 <inHandlerMode>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d018      	beq.n	8012d8e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012d5c:	f107 0210 	add.w	r2, r7, #16
 8012d60:	f107 0108 	add.w	r1, r7, #8
 8012d64:	2300      	movs	r3, #0
 8012d66:	68f8      	ldr	r0, [r7, #12]
 8012d68:	f000 fcc6 	bl	80136f8 <xQueueGenericSendFromISR>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	d001      	beq.n	8012d76 <osMessagePut+0x42>
      return osErrorOS;
 8012d72:	23ff      	movs	r3, #255	@ 0xff
 8012d74:	e018      	b.n	8012da8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d014      	beq.n	8012da6 <osMessagePut+0x72>
 8012d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8012db0 <osMessagePut+0x7c>)
 8012d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d82:	601a      	str	r2, [r3, #0]
 8012d84:	f3bf 8f4f 	dsb	sy
 8012d88:	f3bf 8f6f 	isb	sy
 8012d8c:	e00b      	b.n	8012da6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012d8e:	f107 0108 	add.w	r1, r7, #8
 8012d92:	2300      	movs	r3, #0
 8012d94:	697a      	ldr	r2, [r7, #20]
 8012d96:	68f8      	ldr	r0, [r7, #12]
 8012d98:	f000 fbac 	bl	80134f4 <xQueueGenericSend>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b01      	cmp	r3, #1
 8012da0:	d001      	beq.n	8012da6 <osMessagePut+0x72>
      return osErrorOS;
 8012da2:	23ff      	movs	r3, #255	@ 0xff
 8012da4:	e000      	b.n	8012da8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3718      	adds	r7, #24
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	e000ed04 	.word	0xe000ed04

08012db4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8012db4:	b590      	push	{r4, r7, lr}
 8012db6:	b08b      	sub	sp, #44	@ 0x2c
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	60f8      	str	r0, [r7, #12]
 8012dbc:	60b9      	str	r1, [r7, #8]
 8012dbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d10a      	bne.n	8012de4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012dce:	2380      	movs	r3, #128	@ 0x80
 8012dd0:	617b      	str	r3, [r7, #20]
    return event;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	461c      	mov	r4, r3
 8012dd6:	f107 0314 	add.w	r3, r7, #20
 8012dda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012dde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012de2:	e054      	b.n	8012e8e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8012de4:	2300      	movs	r3, #0
 8012de6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012de8:	2300      	movs	r3, #0
 8012dea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012df2:	d103      	bne.n	8012dfc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8012df4:	f04f 33ff 	mov.w	r3, #4294967295
 8012df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8012dfa:	e009      	b.n	8012e10 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d006      	beq.n	8012e10 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8012e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d101      	bne.n	8012e10 <osMessageGet+0x5c>
      ticks = 1;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012e10:	f7ff fdef 	bl	80129f2 <inHandlerMode>
 8012e14:	4603      	mov	r3, r0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d01c      	beq.n	8012e54 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012e1a:	f107 0220 	add.w	r2, r7, #32
 8012e1e:	f107 0314 	add.w	r3, r7, #20
 8012e22:	3304      	adds	r3, #4
 8012e24:	4619      	mov	r1, r3
 8012e26:	68b8      	ldr	r0, [r7, #8]
 8012e28:	f000 fde6 	bl	80139f8 <xQueueReceiveFromISR>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b01      	cmp	r3, #1
 8012e30:	d102      	bne.n	8012e38 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012e32:	2310      	movs	r3, #16
 8012e34:	617b      	str	r3, [r7, #20]
 8012e36:	e001      	b.n	8012e3c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012e3c:	6a3b      	ldr	r3, [r7, #32]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d01d      	beq.n	8012e7e <osMessageGet+0xca>
 8012e42:	4b15      	ldr	r3, [pc, #84]	@ (8012e98 <osMessageGet+0xe4>)
 8012e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e48:	601a      	str	r2, [r3, #0]
 8012e4a:	f3bf 8f4f 	dsb	sy
 8012e4e:	f3bf 8f6f 	isb	sy
 8012e52:	e014      	b.n	8012e7e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012e54:	f107 0314 	add.w	r3, r7, #20
 8012e58:	3304      	adds	r3, #4
 8012e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e5c:	4619      	mov	r1, r3
 8012e5e:	68b8      	ldr	r0, [r7, #8]
 8012e60:	f000 fce8 	bl	8013834 <xQueueReceive>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d102      	bne.n	8012e70 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8012e6a:	2310      	movs	r3, #16
 8012e6c:	617b      	str	r3, [r7, #20]
 8012e6e:	e006      	b.n	8012e7e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d101      	bne.n	8012e7a <osMessageGet+0xc6>
 8012e76:	2300      	movs	r3, #0
 8012e78:	e000      	b.n	8012e7c <osMessageGet+0xc8>
 8012e7a:	2340      	movs	r3, #64	@ 0x40
 8012e7c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	461c      	mov	r4, r3
 8012e82:	f107 0314 	add.w	r3, r7, #20
 8012e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012e8e:	68f8      	ldr	r0, [r7, #12]
 8012e90:	372c      	adds	r7, #44	@ 0x2c
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd90      	pop	{r4, r7, pc}
 8012e96:	bf00      	nop
 8012e98:	e000ed04 	.word	0xe000ed04

08012e9c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012e9c:	b590      	push	{r4, r7, lr}
 8012e9e:	b087      	sub	sp, #28
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
 8012ea4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	60fb      	str	r3, [r7, #12]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	613b      	str	r3, [r7, #16]
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	689c      	ldr	r4, [r3, #8]
 8012eba:	200c      	movs	r0, #12
 8012ebc:	f002 f896 	bl	8014fec <pvPortMalloc>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	689b      	ldr	r3, [r3, #8]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d101      	bne.n	8012ed2 <osMailCreate+0x36>
    return NULL;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	e038      	b.n	8012f44 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	689b      	ldr	r3, [r3, #8]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6818      	ldr	r0, [r3, #0]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	689b      	ldr	r3, [r3, #8]
 8012ee4:	681c      	ldr	r4, [r3, #0]
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	2104      	movs	r1, #4
 8012eea:	f000 faa8 	bl	801343e <xQueueGenericCreate>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	689b      	ldr	r3, [r3, #8]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d107      	bne.n	8012f0e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f002 f93f 	bl	8015188 <vPortFree>
    return NULL;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	e01a      	b.n	8012f44 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	689b      	ldr	r3, [r3, #8]
 8012f12:	681c      	ldr	r4, [r3, #0]
 8012f14:	f107 030c 	add.w	r3, r7, #12
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff fde3 	bl	8012ae4 <osPoolCreate>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	689b      	ldr	r3, [r3, #8]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	689b      	ldr	r3, [r3, #8]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d107      	bne.n	8012f3e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	689b      	ldr	r3, [r3, #8]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	4618      	mov	r0, r3
 8012f36:	f002 f927 	bl	8015188 <vPortFree>
    return NULL;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	e002      	b.n	8012f44 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	689b      	ldr	r3, [r3, #8]
 8012f42:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	371c      	adds	r7, #28
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd90      	pop	{r4, r7, pc}

08012f4c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b084      	sub	sp, #16
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d101      	bne.n	8012f60 <osMailAlloc+0x14>
    return NULL;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	e006      	b.n	8012f6e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	689b      	ldr	r3, [r3, #8]
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7ff fe1a 	bl	8012b9e <osPoolAlloc>
 8012f6a:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3710      	adds	r7, #16
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
	...

08012f78 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d101      	bne.n	8012f8c <osMailPut+0x14>
    return osErrorParameter;
 8012f88:	2380      	movs	r3, #128	@ 0x80
 8012f8a:	e02c      	b.n	8012fe6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8012f90:	f7ff fd2f 	bl	80129f2 <inHandlerMode>
 8012f94:	4603      	mov	r3, r0
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d018      	beq.n	8012fcc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6858      	ldr	r0, [r3, #4]
 8012f9e:	f107 020c 	add.w	r2, r7, #12
 8012fa2:	4639      	mov	r1, r7
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	f000 fba7 	bl	80136f8 <xQueueGenericSendFromISR>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d001      	beq.n	8012fb4 <osMailPut+0x3c>
      return osErrorOS;
 8012fb0:	23ff      	movs	r3, #255	@ 0xff
 8012fb2:	e018      	b.n	8012fe6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d014      	beq.n	8012fe4 <osMailPut+0x6c>
 8012fba:	4b0d      	ldr	r3, [pc, #52]	@ (8012ff0 <osMailPut+0x78>)
 8012fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fc0:	601a      	str	r2, [r3, #0]
 8012fc2:	f3bf 8f4f 	dsb	sy
 8012fc6:	f3bf 8f6f 	isb	sy
 8012fca:	e00b      	b.n	8012fe4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6858      	ldr	r0, [r3, #4]
 8012fd0:	4639      	mov	r1, r7
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f000 fa8d 	bl	80134f4 <xQueueGenericSend>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	d001      	beq.n	8012fe4 <osMailPut+0x6c>
      return osErrorOS;
 8012fe0:	23ff      	movs	r3, #255	@ 0xff
 8012fe2:	e000      	b.n	8012fe6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012fe4:	2300      	movs	r3, #0
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	e000ed04 	.word	0xe000ed04

08012ff4 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012ff4:	b590      	push	{r4, r7, lr}
 8012ff6:	b08b      	sub	sp, #44	@ 0x2c
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d10a      	bne.n	8013020 <osMailGet+0x2c>
    event.status = osErrorParameter;
 801300a:	2380      	movs	r3, #128	@ 0x80
 801300c:	617b      	str	r3, [r7, #20]
    return event;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	461c      	mov	r4, r3
 8013012:	f107 0314 	add.w	r3, r7, #20
 8013016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801301a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801301e:	e056      	b.n	80130ce <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013020:	2300      	movs	r3, #0
 8013022:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8013024:	2300      	movs	r3, #0
 8013026:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801302e:	d103      	bne.n	8013038 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8013030:	f04f 33ff 	mov.w	r3, #4294967295
 8013034:	627b      	str	r3, [r7, #36]	@ 0x24
 8013036:	e009      	b.n	801304c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d006      	beq.n	801304c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8013042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013044:	2b00      	cmp	r3, #0
 8013046:	d101      	bne.n	801304c <osMailGet+0x58>
      ticks = 1;
 8013048:	2301      	movs	r3, #1
 801304a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 801304c:	f7ff fcd1 	bl	80129f2 <inHandlerMode>
 8013050:	4603      	mov	r3, r0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d01d      	beq.n	8013092 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	6858      	ldr	r0, [r3, #4]
 801305a:	f107 0220 	add.w	r2, r7, #32
 801305e:	f107 0314 	add.w	r3, r7, #20
 8013062:	3304      	adds	r3, #4
 8013064:	4619      	mov	r1, r3
 8013066:	f000 fcc7 	bl	80139f8 <xQueueReceiveFromISR>
 801306a:	4603      	mov	r3, r0
 801306c:	2b01      	cmp	r3, #1
 801306e:	d102      	bne.n	8013076 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8013070:	2320      	movs	r3, #32
 8013072:	617b      	str	r3, [r7, #20]
 8013074:	e001      	b.n	801307a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8013076:	2300      	movs	r3, #0
 8013078:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801307a:	6a3b      	ldr	r3, [r7, #32]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d01e      	beq.n	80130be <osMailGet+0xca>
 8013080:	4b15      	ldr	r3, [pc, #84]	@ (80130d8 <osMailGet+0xe4>)
 8013082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013086:	601a      	str	r2, [r3, #0]
 8013088:	f3bf 8f4f 	dsb	sy
 801308c:	f3bf 8f6f 	isb	sy
 8013090:	e015      	b.n	80130be <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	6858      	ldr	r0, [r3, #4]
 8013096:	f107 0314 	add.w	r3, r7, #20
 801309a:	3304      	adds	r3, #4
 801309c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801309e:	4619      	mov	r1, r3
 80130a0:	f000 fbc8 	bl	8013834 <xQueueReceive>
 80130a4:	4603      	mov	r3, r0
 80130a6:	2b01      	cmp	r3, #1
 80130a8:	d102      	bne.n	80130b0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80130aa:	2320      	movs	r3, #32
 80130ac:	617b      	str	r3, [r7, #20]
 80130ae:	e006      	b.n	80130be <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80130b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d101      	bne.n	80130ba <osMailGet+0xc6>
 80130b6:	2300      	movs	r3, #0
 80130b8:	e000      	b.n	80130bc <osMailGet+0xc8>
 80130ba:	2340      	movs	r3, #64	@ 0x40
 80130bc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	461c      	mov	r4, r3
 80130c2:	f107 0314 	add.w	r3, r7, #20
 80130c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80130ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	372c      	adds	r7, #44	@ 0x2c
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd90      	pop	{r4, r7, pc}
 80130d6:	bf00      	nop
 80130d8:	e000ed04 	.word	0xe000ed04

080130dc <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d101      	bne.n	80130f0 <osMailFree+0x14>
    return osErrorParameter;
 80130ec:	2380      	movs	r3, #128	@ 0x80
 80130ee:	e006      	b.n	80130fe <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	689b      	ldr	r3, [r3, #8]
 80130f4:	6839      	ldr	r1, [r7, #0]
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7ff fdb3 	bl	8012c62 <osPoolFree>
 80130fc:	4603      	mov	r3, r0
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3708      	adds	r7, #8
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}

08013106 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013106:	b480      	push	{r7}
 8013108:	b083      	sub	sp, #12
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f103 0208 	add.w	r2, r3, #8
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f04f 32ff 	mov.w	r2, #4294967295
 801311e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f103 0208 	add.w	r2, r3, #8
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f103 0208 	add.w	r2, r3, #8
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2200      	movs	r2, #0
 8013138:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801313a:	bf00      	nop
 801313c:	370c      	adds	r7, #12
 801313e:	46bd      	mov	sp, r7
 8013140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013144:	4770      	bx	lr

08013146 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013146:	b480      	push	{r7}
 8013148:	b083      	sub	sp, #12
 801314a:	af00      	add	r7, sp, #0
 801314c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2200      	movs	r2, #0
 8013152:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013154:	bf00      	nop
 8013156:	370c      	adds	r7, #12
 8013158:	46bd      	mov	sp, r7
 801315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315e:	4770      	bx	lr

08013160 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013160:	b480      	push	{r7}
 8013162:	b085      	sub	sp, #20
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	68fa      	ldr	r2, [r7, #12]
 8013174:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	689a      	ldr	r2, [r3, #8]
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	689b      	ldr	r3, [r3, #8]
 8013182:	683a      	ldr	r2, [r7, #0]
 8013184:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	683a      	ldr	r2, [r7, #0]
 801318a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	687a      	ldr	r2, [r7, #4]
 8013190:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	1c5a      	adds	r2, r3, #1
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	601a      	str	r2, [r3, #0]
}
 801319c:	bf00      	nop
 801319e:	3714      	adds	r7, #20
 80131a0:	46bd      	mov	sp, r7
 80131a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a6:	4770      	bx	lr

080131a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80131a8:	b480      	push	{r7}
 80131aa:	b085      	sub	sp, #20
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131be:	d103      	bne.n	80131c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	691b      	ldr	r3, [r3, #16]
 80131c4:	60fb      	str	r3, [r7, #12]
 80131c6:	e00c      	b.n	80131e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	3308      	adds	r3, #8
 80131cc:	60fb      	str	r3, [r7, #12]
 80131ce:	e002      	b.n	80131d6 <vListInsert+0x2e>
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	60fb      	str	r3, [r7, #12]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	68ba      	ldr	r2, [r7, #8]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d2f6      	bcs.n	80131d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	685a      	ldr	r2, [r3, #4]
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	683a      	ldr	r2, [r7, #0]
 80131f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	68fa      	ldr	r2, [r7, #12]
 80131f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	683a      	ldr	r2, [r7, #0]
 80131fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	687a      	ldr	r2, [r7, #4]
 8013202:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	1c5a      	adds	r2, r3, #1
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	601a      	str	r2, [r3, #0]
}
 801320e:	bf00      	nop
 8013210:	3714      	adds	r7, #20
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr

0801321a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801321a:	b480      	push	{r7}
 801321c:	b085      	sub	sp, #20
 801321e:	af00      	add	r7, sp, #0
 8013220:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	691b      	ldr	r3, [r3, #16]
 8013226:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	6892      	ldr	r2, [r2, #8]
 8013230:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	6852      	ldr	r2, [r2, #4]
 801323a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	687a      	ldr	r2, [r7, #4]
 8013242:	429a      	cmp	r2, r3
 8013244:	d103      	bne.n	801324e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	689a      	ldr	r2, [r3, #8]
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2200      	movs	r2, #0
 8013252:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	1e5a      	subs	r2, r3, #1
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	681b      	ldr	r3, [r3, #0]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3714      	adds	r7, #20
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr
	...

08013270 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d10b      	bne.n	801329c <xQueueGenericReset+0x2c>
	__asm volatile
 8013284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013288:	f383 8811 	msr	BASEPRI, r3
 801328c:	f3bf 8f6f 	isb	sy
 8013290:	f3bf 8f4f 	dsb	sy
 8013294:	60bb      	str	r3, [r7, #8]
}
 8013296:	bf00      	nop
 8013298:	bf00      	nop
 801329a:	e7fd      	b.n	8013298 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801329c:	f001 fd84 	bl	8014da8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	681a      	ldr	r2, [r3, #0]
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132a8:	68f9      	ldr	r1, [r7, #12]
 80132aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80132ac:	fb01 f303 	mul.w	r3, r1, r3
 80132b0:	441a      	add	r2, r3
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	2200      	movs	r2, #0
 80132ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132cc:	3b01      	subs	r3, #1
 80132ce:	68f9      	ldr	r1, [r7, #12]
 80132d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80132d2:	fb01 f303 	mul.w	r3, r1, r3
 80132d6:	441a      	add	r2, r3
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	22ff      	movs	r2, #255	@ 0xff
 80132e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	22ff      	movs	r2, #255	@ 0xff
 80132e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d114      	bne.n	801331c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	691b      	ldr	r3, [r3, #16]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d01a      	beq.n	8013330 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	3310      	adds	r3, #16
 80132fe:	4618      	mov	r0, r3
 8013300:	f001 f94c 	bl	801459c <xTaskRemoveFromEventList>
 8013304:	4603      	mov	r3, r0
 8013306:	2b00      	cmp	r3, #0
 8013308:	d012      	beq.n	8013330 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801330a:	4b0d      	ldr	r3, [pc, #52]	@ (8013340 <xQueueGenericReset+0xd0>)
 801330c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013310:	601a      	str	r2, [r3, #0]
 8013312:	f3bf 8f4f 	dsb	sy
 8013316:	f3bf 8f6f 	isb	sy
 801331a:	e009      	b.n	8013330 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	3310      	adds	r3, #16
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff fef0 	bl	8013106 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	3324      	adds	r3, #36	@ 0x24
 801332a:	4618      	mov	r0, r3
 801332c:	f7ff feeb 	bl	8013106 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013330:	f001 fd6c 	bl	8014e0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013334:	2301      	movs	r3, #1
}
 8013336:	4618      	mov	r0, r3
 8013338:	3710      	adds	r7, #16
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	e000ed04 	.word	0xe000ed04

08013344 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013344:	b580      	push	{r7, lr}
 8013346:	b08e      	sub	sp, #56	@ 0x38
 8013348:	af02      	add	r7, sp, #8
 801334a:	60f8      	str	r0, [r7, #12]
 801334c:	60b9      	str	r1, [r7, #8]
 801334e:	607a      	str	r2, [r7, #4]
 8013350:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d10b      	bne.n	8013370 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8013358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801335c:	f383 8811 	msr	BASEPRI, r3
 8013360:	f3bf 8f6f 	isb	sy
 8013364:	f3bf 8f4f 	dsb	sy
 8013368:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801336a:	bf00      	nop
 801336c:	bf00      	nop
 801336e:	e7fd      	b.n	801336c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d10b      	bne.n	801338e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8013376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801337a:	f383 8811 	msr	BASEPRI, r3
 801337e:	f3bf 8f6f 	isb	sy
 8013382:	f3bf 8f4f 	dsb	sy
 8013386:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013388:	bf00      	nop
 801338a:	bf00      	nop
 801338c:	e7fd      	b.n	801338a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d002      	beq.n	801339a <xQueueGenericCreateStatic+0x56>
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d001      	beq.n	801339e <xQueueGenericCreateStatic+0x5a>
 801339a:	2301      	movs	r3, #1
 801339c:	e000      	b.n	80133a0 <xQueueGenericCreateStatic+0x5c>
 801339e:	2300      	movs	r3, #0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10b      	bne.n	80133bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80133a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133a8:	f383 8811 	msr	BASEPRI, r3
 80133ac:	f3bf 8f6f 	isb	sy
 80133b0:	f3bf 8f4f 	dsb	sy
 80133b4:	623b      	str	r3, [r7, #32]
}
 80133b6:	bf00      	nop
 80133b8:	bf00      	nop
 80133ba:	e7fd      	b.n	80133b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d102      	bne.n	80133c8 <xQueueGenericCreateStatic+0x84>
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d101      	bne.n	80133cc <xQueueGenericCreateStatic+0x88>
 80133c8:	2301      	movs	r3, #1
 80133ca:	e000      	b.n	80133ce <xQueueGenericCreateStatic+0x8a>
 80133cc:	2300      	movs	r3, #0
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d10b      	bne.n	80133ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80133d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133d6:	f383 8811 	msr	BASEPRI, r3
 80133da:	f3bf 8f6f 	isb	sy
 80133de:	f3bf 8f4f 	dsb	sy
 80133e2:	61fb      	str	r3, [r7, #28]
}
 80133e4:	bf00      	nop
 80133e6:	bf00      	nop
 80133e8:	e7fd      	b.n	80133e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80133ea:	2348      	movs	r3, #72	@ 0x48
 80133ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	2b48      	cmp	r3, #72	@ 0x48
 80133f2:	d00b      	beq.n	801340c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80133f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133f8:	f383 8811 	msr	BASEPRI, r3
 80133fc:	f3bf 8f6f 	isb	sy
 8013400:	f3bf 8f4f 	dsb	sy
 8013404:	61bb      	str	r3, [r7, #24]
}
 8013406:	bf00      	nop
 8013408:	bf00      	nop
 801340a:	e7fd      	b.n	8013408 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801340c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013414:	2b00      	cmp	r3, #0
 8013416:	d00d      	beq.n	8013434 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801341a:	2201      	movs	r2, #1
 801341c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013420:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013426:	9300      	str	r3, [sp, #0]
 8013428:	4613      	mov	r3, r2
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	68b9      	ldr	r1, [r7, #8]
 801342e:	68f8      	ldr	r0, [r7, #12]
 8013430:	f000 f840 	bl	80134b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013436:	4618      	mov	r0, r3
 8013438:	3730      	adds	r7, #48	@ 0x30
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}

0801343e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801343e:	b580      	push	{r7, lr}
 8013440:	b08a      	sub	sp, #40	@ 0x28
 8013442:	af02      	add	r7, sp, #8
 8013444:	60f8      	str	r0, [r7, #12]
 8013446:	60b9      	str	r1, [r7, #8]
 8013448:	4613      	mov	r3, r2
 801344a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d10b      	bne.n	801346a <xQueueGenericCreate+0x2c>
	__asm volatile
 8013452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013456:	f383 8811 	msr	BASEPRI, r3
 801345a:	f3bf 8f6f 	isb	sy
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	613b      	str	r3, [r7, #16]
}
 8013464:	bf00      	nop
 8013466:	bf00      	nop
 8013468:	e7fd      	b.n	8013466 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	68ba      	ldr	r2, [r7, #8]
 801346e:	fb02 f303 	mul.w	r3, r2, r3
 8013472:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013474:	69fb      	ldr	r3, [r7, #28]
 8013476:	3348      	adds	r3, #72	@ 0x48
 8013478:	4618      	mov	r0, r3
 801347a:	f001 fdb7 	bl	8014fec <pvPortMalloc>
 801347e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d011      	beq.n	80134aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	3348      	adds	r3, #72	@ 0x48
 801348e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013490:	69bb      	ldr	r3, [r7, #24]
 8013492:	2200      	movs	r2, #0
 8013494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013498:	79fa      	ldrb	r2, [r7, #7]
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	9300      	str	r3, [sp, #0]
 801349e:	4613      	mov	r3, r2
 80134a0:	697a      	ldr	r2, [r7, #20]
 80134a2:	68b9      	ldr	r1, [r7, #8]
 80134a4:	68f8      	ldr	r0, [r7, #12]
 80134a6:	f000 f805 	bl	80134b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80134aa:	69bb      	ldr	r3, [r7, #24]
	}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3720      	adds	r7, #32
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b084      	sub	sp, #16
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	60b9      	str	r1, [r7, #8]
 80134be:	607a      	str	r2, [r7, #4]
 80134c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d103      	bne.n	80134d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	69ba      	ldr	r2, [r7, #24]
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	e002      	b.n	80134d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80134d0:	69bb      	ldr	r3, [r7, #24]
 80134d2:	687a      	ldr	r2, [r7, #4]
 80134d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80134d6:	69bb      	ldr	r3, [r7, #24]
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	68ba      	ldr	r2, [r7, #8]
 80134e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80134e2:	2101      	movs	r1, #1
 80134e4:	69b8      	ldr	r0, [r7, #24]
 80134e6:	f7ff fec3 	bl	8013270 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80134ea:	bf00      	nop
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
	...

080134f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08e      	sub	sp, #56	@ 0x38
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	607a      	str	r2, [r7, #4]
 8013500:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013502:	2300      	movs	r3, #0
 8013504:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801350c:	2b00      	cmp	r3, #0
 801350e:	d10b      	bne.n	8013528 <xQueueGenericSend+0x34>
	__asm volatile
 8013510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013514:	f383 8811 	msr	BASEPRI, r3
 8013518:	f3bf 8f6f 	isb	sy
 801351c:	f3bf 8f4f 	dsb	sy
 8013520:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013522:	bf00      	nop
 8013524:	bf00      	nop
 8013526:	e7fd      	b.n	8013524 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d103      	bne.n	8013536 <xQueueGenericSend+0x42>
 801352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013532:	2b00      	cmp	r3, #0
 8013534:	d101      	bne.n	801353a <xQueueGenericSend+0x46>
 8013536:	2301      	movs	r3, #1
 8013538:	e000      	b.n	801353c <xQueueGenericSend+0x48>
 801353a:	2300      	movs	r3, #0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d10b      	bne.n	8013558 <xQueueGenericSend+0x64>
	__asm volatile
 8013540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013544:	f383 8811 	msr	BASEPRI, r3
 8013548:	f3bf 8f6f 	isb	sy
 801354c:	f3bf 8f4f 	dsb	sy
 8013550:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013552:	bf00      	nop
 8013554:	bf00      	nop
 8013556:	e7fd      	b.n	8013554 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	2b02      	cmp	r3, #2
 801355c:	d103      	bne.n	8013566 <xQueueGenericSend+0x72>
 801355e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013562:	2b01      	cmp	r3, #1
 8013564:	d101      	bne.n	801356a <xQueueGenericSend+0x76>
 8013566:	2301      	movs	r3, #1
 8013568:	e000      	b.n	801356c <xQueueGenericSend+0x78>
 801356a:	2300      	movs	r3, #0
 801356c:	2b00      	cmp	r3, #0
 801356e:	d10b      	bne.n	8013588 <xQueueGenericSend+0x94>
	__asm volatile
 8013570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013574:	f383 8811 	msr	BASEPRI, r3
 8013578:	f3bf 8f6f 	isb	sy
 801357c:	f3bf 8f4f 	dsb	sy
 8013580:	623b      	str	r3, [r7, #32]
}
 8013582:	bf00      	nop
 8013584:	bf00      	nop
 8013586:	e7fd      	b.n	8013584 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013588:	f001 f9ce 	bl	8014928 <xTaskGetSchedulerState>
 801358c:	4603      	mov	r3, r0
 801358e:	2b00      	cmp	r3, #0
 8013590:	d102      	bne.n	8013598 <xQueueGenericSend+0xa4>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d101      	bne.n	801359c <xQueueGenericSend+0xa8>
 8013598:	2301      	movs	r3, #1
 801359a:	e000      	b.n	801359e <xQueueGenericSend+0xaa>
 801359c:	2300      	movs	r3, #0
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d10b      	bne.n	80135ba <xQueueGenericSend+0xc6>
	__asm volatile
 80135a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135a6:	f383 8811 	msr	BASEPRI, r3
 80135aa:	f3bf 8f6f 	isb	sy
 80135ae:	f3bf 8f4f 	dsb	sy
 80135b2:	61fb      	str	r3, [r7, #28]
}
 80135b4:	bf00      	nop
 80135b6:	bf00      	nop
 80135b8:	e7fd      	b.n	80135b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80135ba:	f001 fbf5 	bl	8014da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80135be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80135c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d302      	bcc.n	80135d0 <xQueueGenericSend+0xdc>
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	2b02      	cmp	r3, #2
 80135ce:	d129      	bne.n	8013624 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80135d0:	683a      	ldr	r2, [r7, #0]
 80135d2:	68b9      	ldr	r1, [r7, #8]
 80135d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135d6:	f000 fa91 	bl	8013afc <prvCopyDataToQueue>
 80135da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d010      	beq.n	8013606 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135e6:	3324      	adds	r3, #36	@ 0x24
 80135e8:	4618      	mov	r0, r3
 80135ea:	f000 ffd7 	bl	801459c <xTaskRemoveFromEventList>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d013      	beq.n	801361c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80135f4:	4b3f      	ldr	r3, [pc, #252]	@ (80136f4 <xQueueGenericSend+0x200>)
 80135f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80135fa:	601a      	str	r2, [r3, #0]
 80135fc:	f3bf 8f4f 	dsb	sy
 8013600:	f3bf 8f6f 	isb	sy
 8013604:	e00a      	b.n	801361c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013608:	2b00      	cmp	r3, #0
 801360a:	d007      	beq.n	801361c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801360c:	4b39      	ldr	r3, [pc, #228]	@ (80136f4 <xQueueGenericSend+0x200>)
 801360e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013612:	601a      	str	r2, [r3, #0]
 8013614:	f3bf 8f4f 	dsb	sy
 8013618:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801361c:	f001 fbf6 	bl	8014e0c <vPortExitCritical>
				return pdPASS;
 8013620:	2301      	movs	r3, #1
 8013622:	e063      	b.n	80136ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d103      	bne.n	8013632 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801362a:	f001 fbef 	bl	8014e0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801362e:	2300      	movs	r3, #0
 8013630:	e05c      	b.n	80136ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013634:	2b00      	cmp	r3, #0
 8013636:	d106      	bne.n	8013646 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013638:	f107 0314 	add.w	r3, r7, #20
 801363c:	4618      	mov	r0, r3
 801363e:	f001 f811 	bl	8014664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013642:	2301      	movs	r3, #1
 8013644:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013646:	f001 fbe1 	bl	8014e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801364a:	f000 fdb7 	bl	80141bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801364e:	f001 fbab 	bl	8014da8 <vPortEnterCritical>
 8013652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013654:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013658:	b25b      	sxtb	r3, r3
 801365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801365e:	d103      	bne.n	8013668 <xQueueGenericSend+0x174>
 8013660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013662:	2200      	movs	r2, #0
 8013664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801366a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801366e:	b25b      	sxtb	r3, r3
 8013670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013674:	d103      	bne.n	801367e <xQueueGenericSend+0x18a>
 8013676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013678:	2200      	movs	r2, #0
 801367a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801367e:	f001 fbc5 	bl	8014e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013682:	1d3a      	adds	r2, r7, #4
 8013684:	f107 0314 	add.w	r3, r7, #20
 8013688:	4611      	mov	r1, r2
 801368a:	4618      	mov	r0, r3
 801368c:	f001 f800 	bl	8014690 <xTaskCheckForTimeOut>
 8013690:	4603      	mov	r3, r0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d124      	bne.n	80136e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013696:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013698:	f000 fb28 	bl	8013cec <prvIsQueueFull>
 801369c:	4603      	mov	r3, r0
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d018      	beq.n	80136d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80136a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136a4:	3310      	adds	r3, #16
 80136a6:	687a      	ldr	r2, [r7, #4]
 80136a8:	4611      	mov	r1, r2
 80136aa:	4618      	mov	r0, r3
 80136ac:	f000 ff50 	bl	8014550 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80136b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80136b2:	f000 fab3 	bl	8013c1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80136b6:	f000 fd8f 	bl	80141d8 <xTaskResumeAll>
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f47f af7c 	bne.w	80135ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80136c2:	4b0c      	ldr	r3, [pc, #48]	@ (80136f4 <xQueueGenericSend+0x200>)
 80136c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136c8:	601a      	str	r2, [r3, #0]
 80136ca:	f3bf 8f4f 	dsb	sy
 80136ce:	f3bf 8f6f 	isb	sy
 80136d2:	e772      	b.n	80135ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80136d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80136d6:	f000 faa1 	bl	8013c1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80136da:	f000 fd7d 	bl	80141d8 <xTaskResumeAll>
 80136de:	e76c      	b.n	80135ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80136e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80136e2:	f000 fa9b 	bl	8013c1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80136e6:	f000 fd77 	bl	80141d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80136ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3738      	adds	r7, #56	@ 0x38
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	e000ed04 	.word	0xe000ed04

080136f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b090      	sub	sp, #64	@ 0x40
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	607a      	str	r2, [r7, #4]
 8013704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801370a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801370c:	2b00      	cmp	r3, #0
 801370e:	d10b      	bne.n	8013728 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013714:	f383 8811 	msr	BASEPRI, r3
 8013718:	f3bf 8f6f 	isb	sy
 801371c:	f3bf 8f4f 	dsb	sy
 8013720:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013722:	bf00      	nop
 8013724:	bf00      	nop
 8013726:	e7fd      	b.n	8013724 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d103      	bne.n	8013736 <xQueueGenericSendFromISR+0x3e>
 801372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013732:	2b00      	cmp	r3, #0
 8013734:	d101      	bne.n	801373a <xQueueGenericSendFromISR+0x42>
 8013736:	2301      	movs	r3, #1
 8013738:	e000      	b.n	801373c <xQueueGenericSendFromISR+0x44>
 801373a:	2300      	movs	r3, #0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d10b      	bne.n	8013758 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8013740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013744:	f383 8811 	msr	BASEPRI, r3
 8013748:	f3bf 8f6f 	isb	sy
 801374c:	f3bf 8f4f 	dsb	sy
 8013750:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013752:	bf00      	nop
 8013754:	bf00      	nop
 8013756:	e7fd      	b.n	8013754 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	2b02      	cmp	r3, #2
 801375c:	d103      	bne.n	8013766 <xQueueGenericSendFromISR+0x6e>
 801375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013762:	2b01      	cmp	r3, #1
 8013764:	d101      	bne.n	801376a <xQueueGenericSendFromISR+0x72>
 8013766:	2301      	movs	r3, #1
 8013768:	e000      	b.n	801376c <xQueueGenericSendFromISR+0x74>
 801376a:	2300      	movs	r3, #0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d10b      	bne.n	8013788 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8013770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013774:	f383 8811 	msr	BASEPRI, r3
 8013778:	f3bf 8f6f 	isb	sy
 801377c:	f3bf 8f4f 	dsb	sy
 8013780:	623b      	str	r3, [r7, #32]
}
 8013782:	bf00      	nop
 8013784:	bf00      	nop
 8013786:	e7fd      	b.n	8013784 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013788:	f001 fbee 	bl	8014f68 <vPortValidateInterruptPriority>
	__asm volatile
 801378c:	f3ef 8211 	mrs	r2, BASEPRI
 8013790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013794:	f383 8811 	msr	BASEPRI, r3
 8013798:	f3bf 8f6f 	isb	sy
 801379c:	f3bf 8f4f 	dsb	sy
 80137a0:	61fa      	str	r2, [r7, #28]
 80137a2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80137a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80137a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80137a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80137ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d302      	bcc.n	80137ba <xQueueGenericSendFromISR+0xc2>
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	2b02      	cmp	r3, #2
 80137b8:	d12f      	bne.n	801381a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80137ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80137c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80137c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80137ca:	683a      	ldr	r2, [r7, #0]
 80137cc:	68b9      	ldr	r1, [r7, #8]
 80137ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80137d0:	f000 f994 	bl	8013afc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80137d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80137d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137dc:	d112      	bne.n	8013804 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d016      	beq.n	8013814 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e8:	3324      	adds	r3, #36	@ 0x24
 80137ea:	4618      	mov	r0, r3
 80137ec:	f000 fed6 	bl	801459c <xTaskRemoveFromEventList>
 80137f0:	4603      	mov	r3, r0
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d00e      	beq.n	8013814 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d00b      	beq.n	8013814 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2201      	movs	r2, #1
 8013800:	601a      	str	r2, [r3, #0]
 8013802:	e007      	b.n	8013814 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013804:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013808:	3301      	adds	r3, #1
 801380a:	b2db      	uxtb	r3, r3
 801380c:	b25a      	sxtb	r2, r3
 801380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013814:	2301      	movs	r3, #1
 8013816:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013818:	e001      	b.n	801381e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801381a:	2300      	movs	r3, #0
 801381c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801381e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013820:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	f383 8811 	msr	BASEPRI, r3
}
 8013828:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801382a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801382c:	4618      	mov	r0, r3
 801382e:	3740      	adds	r7, #64	@ 0x40
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}

08013834 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b08c      	sub	sp, #48	@ 0x30
 8013838:	af00      	add	r7, sp, #0
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013840:	2300      	movs	r3, #0
 8013842:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801384a:	2b00      	cmp	r3, #0
 801384c:	d10b      	bne.n	8013866 <xQueueReceive+0x32>
	__asm volatile
 801384e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013852:	f383 8811 	msr	BASEPRI, r3
 8013856:	f3bf 8f6f 	isb	sy
 801385a:	f3bf 8f4f 	dsb	sy
 801385e:	623b      	str	r3, [r7, #32]
}
 8013860:	bf00      	nop
 8013862:	bf00      	nop
 8013864:	e7fd      	b.n	8013862 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d103      	bne.n	8013874 <xQueueReceive+0x40>
 801386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013870:	2b00      	cmp	r3, #0
 8013872:	d101      	bne.n	8013878 <xQueueReceive+0x44>
 8013874:	2301      	movs	r3, #1
 8013876:	e000      	b.n	801387a <xQueueReceive+0x46>
 8013878:	2300      	movs	r3, #0
 801387a:	2b00      	cmp	r3, #0
 801387c:	d10b      	bne.n	8013896 <xQueueReceive+0x62>
	__asm volatile
 801387e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013882:	f383 8811 	msr	BASEPRI, r3
 8013886:	f3bf 8f6f 	isb	sy
 801388a:	f3bf 8f4f 	dsb	sy
 801388e:	61fb      	str	r3, [r7, #28]
}
 8013890:	bf00      	nop
 8013892:	bf00      	nop
 8013894:	e7fd      	b.n	8013892 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013896:	f001 f847 	bl	8014928 <xTaskGetSchedulerState>
 801389a:	4603      	mov	r3, r0
 801389c:	2b00      	cmp	r3, #0
 801389e:	d102      	bne.n	80138a6 <xQueueReceive+0x72>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d101      	bne.n	80138aa <xQueueReceive+0x76>
 80138a6:	2301      	movs	r3, #1
 80138a8:	e000      	b.n	80138ac <xQueueReceive+0x78>
 80138aa:	2300      	movs	r3, #0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d10b      	bne.n	80138c8 <xQueueReceive+0x94>
	__asm volatile
 80138b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138b4:	f383 8811 	msr	BASEPRI, r3
 80138b8:	f3bf 8f6f 	isb	sy
 80138bc:	f3bf 8f4f 	dsb	sy
 80138c0:	61bb      	str	r3, [r7, #24]
}
 80138c2:	bf00      	nop
 80138c4:	bf00      	nop
 80138c6:	e7fd      	b.n	80138c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80138c8:	f001 fa6e 	bl	8014da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80138cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80138d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d01f      	beq.n	8013918 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80138d8:	68b9      	ldr	r1, [r7, #8]
 80138da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138dc:	f000 f978 	bl	8013bd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80138e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e2:	1e5a      	subs	r2, r3, #1
 80138e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80138e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138ea:	691b      	ldr	r3, [r3, #16]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d00f      	beq.n	8013910 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138f2:	3310      	adds	r3, #16
 80138f4:	4618      	mov	r0, r3
 80138f6:	f000 fe51 	bl	801459c <xTaskRemoveFromEventList>
 80138fa:	4603      	mov	r3, r0
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d007      	beq.n	8013910 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013900:	4b3c      	ldr	r3, [pc, #240]	@ (80139f4 <xQueueReceive+0x1c0>)
 8013902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013906:	601a      	str	r2, [r3, #0]
 8013908:	f3bf 8f4f 	dsb	sy
 801390c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013910:	f001 fa7c 	bl	8014e0c <vPortExitCritical>
				return pdPASS;
 8013914:	2301      	movs	r3, #1
 8013916:	e069      	b.n	80139ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d103      	bne.n	8013926 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801391e:	f001 fa75 	bl	8014e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013922:	2300      	movs	r3, #0
 8013924:	e062      	b.n	80139ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013928:	2b00      	cmp	r3, #0
 801392a:	d106      	bne.n	801393a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801392c:	f107 0310 	add.w	r3, r7, #16
 8013930:	4618      	mov	r0, r3
 8013932:	f000 fe97 	bl	8014664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013936:	2301      	movs	r3, #1
 8013938:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801393a:	f001 fa67 	bl	8014e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801393e:	f000 fc3d 	bl	80141bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013942:	f001 fa31 	bl	8014da8 <vPortEnterCritical>
 8013946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013948:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801394c:	b25b      	sxtb	r3, r3
 801394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013952:	d103      	bne.n	801395c <xQueueReceive+0x128>
 8013954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013956:	2200      	movs	r2, #0
 8013958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801395e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013962:	b25b      	sxtb	r3, r3
 8013964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013968:	d103      	bne.n	8013972 <xQueueReceive+0x13e>
 801396a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801396c:	2200      	movs	r2, #0
 801396e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013972:	f001 fa4b 	bl	8014e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013976:	1d3a      	adds	r2, r7, #4
 8013978:	f107 0310 	add.w	r3, r7, #16
 801397c:	4611      	mov	r1, r2
 801397e:	4618      	mov	r0, r3
 8013980:	f000 fe86 	bl	8014690 <xTaskCheckForTimeOut>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d123      	bne.n	80139d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801398a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801398c:	f000 f998 	bl	8013cc0 <prvIsQueueEmpty>
 8013990:	4603      	mov	r3, r0
 8013992:	2b00      	cmp	r3, #0
 8013994:	d017      	beq.n	80139c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013998:	3324      	adds	r3, #36	@ 0x24
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	4611      	mov	r1, r2
 801399e:	4618      	mov	r0, r3
 80139a0:	f000 fdd6 	bl	8014550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80139a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139a6:	f000 f939 	bl	8013c1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80139aa:	f000 fc15 	bl	80141d8 <xTaskResumeAll>
 80139ae:	4603      	mov	r3, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d189      	bne.n	80138c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80139b4:	4b0f      	ldr	r3, [pc, #60]	@ (80139f4 <xQueueReceive+0x1c0>)
 80139b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80139ba:	601a      	str	r2, [r3, #0]
 80139bc:	f3bf 8f4f 	dsb	sy
 80139c0:	f3bf 8f6f 	isb	sy
 80139c4:	e780      	b.n	80138c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80139c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139c8:	f000 f928 	bl	8013c1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80139cc:	f000 fc04 	bl	80141d8 <xTaskResumeAll>
 80139d0:	e77a      	b.n	80138c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80139d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139d4:	f000 f922 	bl	8013c1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80139d8:	f000 fbfe 	bl	80141d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80139dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139de:	f000 f96f 	bl	8013cc0 <prvIsQueueEmpty>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	f43f af6f 	beq.w	80138c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80139ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	3730      	adds	r7, #48	@ 0x30
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}
 80139f4:	e000ed04 	.word	0xe000ed04

080139f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b08e      	sub	sp, #56	@ 0x38
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	60b9      	str	r1, [r7, #8]
 8013a02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d10b      	bne.n	8013a26 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8013a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a12:	f383 8811 	msr	BASEPRI, r3
 8013a16:	f3bf 8f6f 	isb	sy
 8013a1a:	f3bf 8f4f 	dsb	sy
 8013a1e:	623b      	str	r3, [r7, #32]
}
 8013a20:	bf00      	nop
 8013a22:	bf00      	nop
 8013a24:	e7fd      	b.n	8013a22 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d103      	bne.n	8013a34 <xQueueReceiveFromISR+0x3c>
 8013a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d101      	bne.n	8013a38 <xQueueReceiveFromISR+0x40>
 8013a34:	2301      	movs	r3, #1
 8013a36:	e000      	b.n	8013a3a <xQueueReceiveFromISR+0x42>
 8013a38:	2300      	movs	r3, #0
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d10b      	bne.n	8013a56 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8013a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
 8013a4e:	61fb      	str	r3, [r7, #28]
}
 8013a50:	bf00      	nop
 8013a52:	bf00      	nop
 8013a54:	e7fd      	b.n	8013a52 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a56:	f001 fa87 	bl	8014f68 <vPortValidateInterruptPriority>
	__asm volatile
 8013a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8013a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a62:	f383 8811 	msr	BASEPRI, r3
 8013a66:	f3bf 8f6f 	isb	sy
 8013a6a:	f3bf 8f4f 	dsb	sy
 8013a6e:	61ba      	str	r2, [r7, #24]
 8013a70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013a72:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d02f      	beq.n	8013ae2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013a88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a8c:	68b9      	ldr	r1, [r7, #8]
 8013a8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a90:	f000 f89e 	bl	8013bd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a96:	1e5a      	subs	r2, r3, #1
 8013a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a9a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013a9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aa4:	d112      	bne.n	8013acc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aa8:	691b      	ldr	r3, [r3, #16]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d016      	beq.n	8013adc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ab0:	3310      	adds	r3, #16
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f000 fd72 	bl	801459c <xTaskRemoveFromEventList>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d00e      	beq.n	8013adc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d00b      	beq.n	8013adc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2201      	movs	r2, #1
 8013ac8:	601a      	str	r2, [r3, #0]
 8013aca:	e007      	b.n	8013adc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013acc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	b2db      	uxtb	r3, r3
 8013ad4:	b25a      	sxtb	r2, r3
 8013ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013adc:	2301      	movs	r3, #1
 8013ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ae0:	e001      	b.n	8013ae6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ae8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	f383 8811 	msr	BASEPRI, r3
}
 8013af0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3738      	adds	r7, #56	@ 0x38
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}

08013afc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b086      	sub	sp, #24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d10d      	bne.n	8013b36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d14d      	bne.n	8013bbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	689b      	ldr	r3, [r3, #8]
 8013b26:	4618      	mov	r0, r3
 8013b28:	f000 ff1c 	bl	8014964 <xTaskPriorityDisinherit>
 8013b2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2200      	movs	r2, #0
 8013b32:	609a      	str	r2, [r3, #8]
 8013b34:	e043      	b.n	8013bbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d119      	bne.n	8013b70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	6858      	ldr	r0, [r3, #4]
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b44:	461a      	mov	r2, r3
 8013b46:	68b9      	ldr	r1, [r7, #8]
 8013b48:	f002 fba1 	bl	801628e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	685a      	ldr	r2, [r3, #4]
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b54:	441a      	add	r2, r3
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	685a      	ldr	r2, [r3, #4]
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	689b      	ldr	r3, [r3, #8]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d32b      	bcc.n	8013bbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	681a      	ldr	r2, [r3, #0]
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	605a      	str	r2, [r3, #4]
 8013b6e:	e026      	b.n	8013bbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	68d8      	ldr	r0, [r3, #12]
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b78:	461a      	mov	r2, r3
 8013b7a:	68b9      	ldr	r1, [r7, #8]
 8013b7c:	f002 fb87 	bl	801628e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	68da      	ldr	r2, [r3, #12]
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b88:	425b      	negs	r3, r3
 8013b8a:	441a      	add	r2, r3
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	68da      	ldr	r2, [r3, #12]
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	429a      	cmp	r2, r3
 8013b9a:	d207      	bcs.n	8013bac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	689a      	ldr	r2, [r3, #8]
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ba4:	425b      	negs	r3, r3
 8013ba6:	441a      	add	r2, r3
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2b02      	cmp	r3, #2
 8013bb0:	d105      	bne.n	8013bbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d002      	beq.n	8013bbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	3b01      	subs	r3, #1
 8013bbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	1c5a      	adds	r2, r3, #1
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013bc6:	697b      	ldr	r3, [r7, #20]
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3718      	adds	r7, #24
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d018      	beq.n	8013c14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	68da      	ldr	r2, [r3, #12]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bea:	441a      	add	r2, r3
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	68da      	ldr	r2, [r3, #12]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	689b      	ldr	r3, [r3, #8]
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	d303      	bcc.n	8013c04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681a      	ldr	r2, [r3, #0]
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	68d9      	ldr	r1, [r3, #12]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c0c:	461a      	mov	r2, r3
 8013c0e:	6838      	ldr	r0, [r7, #0]
 8013c10:	f002 fb3d 	bl	801628e <memcpy>
	}
}
 8013c14:	bf00      	nop
 8013c16:	3708      	adds	r7, #8
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b084      	sub	sp, #16
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013c24:	f001 f8c0 	bl	8014da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013c2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c30:	e011      	b.n	8013c56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d012      	beq.n	8013c60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	3324      	adds	r3, #36	@ 0x24
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f000 fcac 	bl	801459c <xTaskRemoveFromEventList>
 8013c44:	4603      	mov	r3, r0
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d001      	beq.n	8013c4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013c4a:	f000 fd85 	bl	8014758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013c4e:	7bfb      	ldrb	r3, [r7, #15]
 8013c50:	3b01      	subs	r3, #1
 8013c52:	b2db      	uxtb	r3, r3
 8013c54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	dce9      	bgt.n	8013c32 <prvUnlockQueue+0x16>
 8013c5e:	e000      	b.n	8013c62 <prvUnlockQueue+0x46>
					break;
 8013c60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	22ff      	movs	r2, #255	@ 0xff
 8013c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013c6a:	f001 f8cf 	bl	8014e0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013c6e:	f001 f89b 	bl	8014da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013c78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c7a:	e011      	b.n	8013ca0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	691b      	ldr	r3, [r3, #16]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d012      	beq.n	8013caa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	3310      	adds	r3, #16
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f000 fc87 	bl	801459c <xTaskRemoveFromEventList>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d001      	beq.n	8013c98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013c94:	f000 fd60 	bl	8014758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013c98:	7bbb      	ldrb	r3, [r7, #14]
 8013c9a:	3b01      	subs	r3, #1
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	dce9      	bgt.n	8013c7c <prvUnlockQueue+0x60>
 8013ca8:	e000      	b.n	8013cac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013caa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	22ff      	movs	r2, #255	@ 0xff
 8013cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013cb4:	f001 f8aa 	bl	8014e0c <vPortExitCritical>
}
 8013cb8:	bf00      	nop
 8013cba:	3710      	adds	r7, #16
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b084      	sub	sp, #16
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013cc8:	f001 f86e 	bl	8014da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d102      	bne.n	8013cda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	60fb      	str	r3, [r7, #12]
 8013cd8:	e001      	b.n	8013cde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013cda:	2300      	movs	r3, #0
 8013cdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013cde:	f001 f895 	bl	8014e0c <vPortExitCritical>

	return xReturn;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3710      	adds	r7, #16
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}

08013cec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013cf4:	f001 f858 	bl	8014da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d102      	bne.n	8013d0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013d04:	2301      	movs	r3, #1
 8013d06:	60fb      	str	r3, [r7, #12]
 8013d08:	e001      	b.n	8013d0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d0e:	f001 f87d 	bl	8014e0c <vPortExitCritical>

	return xReturn;
 8013d12:	68fb      	ldr	r3, [r7, #12]
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3710      	adds	r7, #16
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b08e      	sub	sp, #56	@ 0x38
 8013d20:	af04      	add	r7, sp, #16
 8013d22:	60f8      	str	r0, [r7, #12]
 8013d24:	60b9      	str	r1, [r7, #8]
 8013d26:	607a      	str	r2, [r7, #4]
 8013d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d10b      	bne.n	8013d48 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d34:	f383 8811 	msr	BASEPRI, r3
 8013d38:	f3bf 8f6f 	isb	sy
 8013d3c:	f3bf 8f4f 	dsb	sy
 8013d40:	623b      	str	r3, [r7, #32]
}
 8013d42:	bf00      	nop
 8013d44:	bf00      	nop
 8013d46:	e7fd      	b.n	8013d44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d10b      	bne.n	8013d66 <xTaskCreateStatic+0x4a>
	__asm volatile
 8013d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d52:	f383 8811 	msr	BASEPRI, r3
 8013d56:	f3bf 8f6f 	isb	sy
 8013d5a:	f3bf 8f4f 	dsb	sy
 8013d5e:	61fb      	str	r3, [r7, #28]
}
 8013d60:	bf00      	nop
 8013d62:	bf00      	nop
 8013d64:	e7fd      	b.n	8013d62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013d66:	23a0      	movs	r3, #160	@ 0xa0
 8013d68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	2ba0      	cmp	r3, #160	@ 0xa0
 8013d6e:	d00b      	beq.n	8013d88 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d74:	f383 8811 	msr	BASEPRI, r3
 8013d78:	f3bf 8f6f 	isb	sy
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	61bb      	str	r3, [r7, #24]
}
 8013d82:	bf00      	nop
 8013d84:	bf00      	nop
 8013d86:	e7fd      	b.n	8013d84 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013d88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d01e      	beq.n	8013dce <xTaskCreateStatic+0xb2>
 8013d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d01b      	beq.n	8013dce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013da2:	2202      	movs	r2, #2
 8013da4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013da8:	2300      	movs	r3, #0
 8013daa:	9303      	str	r3, [sp, #12]
 8013dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dae:	9302      	str	r3, [sp, #8]
 8013db0:	f107 0314 	add.w	r3, r7, #20
 8013db4:	9301      	str	r3, [sp, #4]
 8013db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013db8:	9300      	str	r3, [sp, #0]
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	68b9      	ldr	r1, [r7, #8]
 8013dc0:	68f8      	ldr	r0, [r7, #12]
 8013dc2:	f000 f851 	bl	8013e68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013dc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013dc8:	f000 f8ee 	bl	8013fa8 <prvAddNewTaskToReadyList>
 8013dcc:	e001      	b.n	8013dd2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013dd2:	697b      	ldr	r3, [r7, #20]
	}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3728      	adds	r7, #40	@ 0x28
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}

08013ddc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b08c      	sub	sp, #48	@ 0x30
 8013de0:	af04      	add	r7, sp, #16
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	603b      	str	r3, [r7, #0]
 8013de8:	4613      	mov	r3, r2
 8013dea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013dec:	88fb      	ldrh	r3, [r7, #6]
 8013dee:	009b      	lsls	r3, r3, #2
 8013df0:	4618      	mov	r0, r3
 8013df2:	f001 f8fb 	bl	8014fec <pvPortMalloc>
 8013df6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d00e      	beq.n	8013e1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013dfe:	20a0      	movs	r0, #160	@ 0xa0
 8013e00:	f001 f8f4 	bl	8014fec <pvPortMalloc>
 8013e04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013e06:	69fb      	ldr	r3, [r7, #28]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d003      	beq.n	8013e14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	697a      	ldr	r2, [r7, #20]
 8013e10:	631a      	str	r2, [r3, #48]	@ 0x30
 8013e12:	e005      	b.n	8013e20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013e14:	6978      	ldr	r0, [r7, #20]
 8013e16:	f001 f9b7 	bl	8015188 <vPortFree>
 8013e1a:	e001      	b.n	8013e20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013e20:	69fb      	ldr	r3, [r7, #28]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d017      	beq.n	8013e56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013e26:	69fb      	ldr	r3, [r7, #28]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013e2e:	88fa      	ldrh	r2, [r7, #6]
 8013e30:	2300      	movs	r3, #0
 8013e32:	9303      	str	r3, [sp, #12]
 8013e34:	69fb      	ldr	r3, [r7, #28]
 8013e36:	9302      	str	r3, [sp, #8]
 8013e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e3a:	9301      	str	r3, [sp, #4]
 8013e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e3e:	9300      	str	r3, [sp, #0]
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	68b9      	ldr	r1, [r7, #8]
 8013e44:	68f8      	ldr	r0, [r7, #12]
 8013e46:	f000 f80f 	bl	8013e68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e4a:	69f8      	ldr	r0, [r7, #28]
 8013e4c:	f000 f8ac 	bl	8013fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013e50:	2301      	movs	r3, #1
 8013e52:	61bb      	str	r3, [r7, #24]
 8013e54:	e002      	b.n	8013e5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013e56:	f04f 33ff 	mov.w	r3, #4294967295
 8013e5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013e5c:	69bb      	ldr	r3, [r7, #24]
	}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3720      	adds	r7, #32
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
	...

08013e68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b088      	sub	sp, #32
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	607a      	str	r2, [r7, #4]
 8013e74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013e7a:	6879      	ldr	r1, [r7, #4]
 8013e7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013e80:	440b      	add	r3, r1
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	4413      	add	r3, r2
 8013e86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013e88:	69bb      	ldr	r3, [r7, #24]
 8013e8a:	f023 0307 	bic.w	r3, r3, #7
 8013e8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	f003 0307 	and.w	r3, r3, #7
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d00b      	beq.n	8013eb2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8013e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e9e:	f383 8811 	msr	BASEPRI, r3
 8013ea2:	f3bf 8f6f 	isb	sy
 8013ea6:	f3bf 8f4f 	dsb	sy
 8013eaa:	617b      	str	r3, [r7, #20]
}
 8013eac:	bf00      	nop
 8013eae:	bf00      	nop
 8013eb0:	e7fd      	b.n	8013eae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d01f      	beq.n	8013ef8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013eb8:	2300      	movs	r3, #0
 8013eba:	61fb      	str	r3, [r7, #28]
 8013ebc:	e012      	b.n	8013ee4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013ebe:	68ba      	ldr	r2, [r7, #8]
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	4413      	add	r3, r2
 8013ec4:	7819      	ldrb	r1, [r3, #0]
 8013ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	4413      	add	r3, r2
 8013ecc:	3334      	adds	r3, #52	@ 0x34
 8013ece:	460a      	mov	r2, r1
 8013ed0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013ed2:	68ba      	ldr	r2, [r7, #8]
 8013ed4:	69fb      	ldr	r3, [r7, #28]
 8013ed6:	4413      	add	r3, r2
 8013ed8:	781b      	ldrb	r3, [r3, #0]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d006      	beq.n	8013eec <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	3301      	adds	r3, #1
 8013ee2:	61fb      	str	r3, [r7, #28]
 8013ee4:	69fb      	ldr	r3, [r7, #28]
 8013ee6:	2b0f      	cmp	r3, #15
 8013ee8:	d9e9      	bls.n	8013ebe <prvInitialiseNewTask+0x56>
 8013eea:	e000      	b.n	8013eee <prvInitialiseNewTask+0x86>
			{
				break;
 8013eec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013ef6:	e003      	b.n	8013f00 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013efa:	2200      	movs	r2, #0
 8013efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f02:	2b06      	cmp	r3, #6
 8013f04:	d901      	bls.n	8013f0a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013f06:	2306      	movs	r3, #6
 8013f08:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f14:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f18:	2200      	movs	r2, #0
 8013f1a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f1e:	3304      	adds	r3, #4
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7ff f910 	bl	8013146 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f28:	3318      	adds	r3, #24
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7ff f90b 	bl	8013146 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f38:	f1c3 0207 	rsb	r2, r3, #7
 8013f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f44:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f48:	2200      	movs	r2, #0
 8013f4a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f50:	2200      	movs	r2, #0
 8013f52:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f58:	334c      	adds	r3, #76	@ 0x4c
 8013f5a:	224c      	movs	r2, #76	@ 0x4c
 8013f5c:	2100      	movs	r1, #0
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f002 f8bc 	bl	80160dc <memset>
 8013f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f66:	4a0d      	ldr	r2, [pc, #52]	@ (8013f9c <prvInitialiseNewTask+0x134>)
 8013f68:	651a      	str	r2, [r3, #80]	@ 0x50
 8013f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8013fa0 <prvInitialiseNewTask+0x138>)
 8013f6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8013f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f72:	4a0c      	ldr	r2, [pc, #48]	@ (8013fa4 <prvInitialiseNewTask+0x13c>)
 8013f74:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013f76:	683a      	ldr	r2, [r7, #0]
 8013f78:	68f9      	ldr	r1, [r7, #12]
 8013f7a:	69b8      	ldr	r0, [r7, #24]
 8013f7c:	f000 fde0 	bl	8014b40 <pxPortInitialiseStack>
 8013f80:	4602      	mov	r2, r0
 8013f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d002      	beq.n	8013f92 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f92:	bf00      	nop
 8013f94:	3720      	adds	r7, #32
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	2404ff84 	.word	0x2404ff84
 8013fa0:	2404ffec 	.word	0x2404ffec
 8013fa4:	24050054 	.word	0x24050054

08013fa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013fb0:	f000 fefa 	bl	8014da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8014060 <prvAddNewTaskToReadyList+0xb8>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	3301      	adds	r3, #1
 8013fba:	4a29      	ldr	r2, [pc, #164]	@ (8014060 <prvAddNewTaskToReadyList+0xb8>)
 8013fbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013fbe:	4b29      	ldr	r3, [pc, #164]	@ (8014064 <prvAddNewTaskToReadyList+0xbc>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d109      	bne.n	8013fda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013fc6:	4a27      	ldr	r2, [pc, #156]	@ (8014064 <prvAddNewTaskToReadyList+0xbc>)
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013fcc:	4b24      	ldr	r3, [pc, #144]	@ (8014060 <prvAddNewTaskToReadyList+0xb8>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	d110      	bne.n	8013ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013fd4:	f000 fbe4 	bl	80147a0 <prvInitialiseTaskLists>
 8013fd8:	e00d      	b.n	8013ff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013fda:	4b23      	ldr	r3, [pc, #140]	@ (8014068 <prvAddNewTaskToReadyList+0xc0>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d109      	bne.n	8013ff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013fe2:	4b20      	ldr	r3, [pc, #128]	@ (8014064 <prvAddNewTaskToReadyList+0xbc>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fec:	429a      	cmp	r2, r3
 8013fee:	d802      	bhi.n	8013ff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8014064 <prvAddNewTaskToReadyList+0xbc>)
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013ff6:	4b1d      	ldr	r3, [pc, #116]	@ (801406c <prvAddNewTaskToReadyList+0xc4>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	4a1b      	ldr	r2, [pc, #108]	@ (801406c <prvAddNewTaskToReadyList+0xc4>)
 8013ffe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014004:	2201      	movs	r2, #1
 8014006:	409a      	lsls	r2, r3
 8014008:	4b19      	ldr	r3, [pc, #100]	@ (8014070 <prvAddNewTaskToReadyList+0xc8>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	4313      	orrs	r3, r2
 801400e:	4a18      	ldr	r2, [pc, #96]	@ (8014070 <prvAddNewTaskToReadyList+0xc8>)
 8014010:	6013      	str	r3, [r2, #0]
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014016:	4613      	mov	r3, r2
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	4413      	add	r3, r2
 801401c:	009b      	lsls	r3, r3, #2
 801401e:	4a15      	ldr	r2, [pc, #84]	@ (8014074 <prvAddNewTaskToReadyList+0xcc>)
 8014020:	441a      	add	r2, r3
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	3304      	adds	r3, #4
 8014026:	4619      	mov	r1, r3
 8014028:	4610      	mov	r0, r2
 801402a:	f7ff f899 	bl	8013160 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801402e:	f000 feed 	bl	8014e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014032:	4b0d      	ldr	r3, [pc, #52]	@ (8014068 <prvAddNewTaskToReadyList+0xc0>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d00e      	beq.n	8014058 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801403a:	4b0a      	ldr	r3, [pc, #40]	@ (8014064 <prvAddNewTaskToReadyList+0xbc>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014044:	429a      	cmp	r2, r3
 8014046:	d207      	bcs.n	8014058 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014048:	4b0b      	ldr	r3, [pc, #44]	@ (8014078 <prvAddNewTaskToReadyList+0xd0>)
 801404a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801404e:	601a      	str	r2, [r3, #0]
 8014050:	f3bf 8f4f 	dsb	sy
 8014054:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014058:	bf00      	nop
 801405a:	3708      	adds	r7, #8
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}
 8014060:	2404b95c 	.word	0x2404b95c
 8014064:	2404b85c 	.word	0x2404b85c
 8014068:	2404b968 	.word	0x2404b968
 801406c:	2404b978 	.word	0x2404b978
 8014070:	2404b964 	.word	0x2404b964
 8014074:	2404b860 	.word	0x2404b860
 8014078:	e000ed04 	.word	0xe000ed04

0801407c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801407c:	b580      	push	{r7, lr}
 801407e:	b084      	sub	sp, #16
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014084:	2300      	movs	r3, #0
 8014086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d018      	beq.n	80140c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801408e:	4b14      	ldr	r3, [pc, #80]	@ (80140e0 <vTaskDelay+0x64>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d00b      	beq.n	80140ae <vTaskDelay+0x32>
	__asm volatile
 8014096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801409a:	f383 8811 	msr	BASEPRI, r3
 801409e:	f3bf 8f6f 	isb	sy
 80140a2:	f3bf 8f4f 	dsb	sy
 80140a6:	60bb      	str	r3, [r7, #8]
}
 80140a8:	bf00      	nop
 80140aa:	bf00      	nop
 80140ac:	e7fd      	b.n	80140aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80140ae:	f000 f885 	bl	80141bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80140b2:	2100      	movs	r1, #0
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f000 fcdd 	bl	8014a74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80140ba:	f000 f88d 	bl	80141d8 <xTaskResumeAll>
 80140be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d107      	bne.n	80140d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80140c6:	4b07      	ldr	r3, [pc, #28]	@ (80140e4 <vTaskDelay+0x68>)
 80140c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80140cc:	601a      	str	r2, [r3, #0]
 80140ce:	f3bf 8f4f 	dsb	sy
 80140d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80140d6:	bf00      	nop
 80140d8:	3710      	adds	r7, #16
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	2404b984 	.word	0x2404b984
 80140e4:	e000ed04 	.word	0xe000ed04

080140e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b08a      	sub	sp, #40	@ 0x28
 80140ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80140ee:	2300      	movs	r3, #0
 80140f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80140f2:	2300      	movs	r3, #0
 80140f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80140f6:	463a      	mov	r2, r7
 80140f8:	1d39      	adds	r1, r7, #4
 80140fa:	f107 0308 	add.w	r3, r7, #8
 80140fe:	4618      	mov	r0, r3
 8014100:	f7ec fd24 	bl	8000b4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014104:	6839      	ldr	r1, [r7, #0]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	68ba      	ldr	r2, [r7, #8]
 801410a:	9202      	str	r2, [sp, #8]
 801410c:	9301      	str	r3, [sp, #4]
 801410e:	2300      	movs	r3, #0
 8014110:	9300      	str	r3, [sp, #0]
 8014112:	2300      	movs	r3, #0
 8014114:	460a      	mov	r2, r1
 8014116:	4921      	ldr	r1, [pc, #132]	@ (801419c <vTaskStartScheduler+0xb4>)
 8014118:	4821      	ldr	r0, [pc, #132]	@ (80141a0 <vTaskStartScheduler+0xb8>)
 801411a:	f7ff fdff 	bl	8013d1c <xTaskCreateStatic>
 801411e:	4603      	mov	r3, r0
 8014120:	4a20      	ldr	r2, [pc, #128]	@ (80141a4 <vTaskStartScheduler+0xbc>)
 8014122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014124:	4b1f      	ldr	r3, [pc, #124]	@ (80141a4 <vTaskStartScheduler+0xbc>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d002      	beq.n	8014132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801412c:	2301      	movs	r3, #1
 801412e:	617b      	str	r3, [r7, #20]
 8014130:	e001      	b.n	8014136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014132:	2300      	movs	r3, #0
 8014134:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	2b01      	cmp	r3, #1
 801413a:	d11b      	bne.n	8014174 <vTaskStartScheduler+0x8c>
	__asm volatile
 801413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014140:	f383 8811 	msr	BASEPRI, r3
 8014144:	f3bf 8f6f 	isb	sy
 8014148:	f3bf 8f4f 	dsb	sy
 801414c:	613b      	str	r3, [r7, #16]
}
 801414e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014150:	4b15      	ldr	r3, [pc, #84]	@ (80141a8 <vTaskStartScheduler+0xc0>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	334c      	adds	r3, #76	@ 0x4c
 8014156:	4a15      	ldr	r2, [pc, #84]	@ (80141ac <vTaskStartScheduler+0xc4>)
 8014158:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801415a:	4b15      	ldr	r3, [pc, #84]	@ (80141b0 <vTaskStartScheduler+0xc8>)
 801415c:	f04f 32ff 	mov.w	r2, #4294967295
 8014160:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014162:	4b14      	ldr	r3, [pc, #80]	@ (80141b4 <vTaskStartScheduler+0xcc>)
 8014164:	2201      	movs	r2, #1
 8014166:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014168:	4b13      	ldr	r3, [pc, #76]	@ (80141b8 <vTaskStartScheduler+0xd0>)
 801416a:	2200      	movs	r2, #0
 801416c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801416e:	f000 fd77 	bl	8014c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014172:	e00f      	b.n	8014194 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801417a:	d10b      	bne.n	8014194 <vTaskStartScheduler+0xac>
	__asm volatile
 801417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014180:	f383 8811 	msr	BASEPRI, r3
 8014184:	f3bf 8f6f 	isb	sy
 8014188:	f3bf 8f4f 	dsb	sy
 801418c:	60fb      	str	r3, [r7, #12]
}
 801418e:	bf00      	nop
 8014190:	bf00      	nop
 8014192:	e7fd      	b.n	8014190 <vTaskStartScheduler+0xa8>
}
 8014194:	bf00      	nop
 8014196:	3718      	adds	r7, #24
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	0801715c 	.word	0x0801715c
 80141a0:	08014771 	.word	0x08014771
 80141a4:	2404b980 	.word	0x2404b980
 80141a8:	2404b85c 	.word	0x2404b85c
 80141ac:	2400012c 	.word	0x2400012c
 80141b0:	2404b97c 	.word	0x2404b97c
 80141b4:	2404b968 	.word	0x2404b968
 80141b8:	2404b960 	.word	0x2404b960

080141bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80141bc:	b480      	push	{r7}
 80141be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80141c0:	4b04      	ldr	r3, [pc, #16]	@ (80141d4 <vTaskSuspendAll+0x18>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	3301      	adds	r3, #1
 80141c6:	4a03      	ldr	r2, [pc, #12]	@ (80141d4 <vTaskSuspendAll+0x18>)
 80141c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80141ca:	bf00      	nop
 80141cc:	46bd      	mov	sp, r7
 80141ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d2:	4770      	bx	lr
 80141d4:	2404b984 	.word	0x2404b984

080141d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80141de:	2300      	movs	r3, #0
 80141e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80141e2:	2300      	movs	r3, #0
 80141e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80141e6:	4b42      	ldr	r3, [pc, #264]	@ (80142f0 <xTaskResumeAll+0x118>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d10b      	bne.n	8014206 <xTaskResumeAll+0x2e>
	__asm volatile
 80141ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141f2:	f383 8811 	msr	BASEPRI, r3
 80141f6:	f3bf 8f6f 	isb	sy
 80141fa:	f3bf 8f4f 	dsb	sy
 80141fe:	603b      	str	r3, [r7, #0]
}
 8014200:	bf00      	nop
 8014202:	bf00      	nop
 8014204:	e7fd      	b.n	8014202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014206:	f000 fdcf 	bl	8014da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801420a:	4b39      	ldr	r3, [pc, #228]	@ (80142f0 <xTaskResumeAll+0x118>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	3b01      	subs	r3, #1
 8014210:	4a37      	ldr	r2, [pc, #220]	@ (80142f0 <xTaskResumeAll+0x118>)
 8014212:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014214:	4b36      	ldr	r3, [pc, #216]	@ (80142f0 <xTaskResumeAll+0x118>)
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d161      	bne.n	80142e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801421c:	4b35      	ldr	r3, [pc, #212]	@ (80142f4 <xTaskResumeAll+0x11c>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d05d      	beq.n	80142e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014224:	e02e      	b.n	8014284 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014226:	4b34      	ldr	r3, [pc, #208]	@ (80142f8 <xTaskResumeAll+0x120>)
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	68db      	ldr	r3, [r3, #12]
 801422c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	3318      	adds	r3, #24
 8014232:	4618      	mov	r0, r3
 8014234:	f7fe fff1 	bl	801321a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	3304      	adds	r3, #4
 801423c:	4618      	mov	r0, r3
 801423e:	f7fe ffec 	bl	801321a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014246:	2201      	movs	r2, #1
 8014248:	409a      	lsls	r2, r3
 801424a:	4b2c      	ldr	r3, [pc, #176]	@ (80142fc <xTaskResumeAll+0x124>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	4313      	orrs	r3, r2
 8014250:	4a2a      	ldr	r2, [pc, #168]	@ (80142fc <xTaskResumeAll+0x124>)
 8014252:	6013      	str	r3, [r2, #0]
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014258:	4613      	mov	r3, r2
 801425a:	009b      	lsls	r3, r3, #2
 801425c:	4413      	add	r3, r2
 801425e:	009b      	lsls	r3, r3, #2
 8014260:	4a27      	ldr	r2, [pc, #156]	@ (8014300 <xTaskResumeAll+0x128>)
 8014262:	441a      	add	r2, r3
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	3304      	adds	r3, #4
 8014268:	4619      	mov	r1, r3
 801426a:	4610      	mov	r0, r2
 801426c:	f7fe ff78 	bl	8013160 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014274:	4b23      	ldr	r3, [pc, #140]	@ (8014304 <xTaskResumeAll+0x12c>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801427a:	429a      	cmp	r2, r3
 801427c:	d302      	bcc.n	8014284 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801427e:	4b22      	ldr	r3, [pc, #136]	@ (8014308 <xTaskResumeAll+0x130>)
 8014280:	2201      	movs	r2, #1
 8014282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014284:	4b1c      	ldr	r3, [pc, #112]	@ (80142f8 <xTaskResumeAll+0x120>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d1cc      	bne.n	8014226 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d001      	beq.n	8014296 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014292:	f000 fb29 	bl	80148e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014296:	4b1d      	ldr	r3, [pc, #116]	@ (801430c <xTaskResumeAll+0x134>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d010      	beq.n	80142c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80142a2:	f000 f837 	bl	8014314 <xTaskIncrementTick>
 80142a6:	4603      	mov	r3, r0
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d002      	beq.n	80142b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80142ac:	4b16      	ldr	r3, [pc, #88]	@ (8014308 <xTaskResumeAll+0x130>)
 80142ae:	2201      	movs	r2, #1
 80142b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	3b01      	subs	r3, #1
 80142b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d1f1      	bne.n	80142a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80142be:	4b13      	ldr	r3, [pc, #76]	@ (801430c <xTaskResumeAll+0x134>)
 80142c0:	2200      	movs	r2, #0
 80142c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80142c4:	4b10      	ldr	r3, [pc, #64]	@ (8014308 <xTaskResumeAll+0x130>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d009      	beq.n	80142e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80142cc:	2301      	movs	r3, #1
 80142ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80142d0:	4b0f      	ldr	r3, [pc, #60]	@ (8014310 <xTaskResumeAll+0x138>)
 80142d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142d6:	601a      	str	r2, [r3, #0]
 80142d8:	f3bf 8f4f 	dsb	sy
 80142dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80142e0:	f000 fd94 	bl	8014e0c <vPortExitCritical>

	return xAlreadyYielded;
 80142e4:	68bb      	ldr	r3, [r7, #8]
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3710      	adds	r7, #16
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	2404b984 	.word	0x2404b984
 80142f4:	2404b95c 	.word	0x2404b95c
 80142f8:	2404b91c 	.word	0x2404b91c
 80142fc:	2404b964 	.word	0x2404b964
 8014300:	2404b860 	.word	0x2404b860
 8014304:	2404b85c 	.word	0x2404b85c
 8014308:	2404b970 	.word	0x2404b970
 801430c:	2404b96c 	.word	0x2404b96c
 8014310:	e000ed04 	.word	0xe000ed04

08014314 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b086      	sub	sp, #24
 8014318:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801431a:	2300      	movs	r3, #0
 801431c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801431e:	4b4f      	ldr	r3, [pc, #316]	@ (801445c <xTaskIncrementTick+0x148>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	f040 808f 	bne.w	8014446 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014328:	4b4d      	ldr	r3, [pc, #308]	@ (8014460 <xTaskIncrementTick+0x14c>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	3301      	adds	r3, #1
 801432e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014330:	4a4b      	ldr	r2, [pc, #300]	@ (8014460 <xTaskIncrementTick+0x14c>)
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d121      	bne.n	8014380 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801433c:	4b49      	ldr	r3, [pc, #292]	@ (8014464 <xTaskIncrementTick+0x150>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d00b      	beq.n	801435e <xTaskIncrementTick+0x4a>
	__asm volatile
 8014346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801434a:	f383 8811 	msr	BASEPRI, r3
 801434e:	f3bf 8f6f 	isb	sy
 8014352:	f3bf 8f4f 	dsb	sy
 8014356:	603b      	str	r3, [r7, #0]
}
 8014358:	bf00      	nop
 801435a:	bf00      	nop
 801435c:	e7fd      	b.n	801435a <xTaskIncrementTick+0x46>
 801435e:	4b41      	ldr	r3, [pc, #260]	@ (8014464 <xTaskIncrementTick+0x150>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	60fb      	str	r3, [r7, #12]
 8014364:	4b40      	ldr	r3, [pc, #256]	@ (8014468 <xTaskIncrementTick+0x154>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	4a3e      	ldr	r2, [pc, #248]	@ (8014464 <xTaskIncrementTick+0x150>)
 801436a:	6013      	str	r3, [r2, #0]
 801436c:	4a3e      	ldr	r2, [pc, #248]	@ (8014468 <xTaskIncrementTick+0x154>)
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	6013      	str	r3, [r2, #0]
 8014372:	4b3e      	ldr	r3, [pc, #248]	@ (801446c <xTaskIncrementTick+0x158>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	3301      	adds	r3, #1
 8014378:	4a3c      	ldr	r2, [pc, #240]	@ (801446c <xTaskIncrementTick+0x158>)
 801437a:	6013      	str	r3, [r2, #0]
 801437c:	f000 fab4 	bl	80148e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014380:	4b3b      	ldr	r3, [pc, #236]	@ (8014470 <xTaskIncrementTick+0x15c>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	693a      	ldr	r2, [r7, #16]
 8014386:	429a      	cmp	r2, r3
 8014388:	d348      	bcc.n	801441c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801438a:	4b36      	ldr	r3, [pc, #216]	@ (8014464 <xTaskIncrementTick+0x150>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d104      	bne.n	801439e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014394:	4b36      	ldr	r3, [pc, #216]	@ (8014470 <xTaskIncrementTick+0x15c>)
 8014396:	f04f 32ff 	mov.w	r2, #4294967295
 801439a:	601a      	str	r2, [r3, #0]
					break;
 801439c:	e03e      	b.n	801441c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801439e:	4b31      	ldr	r3, [pc, #196]	@ (8014464 <xTaskIncrementTick+0x150>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	68db      	ldr	r3, [r3, #12]
 80143a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	685b      	ldr	r3, [r3, #4]
 80143ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80143ae:	693a      	ldr	r2, [r7, #16]
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d203      	bcs.n	80143be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80143b6:	4a2e      	ldr	r2, [pc, #184]	@ (8014470 <xTaskIncrementTick+0x15c>)
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80143bc:	e02e      	b.n	801441c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	3304      	adds	r3, #4
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7fe ff29 	bl	801321a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d004      	beq.n	80143da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	3318      	adds	r3, #24
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7fe ff20 	bl	801321a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143de:	2201      	movs	r2, #1
 80143e0:	409a      	lsls	r2, r3
 80143e2:	4b24      	ldr	r3, [pc, #144]	@ (8014474 <xTaskIncrementTick+0x160>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	4313      	orrs	r3, r2
 80143e8:	4a22      	ldr	r2, [pc, #136]	@ (8014474 <xTaskIncrementTick+0x160>)
 80143ea:	6013      	str	r3, [r2, #0]
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143f0:	4613      	mov	r3, r2
 80143f2:	009b      	lsls	r3, r3, #2
 80143f4:	4413      	add	r3, r2
 80143f6:	009b      	lsls	r3, r3, #2
 80143f8:	4a1f      	ldr	r2, [pc, #124]	@ (8014478 <xTaskIncrementTick+0x164>)
 80143fa:	441a      	add	r2, r3
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	3304      	adds	r3, #4
 8014400:	4619      	mov	r1, r3
 8014402:	4610      	mov	r0, r2
 8014404:	f7fe feac 	bl	8013160 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801440c:	4b1b      	ldr	r3, [pc, #108]	@ (801447c <xTaskIncrementTick+0x168>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014412:	429a      	cmp	r2, r3
 8014414:	d3b9      	bcc.n	801438a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014416:	2301      	movs	r3, #1
 8014418:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801441a:	e7b6      	b.n	801438a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801441c:	4b17      	ldr	r3, [pc, #92]	@ (801447c <xTaskIncrementTick+0x168>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014422:	4915      	ldr	r1, [pc, #84]	@ (8014478 <xTaskIncrementTick+0x164>)
 8014424:	4613      	mov	r3, r2
 8014426:	009b      	lsls	r3, r3, #2
 8014428:	4413      	add	r3, r2
 801442a:	009b      	lsls	r3, r3, #2
 801442c:	440b      	add	r3, r1
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b01      	cmp	r3, #1
 8014432:	d901      	bls.n	8014438 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014434:	2301      	movs	r3, #1
 8014436:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014438:	4b11      	ldr	r3, [pc, #68]	@ (8014480 <xTaskIncrementTick+0x16c>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d007      	beq.n	8014450 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014440:	2301      	movs	r3, #1
 8014442:	617b      	str	r3, [r7, #20]
 8014444:	e004      	b.n	8014450 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014446:	4b0f      	ldr	r3, [pc, #60]	@ (8014484 <xTaskIncrementTick+0x170>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	3301      	adds	r3, #1
 801444c:	4a0d      	ldr	r2, [pc, #52]	@ (8014484 <xTaskIncrementTick+0x170>)
 801444e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014450:	697b      	ldr	r3, [r7, #20]
}
 8014452:	4618      	mov	r0, r3
 8014454:	3718      	adds	r7, #24
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}
 801445a:	bf00      	nop
 801445c:	2404b984 	.word	0x2404b984
 8014460:	2404b960 	.word	0x2404b960
 8014464:	2404b914 	.word	0x2404b914
 8014468:	2404b918 	.word	0x2404b918
 801446c:	2404b974 	.word	0x2404b974
 8014470:	2404b97c 	.word	0x2404b97c
 8014474:	2404b964 	.word	0x2404b964
 8014478:	2404b860 	.word	0x2404b860
 801447c:	2404b85c 	.word	0x2404b85c
 8014480:	2404b970 	.word	0x2404b970
 8014484:	2404b96c 	.word	0x2404b96c

08014488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014488:	b480      	push	{r7}
 801448a:	b087      	sub	sp, #28
 801448c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801448e:	4b2a      	ldr	r3, [pc, #168]	@ (8014538 <vTaskSwitchContext+0xb0>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d003      	beq.n	801449e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014496:	4b29      	ldr	r3, [pc, #164]	@ (801453c <vTaskSwitchContext+0xb4>)
 8014498:	2201      	movs	r2, #1
 801449a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801449c:	e045      	b.n	801452a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 801449e:	4b27      	ldr	r3, [pc, #156]	@ (801453c <vTaskSwitchContext+0xb4>)
 80144a0:	2200      	movs	r2, #0
 80144a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144a4:	4b26      	ldr	r3, [pc, #152]	@ (8014540 <vTaskSwitchContext+0xb8>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	fab3 f383 	clz	r3, r3
 80144b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80144b2:	7afb      	ldrb	r3, [r7, #11]
 80144b4:	f1c3 031f 	rsb	r3, r3, #31
 80144b8:	617b      	str	r3, [r7, #20]
 80144ba:	4922      	ldr	r1, [pc, #136]	@ (8014544 <vTaskSwitchContext+0xbc>)
 80144bc:	697a      	ldr	r2, [r7, #20]
 80144be:	4613      	mov	r3, r2
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	4413      	add	r3, r2
 80144c4:	009b      	lsls	r3, r3, #2
 80144c6:	440b      	add	r3, r1
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d10b      	bne.n	80144e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80144ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144d2:	f383 8811 	msr	BASEPRI, r3
 80144d6:	f3bf 8f6f 	isb	sy
 80144da:	f3bf 8f4f 	dsb	sy
 80144de:	607b      	str	r3, [r7, #4]
}
 80144e0:	bf00      	nop
 80144e2:	bf00      	nop
 80144e4:	e7fd      	b.n	80144e2 <vTaskSwitchContext+0x5a>
 80144e6:	697a      	ldr	r2, [r7, #20]
 80144e8:	4613      	mov	r3, r2
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	4413      	add	r3, r2
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	4a14      	ldr	r2, [pc, #80]	@ (8014544 <vTaskSwitchContext+0xbc>)
 80144f2:	4413      	add	r3, r2
 80144f4:	613b      	str	r3, [r7, #16]
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	685a      	ldr	r2, [r3, #4]
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	605a      	str	r2, [r3, #4]
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	685a      	ldr	r2, [r3, #4]
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	3308      	adds	r3, #8
 8014508:	429a      	cmp	r2, r3
 801450a:	d104      	bne.n	8014516 <vTaskSwitchContext+0x8e>
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	685a      	ldr	r2, [r3, #4]
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	605a      	str	r2, [r3, #4]
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	4a0a      	ldr	r2, [pc, #40]	@ (8014548 <vTaskSwitchContext+0xc0>)
 801451e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014520:	4b09      	ldr	r3, [pc, #36]	@ (8014548 <vTaskSwitchContext+0xc0>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	334c      	adds	r3, #76	@ 0x4c
 8014526:	4a09      	ldr	r2, [pc, #36]	@ (801454c <vTaskSwitchContext+0xc4>)
 8014528:	6013      	str	r3, [r2, #0]
}
 801452a:	bf00      	nop
 801452c:	371c      	adds	r7, #28
 801452e:	46bd      	mov	sp, r7
 8014530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014534:	4770      	bx	lr
 8014536:	bf00      	nop
 8014538:	2404b984 	.word	0x2404b984
 801453c:	2404b970 	.word	0x2404b970
 8014540:	2404b964 	.word	0x2404b964
 8014544:	2404b860 	.word	0x2404b860
 8014548:	2404b85c 	.word	0x2404b85c
 801454c:	2400012c 	.word	0x2400012c

08014550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b084      	sub	sp, #16
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d10b      	bne.n	8014578 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014564:	f383 8811 	msr	BASEPRI, r3
 8014568:	f3bf 8f6f 	isb	sy
 801456c:	f3bf 8f4f 	dsb	sy
 8014570:	60fb      	str	r3, [r7, #12]
}
 8014572:	bf00      	nop
 8014574:	bf00      	nop
 8014576:	e7fd      	b.n	8014574 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014578:	4b07      	ldr	r3, [pc, #28]	@ (8014598 <vTaskPlaceOnEventList+0x48>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	3318      	adds	r3, #24
 801457e:	4619      	mov	r1, r3
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f7fe fe11 	bl	80131a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014586:	2101      	movs	r1, #1
 8014588:	6838      	ldr	r0, [r7, #0]
 801458a:	f000 fa73 	bl	8014a74 <prvAddCurrentTaskToDelayedList>
}
 801458e:	bf00      	nop
 8014590:	3710      	adds	r7, #16
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	2404b85c 	.word	0x2404b85c

0801459c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b086      	sub	sp, #24
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80145ac:	693b      	ldr	r3, [r7, #16]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d10b      	bne.n	80145ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80145b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145b6:	f383 8811 	msr	BASEPRI, r3
 80145ba:	f3bf 8f6f 	isb	sy
 80145be:	f3bf 8f4f 	dsb	sy
 80145c2:	60fb      	str	r3, [r7, #12]
}
 80145c4:	bf00      	nop
 80145c6:	bf00      	nop
 80145c8:	e7fd      	b.n	80145c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	3318      	adds	r3, #24
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7fe fe23 	bl	801321a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145d4:	4b1d      	ldr	r3, [pc, #116]	@ (801464c <xTaskRemoveFromEventList+0xb0>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d11c      	bne.n	8014616 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	3304      	adds	r3, #4
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7fe fe1a 	bl	801321a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ea:	2201      	movs	r2, #1
 80145ec:	409a      	lsls	r2, r3
 80145ee:	4b18      	ldr	r3, [pc, #96]	@ (8014650 <xTaskRemoveFromEventList+0xb4>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	4313      	orrs	r3, r2
 80145f4:	4a16      	ldr	r2, [pc, #88]	@ (8014650 <xTaskRemoveFromEventList+0xb4>)
 80145f6:	6013      	str	r3, [r2, #0]
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145fc:	4613      	mov	r3, r2
 80145fe:	009b      	lsls	r3, r3, #2
 8014600:	4413      	add	r3, r2
 8014602:	009b      	lsls	r3, r3, #2
 8014604:	4a13      	ldr	r2, [pc, #76]	@ (8014654 <xTaskRemoveFromEventList+0xb8>)
 8014606:	441a      	add	r2, r3
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	3304      	adds	r3, #4
 801460c:	4619      	mov	r1, r3
 801460e:	4610      	mov	r0, r2
 8014610:	f7fe fda6 	bl	8013160 <vListInsertEnd>
 8014614:	e005      	b.n	8014622 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014616:	693b      	ldr	r3, [r7, #16]
 8014618:	3318      	adds	r3, #24
 801461a:	4619      	mov	r1, r3
 801461c:	480e      	ldr	r0, [pc, #56]	@ (8014658 <xTaskRemoveFromEventList+0xbc>)
 801461e:	f7fe fd9f 	bl	8013160 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014626:	4b0d      	ldr	r3, [pc, #52]	@ (801465c <xTaskRemoveFromEventList+0xc0>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801462c:	429a      	cmp	r2, r3
 801462e:	d905      	bls.n	801463c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014630:	2301      	movs	r3, #1
 8014632:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014634:	4b0a      	ldr	r3, [pc, #40]	@ (8014660 <xTaskRemoveFromEventList+0xc4>)
 8014636:	2201      	movs	r2, #1
 8014638:	601a      	str	r2, [r3, #0]
 801463a:	e001      	b.n	8014640 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801463c:	2300      	movs	r3, #0
 801463e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014640:	697b      	ldr	r3, [r7, #20]
}
 8014642:	4618      	mov	r0, r3
 8014644:	3718      	adds	r7, #24
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	2404b984 	.word	0x2404b984
 8014650:	2404b964 	.word	0x2404b964
 8014654:	2404b860 	.word	0x2404b860
 8014658:	2404b91c 	.word	0x2404b91c
 801465c:	2404b85c 	.word	0x2404b85c
 8014660:	2404b970 	.word	0x2404b970

08014664 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014664:	b480      	push	{r7}
 8014666:	b083      	sub	sp, #12
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801466c:	4b06      	ldr	r3, [pc, #24]	@ (8014688 <vTaskInternalSetTimeOutState+0x24>)
 801466e:	681a      	ldr	r2, [r3, #0]
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014674:	4b05      	ldr	r3, [pc, #20]	@ (801468c <vTaskInternalSetTimeOutState+0x28>)
 8014676:	681a      	ldr	r2, [r3, #0]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	605a      	str	r2, [r3, #4]
}
 801467c:	bf00      	nop
 801467e:	370c      	adds	r7, #12
 8014680:	46bd      	mov	sp, r7
 8014682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014686:	4770      	bx	lr
 8014688:	2404b974 	.word	0x2404b974
 801468c:	2404b960 	.word	0x2404b960

08014690 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b088      	sub	sp, #32
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
 8014698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d10b      	bne.n	80146b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80146a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146a4:	f383 8811 	msr	BASEPRI, r3
 80146a8:	f3bf 8f6f 	isb	sy
 80146ac:	f3bf 8f4f 	dsb	sy
 80146b0:	613b      	str	r3, [r7, #16]
}
 80146b2:	bf00      	nop
 80146b4:	bf00      	nop
 80146b6:	e7fd      	b.n	80146b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d10b      	bne.n	80146d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80146be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146c2:	f383 8811 	msr	BASEPRI, r3
 80146c6:	f3bf 8f6f 	isb	sy
 80146ca:	f3bf 8f4f 	dsb	sy
 80146ce:	60fb      	str	r3, [r7, #12]
}
 80146d0:	bf00      	nop
 80146d2:	bf00      	nop
 80146d4:	e7fd      	b.n	80146d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80146d6:	f000 fb67 	bl	8014da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80146da:	4b1d      	ldr	r3, [pc, #116]	@ (8014750 <xTaskCheckForTimeOut+0xc0>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	69ba      	ldr	r2, [r7, #24]
 80146e6:	1ad3      	subs	r3, r2, r3
 80146e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146f2:	d102      	bne.n	80146fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80146f4:	2300      	movs	r3, #0
 80146f6:	61fb      	str	r3, [r7, #28]
 80146f8:	e023      	b.n	8014742 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	4b15      	ldr	r3, [pc, #84]	@ (8014754 <xTaskCheckForTimeOut+0xc4>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	429a      	cmp	r2, r3
 8014704:	d007      	beq.n	8014716 <xTaskCheckForTimeOut+0x86>
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	69ba      	ldr	r2, [r7, #24]
 801470c:	429a      	cmp	r2, r3
 801470e:	d302      	bcc.n	8014716 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014710:	2301      	movs	r3, #1
 8014712:	61fb      	str	r3, [r7, #28]
 8014714:	e015      	b.n	8014742 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	697a      	ldr	r2, [r7, #20]
 801471c:	429a      	cmp	r2, r3
 801471e:	d20b      	bcs.n	8014738 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	681a      	ldr	r2, [r3, #0]
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	1ad2      	subs	r2, r2, r3
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f7ff ff99 	bl	8014664 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014732:	2300      	movs	r3, #0
 8014734:	61fb      	str	r3, [r7, #28]
 8014736:	e004      	b.n	8014742 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	2200      	movs	r2, #0
 801473c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801473e:	2301      	movs	r3, #1
 8014740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014742:	f000 fb63 	bl	8014e0c <vPortExitCritical>

	return xReturn;
 8014746:	69fb      	ldr	r3, [r7, #28]
}
 8014748:	4618      	mov	r0, r3
 801474a:	3720      	adds	r7, #32
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}
 8014750:	2404b960 	.word	0x2404b960
 8014754:	2404b974 	.word	0x2404b974

08014758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014758:	b480      	push	{r7}
 801475a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801475c:	4b03      	ldr	r3, [pc, #12]	@ (801476c <vTaskMissedYield+0x14>)
 801475e:	2201      	movs	r2, #1
 8014760:	601a      	str	r2, [r3, #0]
}
 8014762:	bf00      	nop
 8014764:	46bd      	mov	sp, r7
 8014766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476a:	4770      	bx	lr
 801476c:	2404b970 	.word	0x2404b970

08014770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014778:	f000 f852 	bl	8014820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801477c:	4b06      	ldr	r3, [pc, #24]	@ (8014798 <prvIdleTask+0x28>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	2b01      	cmp	r3, #1
 8014782:	d9f9      	bls.n	8014778 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014784:	4b05      	ldr	r3, [pc, #20]	@ (801479c <prvIdleTask+0x2c>)
 8014786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801478a:	601a      	str	r2, [r3, #0]
 801478c:	f3bf 8f4f 	dsb	sy
 8014790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014794:	e7f0      	b.n	8014778 <prvIdleTask+0x8>
 8014796:	bf00      	nop
 8014798:	2404b860 	.word	0x2404b860
 801479c:	e000ed04 	.word	0xe000ed04

080147a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b082      	sub	sp, #8
 80147a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80147a6:	2300      	movs	r3, #0
 80147a8:	607b      	str	r3, [r7, #4]
 80147aa:	e00c      	b.n	80147c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	4613      	mov	r3, r2
 80147b0:	009b      	lsls	r3, r3, #2
 80147b2:	4413      	add	r3, r2
 80147b4:	009b      	lsls	r3, r3, #2
 80147b6:	4a12      	ldr	r2, [pc, #72]	@ (8014800 <prvInitialiseTaskLists+0x60>)
 80147b8:	4413      	add	r3, r2
 80147ba:	4618      	mov	r0, r3
 80147bc:	f7fe fca3 	bl	8013106 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	3301      	adds	r3, #1
 80147c4:	607b      	str	r3, [r7, #4]
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2b06      	cmp	r3, #6
 80147ca:	d9ef      	bls.n	80147ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80147cc:	480d      	ldr	r0, [pc, #52]	@ (8014804 <prvInitialiseTaskLists+0x64>)
 80147ce:	f7fe fc9a 	bl	8013106 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80147d2:	480d      	ldr	r0, [pc, #52]	@ (8014808 <prvInitialiseTaskLists+0x68>)
 80147d4:	f7fe fc97 	bl	8013106 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80147d8:	480c      	ldr	r0, [pc, #48]	@ (801480c <prvInitialiseTaskLists+0x6c>)
 80147da:	f7fe fc94 	bl	8013106 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80147de:	480c      	ldr	r0, [pc, #48]	@ (8014810 <prvInitialiseTaskLists+0x70>)
 80147e0:	f7fe fc91 	bl	8013106 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80147e4:	480b      	ldr	r0, [pc, #44]	@ (8014814 <prvInitialiseTaskLists+0x74>)
 80147e6:	f7fe fc8e 	bl	8013106 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80147ea:	4b0b      	ldr	r3, [pc, #44]	@ (8014818 <prvInitialiseTaskLists+0x78>)
 80147ec:	4a05      	ldr	r2, [pc, #20]	@ (8014804 <prvInitialiseTaskLists+0x64>)
 80147ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80147f0:	4b0a      	ldr	r3, [pc, #40]	@ (801481c <prvInitialiseTaskLists+0x7c>)
 80147f2:	4a05      	ldr	r2, [pc, #20]	@ (8014808 <prvInitialiseTaskLists+0x68>)
 80147f4:	601a      	str	r2, [r3, #0]
}
 80147f6:	bf00      	nop
 80147f8:	3708      	adds	r7, #8
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	2404b860 	.word	0x2404b860
 8014804:	2404b8ec 	.word	0x2404b8ec
 8014808:	2404b900 	.word	0x2404b900
 801480c:	2404b91c 	.word	0x2404b91c
 8014810:	2404b930 	.word	0x2404b930
 8014814:	2404b948 	.word	0x2404b948
 8014818:	2404b914 	.word	0x2404b914
 801481c:	2404b918 	.word	0x2404b918

08014820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014826:	e019      	b.n	801485c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014828:	f000 fabe 	bl	8014da8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801482c:	4b10      	ldr	r3, [pc, #64]	@ (8014870 <prvCheckTasksWaitingTermination+0x50>)
 801482e:	68db      	ldr	r3, [r3, #12]
 8014830:	68db      	ldr	r3, [r3, #12]
 8014832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	3304      	adds	r3, #4
 8014838:	4618      	mov	r0, r3
 801483a:	f7fe fcee 	bl	801321a <uxListRemove>
				--uxCurrentNumberOfTasks;
 801483e:	4b0d      	ldr	r3, [pc, #52]	@ (8014874 <prvCheckTasksWaitingTermination+0x54>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	3b01      	subs	r3, #1
 8014844:	4a0b      	ldr	r2, [pc, #44]	@ (8014874 <prvCheckTasksWaitingTermination+0x54>)
 8014846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014848:	4b0b      	ldr	r3, [pc, #44]	@ (8014878 <prvCheckTasksWaitingTermination+0x58>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	3b01      	subs	r3, #1
 801484e:	4a0a      	ldr	r2, [pc, #40]	@ (8014878 <prvCheckTasksWaitingTermination+0x58>)
 8014850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014852:	f000 fadb 	bl	8014e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f000 f810 	bl	801487c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801485c:	4b06      	ldr	r3, [pc, #24]	@ (8014878 <prvCheckTasksWaitingTermination+0x58>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d1e1      	bne.n	8014828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014864:	bf00      	nop
 8014866:	bf00      	nop
 8014868:	3708      	adds	r7, #8
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	2404b930 	.word	0x2404b930
 8014874:	2404b95c 	.word	0x2404b95c
 8014878:	2404b944 	.word	0x2404b944

0801487c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	334c      	adds	r3, #76	@ 0x4c
 8014888:	4618      	mov	r0, r3
 801488a:	f001 fc3f 	bl	801610c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8014894:	2b00      	cmp	r3, #0
 8014896:	d108      	bne.n	80148aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801489c:	4618      	mov	r0, r3
 801489e:	f000 fc73 	bl	8015188 <vPortFree>
				vPortFree( pxTCB );
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f000 fc70 	bl	8015188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80148a8:	e019      	b.n	80148de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80148b0:	2b01      	cmp	r3, #1
 80148b2:	d103      	bne.n	80148bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f000 fc67 	bl	8015188 <vPortFree>
	}
 80148ba:	e010      	b.n	80148de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80148c2:	2b02      	cmp	r3, #2
 80148c4:	d00b      	beq.n	80148de <prvDeleteTCB+0x62>
	__asm volatile
 80148c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148ca:	f383 8811 	msr	BASEPRI, r3
 80148ce:	f3bf 8f6f 	isb	sy
 80148d2:	f3bf 8f4f 	dsb	sy
 80148d6:	60fb      	str	r3, [r7, #12]
}
 80148d8:	bf00      	nop
 80148da:	bf00      	nop
 80148dc:	e7fd      	b.n	80148da <prvDeleteTCB+0x5e>
	}
 80148de:	bf00      	nop
 80148e0:	3710      	adds	r7, #16
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}
	...

080148e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80148e8:	b480      	push	{r7}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80148ee:	4b0c      	ldr	r3, [pc, #48]	@ (8014920 <prvResetNextTaskUnblockTime+0x38>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d104      	bne.n	8014902 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80148f8:	4b0a      	ldr	r3, [pc, #40]	@ (8014924 <prvResetNextTaskUnblockTime+0x3c>)
 80148fa:	f04f 32ff 	mov.w	r2, #4294967295
 80148fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014900:	e008      	b.n	8014914 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014902:	4b07      	ldr	r3, [pc, #28]	@ (8014920 <prvResetNextTaskUnblockTime+0x38>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	68db      	ldr	r3, [r3, #12]
 8014908:	68db      	ldr	r3, [r3, #12]
 801490a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	4a04      	ldr	r2, [pc, #16]	@ (8014924 <prvResetNextTaskUnblockTime+0x3c>)
 8014912:	6013      	str	r3, [r2, #0]
}
 8014914:	bf00      	nop
 8014916:	370c      	adds	r7, #12
 8014918:	46bd      	mov	sp, r7
 801491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491e:	4770      	bx	lr
 8014920:	2404b914 	.word	0x2404b914
 8014924:	2404b97c 	.word	0x2404b97c

08014928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014928:	b480      	push	{r7}
 801492a:	b083      	sub	sp, #12
 801492c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801492e:	4b0b      	ldr	r3, [pc, #44]	@ (801495c <xTaskGetSchedulerState+0x34>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d102      	bne.n	801493c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014936:	2301      	movs	r3, #1
 8014938:	607b      	str	r3, [r7, #4]
 801493a:	e008      	b.n	801494e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801493c:	4b08      	ldr	r3, [pc, #32]	@ (8014960 <xTaskGetSchedulerState+0x38>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d102      	bne.n	801494a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014944:	2302      	movs	r3, #2
 8014946:	607b      	str	r3, [r7, #4]
 8014948:	e001      	b.n	801494e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801494a:	2300      	movs	r3, #0
 801494c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801494e:	687b      	ldr	r3, [r7, #4]
	}
 8014950:	4618      	mov	r0, r3
 8014952:	370c      	adds	r7, #12
 8014954:	46bd      	mov	sp, r7
 8014956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495a:	4770      	bx	lr
 801495c:	2404b968 	.word	0x2404b968
 8014960:	2404b984 	.word	0x2404b984

08014964 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014964:	b580      	push	{r7, lr}
 8014966:	b086      	sub	sp, #24
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014970:	2300      	movs	r3, #0
 8014972:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d070      	beq.n	8014a5c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801497a:	4b3b      	ldr	r3, [pc, #236]	@ (8014a68 <xTaskPriorityDisinherit+0x104>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	693a      	ldr	r2, [r7, #16]
 8014980:	429a      	cmp	r2, r3
 8014982:	d00b      	beq.n	801499c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014988:	f383 8811 	msr	BASEPRI, r3
 801498c:	f3bf 8f6f 	isb	sy
 8014990:	f3bf 8f4f 	dsb	sy
 8014994:	60fb      	str	r3, [r7, #12]
}
 8014996:	bf00      	nop
 8014998:	bf00      	nop
 801499a:	e7fd      	b.n	8014998 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d10b      	bne.n	80149bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80149a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149a8:	f383 8811 	msr	BASEPRI, r3
 80149ac:	f3bf 8f6f 	isb	sy
 80149b0:	f3bf 8f4f 	dsb	sy
 80149b4:	60bb      	str	r3, [r7, #8]
}
 80149b6:	bf00      	nop
 80149b8:	bf00      	nop
 80149ba:	e7fd      	b.n	80149b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80149c0:	1e5a      	subs	r2, r3, #1
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d044      	beq.n	8014a5c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d140      	bne.n	8014a5c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149da:	693b      	ldr	r3, [r7, #16]
 80149dc:	3304      	adds	r3, #4
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fe fc1b 	bl	801321a <uxListRemove>
 80149e4:	4603      	mov	r3, r0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d115      	bne.n	8014a16 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149ee:	491f      	ldr	r1, [pc, #124]	@ (8014a6c <xTaskPriorityDisinherit+0x108>)
 80149f0:	4613      	mov	r3, r2
 80149f2:	009b      	lsls	r3, r3, #2
 80149f4:	4413      	add	r3, r2
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	440b      	add	r3, r1
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d10a      	bne.n	8014a16 <xTaskPriorityDisinherit+0xb2>
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a04:	2201      	movs	r2, #1
 8014a06:	fa02 f303 	lsl.w	r3, r2, r3
 8014a0a:	43da      	mvns	r2, r3
 8014a0c:	4b18      	ldr	r3, [pc, #96]	@ (8014a70 <xTaskPriorityDisinherit+0x10c>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	4013      	ands	r3, r2
 8014a12:	4a17      	ldr	r2, [pc, #92]	@ (8014a70 <xTaskPriorityDisinherit+0x10c>)
 8014a14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a22:	f1c3 0207 	rsb	r2, r3, #7
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a2e:	2201      	movs	r2, #1
 8014a30:	409a      	lsls	r2, r3
 8014a32:	4b0f      	ldr	r3, [pc, #60]	@ (8014a70 <xTaskPriorityDisinherit+0x10c>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	4313      	orrs	r3, r2
 8014a38:	4a0d      	ldr	r2, [pc, #52]	@ (8014a70 <xTaskPriorityDisinherit+0x10c>)
 8014a3a:	6013      	str	r3, [r2, #0]
 8014a3c:	693b      	ldr	r3, [r7, #16]
 8014a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a40:	4613      	mov	r3, r2
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	4413      	add	r3, r2
 8014a46:	009b      	lsls	r3, r3, #2
 8014a48:	4a08      	ldr	r2, [pc, #32]	@ (8014a6c <xTaskPriorityDisinherit+0x108>)
 8014a4a:	441a      	add	r2, r3
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	3304      	adds	r3, #4
 8014a50:	4619      	mov	r1, r3
 8014a52:	4610      	mov	r0, r2
 8014a54:	f7fe fb84 	bl	8013160 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014a58:	2301      	movs	r3, #1
 8014a5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014a5c:	697b      	ldr	r3, [r7, #20]
	}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3718      	adds	r7, #24
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	2404b85c 	.word	0x2404b85c
 8014a6c:	2404b860 	.word	0x2404b860
 8014a70:	2404b964 	.word	0x2404b964

08014a74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b084      	sub	sp, #16
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014a7e:	4b29      	ldr	r3, [pc, #164]	@ (8014b24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a84:	4b28      	ldr	r3, [pc, #160]	@ (8014b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	3304      	adds	r3, #4
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7fe fbc5 	bl	801321a <uxListRemove>
 8014a90:	4603      	mov	r3, r0
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d10b      	bne.n	8014aae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014a96:	4b24      	ldr	r3, [pc, #144]	@ (8014b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8014aa2:	43da      	mvns	r2, r3
 8014aa4:	4b21      	ldr	r3, [pc, #132]	@ (8014b2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	4013      	ands	r3, r2
 8014aaa:	4a20      	ldr	r2, [pc, #128]	@ (8014b2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8014aac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ab4:	d10a      	bne.n	8014acc <prvAddCurrentTaskToDelayedList+0x58>
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d007      	beq.n	8014acc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014abc:	4b1a      	ldr	r3, [pc, #104]	@ (8014b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	3304      	adds	r3, #4
 8014ac2:	4619      	mov	r1, r3
 8014ac4:	481a      	ldr	r0, [pc, #104]	@ (8014b30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014ac6:	f7fe fb4b 	bl	8013160 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014aca:	e026      	b.n	8014b1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014acc:	68fa      	ldr	r2, [r7, #12]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	4413      	add	r3, r2
 8014ad2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014ad4:	4b14      	ldr	r3, [pc, #80]	@ (8014b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	68ba      	ldr	r2, [r7, #8]
 8014ada:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014adc:	68ba      	ldr	r2, [r7, #8]
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d209      	bcs.n	8014af8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ae4:	4b13      	ldr	r3, [pc, #76]	@ (8014b34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014ae6:	681a      	ldr	r2, [r3, #0]
 8014ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8014b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	3304      	adds	r3, #4
 8014aee:	4619      	mov	r1, r3
 8014af0:	4610      	mov	r0, r2
 8014af2:	f7fe fb59 	bl	80131a8 <vListInsert>
}
 8014af6:	e010      	b.n	8014b1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014af8:	4b0f      	ldr	r3, [pc, #60]	@ (8014b38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	4b0a      	ldr	r3, [pc, #40]	@ (8014b28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	3304      	adds	r3, #4
 8014b02:	4619      	mov	r1, r3
 8014b04:	4610      	mov	r0, r2
 8014b06:	f7fe fb4f 	bl	80131a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8014b3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	68ba      	ldr	r2, [r7, #8]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d202      	bcs.n	8014b1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014b14:	4a09      	ldr	r2, [pc, #36]	@ (8014b3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	6013      	str	r3, [r2, #0]
}
 8014b1a:	bf00      	nop
 8014b1c:	3710      	adds	r7, #16
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	2404b960 	.word	0x2404b960
 8014b28:	2404b85c 	.word	0x2404b85c
 8014b2c:	2404b964 	.word	0x2404b964
 8014b30:	2404b948 	.word	0x2404b948
 8014b34:	2404b918 	.word	0x2404b918
 8014b38:	2404b914 	.word	0x2404b914
 8014b3c:	2404b97c 	.word	0x2404b97c

08014b40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014b40:	b480      	push	{r7}
 8014b42:	b085      	sub	sp, #20
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	3b04      	subs	r3, #4
 8014b50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	3b04      	subs	r3, #4
 8014b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	f023 0201 	bic.w	r2, r3, #1
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	3b04      	subs	r3, #4
 8014b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b70:	4a0c      	ldr	r2, [pc, #48]	@ (8014ba4 <pxPortInitialiseStack+0x64>)
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	3b14      	subs	r3, #20
 8014b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014b7c:	687a      	ldr	r2, [r7, #4]
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	3b04      	subs	r3, #4
 8014b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	f06f 0202 	mvn.w	r2, #2
 8014b8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	3b20      	subs	r3, #32
 8014b94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b96:	68fb      	ldr	r3, [r7, #12]
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3714      	adds	r7, #20
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba2:	4770      	bx	lr
 8014ba4:	08014ba9 	.word	0x08014ba9

08014ba8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014ba8:	b480      	push	{r7}
 8014baa:	b085      	sub	sp, #20
 8014bac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014bb2:	4b13      	ldr	r3, [pc, #76]	@ (8014c00 <prvTaskExitError+0x58>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bba:	d00b      	beq.n	8014bd4 <prvTaskExitError+0x2c>
	__asm volatile
 8014bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bc0:	f383 8811 	msr	BASEPRI, r3
 8014bc4:	f3bf 8f6f 	isb	sy
 8014bc8:	f3bf 8f4f 	dsb	sy
 8014bcc:	60fb      	str	r3, [r7, #12]
}
 8014bce:	bf00      	nop
 8014bd0:	bf00      	nop
 8014bd2:	e7fd      	b.n	8014bd0 <prvTaskExitError+0x28>
	__asm volatile
 8014bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bd8:	f383 8811 	msr	BASEPRI, r3
 8014bdc:	f3bf 8f6f 	isb	sy
 8014be0:	f3bf 8f4f 	dsb	sy
 8014be4:	60bb      	str	r3, [r7, #8]
}
 8014be6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014be8:	bf00      	nop
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d0fc      	beq.n	8014bea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014bf0:	bf00      	nop
 8014bf2:	bf00      	nop
 8014bf4:	3714      	adds	r7, #20
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfc:	4770      	bx	lr
 8014bfe:	bf00      	nop
 8014c00:	240000c8 	.word	0x240000c8
	...

08014c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014c10:	4b07      	ldr	r3, [pc, #28]	@ (8014c30 <pxCurrentTCBConst2>)
 8014c12:	6819      	ldr	r1, [r3, #0]
 8014c14:	6808      	ldr	r0, [r1, #0]
 8014c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1a:	f380 8809 	msr	PSP, r0
 8014c1e:	f3bf 8f6f 	isb	sy
 8014c22:	f04f 0000 	mov.w	r0, #0
 8014c26:	f380 8811 	msr	BASEPRI, r0
 8014c2a:	4770      	bx	lr
 8014c2c:	f3af 8000 	nop.w

08014c30 <pxCurrentTCBConst2>:
 8014c30:	2404b85c 	.word	0x2404b85c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014c34:	bf00      	nop
 8014c36:	bf00      	nop

08014c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014c38:	4808      	ldr	r0, [pc, #32]	@ (8014c5c <prvPortStartFirstTask+0x24>)
 8014c3a:	6800      	ldr	r0, [r0, #0]
 8014c3c:	6800      	ldr	r0, [r0, #0]
 8014c3e:	f380 8808 	msr	MSP, r0
 8014c42:	f04f 0000 	mov.w	r0, #0
 8014c46:	f380 8814 	msr	CONTROL, r0
 8014c4a:	b662      	cpsie	i
 8014c4c:	b661      	cpsie	f
 8014c4e:	f3bf 8f4f 	dsb	sy
 8014c52:	f3bf 8f6f 	isb	sy
 8014c56:	df00      	svc	0
 8014c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014c5a:	bf00      	nop
 8014c5c:	e000ed08 	.word	0xe000ed08

08014c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b086      	sub	sp, #24
 8014c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014c66:	4b47      	ldr	r3, [pc, #284]	@ (8014d84 <xPortStartScheduler+0x124>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	4a47      	ldr	r2, [pc, #284]	@ (8014d88 <xPortStartScheduler+0x128>)
 8014c6c:	4293      	cmp	r3, r2
 8014c6e:	d10b      	bne.n	8014c88 <xPortStartScheduler+0x28>
	__asm volatile
 8014c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c74:	f383 8811 	msr	BASEPRI, r3
 8014c78:	f3bf 8f6f 	isb	sy
 8014c7c:	f3bf 8f4f 	dsb	sy
 8014c80:	60fb      	str	r3, [r7, #12]
}
 8014c82:	bf00      	nop
 8014c84:	bf00      	nop
 8014c86:	e7fd      	b.n	8014c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014c88:	4b3e      	ldr	r3, [pc, #248]	@ (8014d84 <xPortStartScheduler+0x124>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8014d8c <xPortStartScheduler+0x12c>)
 8014c8e:	4293      	cmp	r3, r2
 8014c90:	d10b      	bne.n	8014caa <xPortStartScheduler+0x4a>
	__asm volatile
 8014c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c96:	f383 8811 	msr	BASEPRI, r3
 8014c9a:	f3bf 8f6f 	isb	sy
 8014c9e:	f3bf 8f4f 	dsb	sy
 8014ca2:	613b      	str	r3, [r7, #16]
}
 8014ca4:	bf00      	nop
 8014ca6:	bf00      	nop
 8014ca8:	e7fd      	b.n	8014ca6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014caa:	4b39      	ldr	r3, [pc, #228]	@ (8014d90 <xPortStartScheduler+0x130>)
 8014cac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	b2db      	uxtb	r3, r3
 8014cb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	22ff      	movs	r2, #255	@ 0xff
 8014cba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	781b      	ldrb	r3, [r3, #0]
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014cc4:	78fb      	ldrb	r3, [r7, #3]
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014ccc:	b2da      	uxtb	r2, r3
 8014cce:	4b31      	ldr	r3, [pc, #196]	@ (8014d94 <xPortStartScheduler+0x134>)
 8014cd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014cd2:	4b31      	ldr	r3, [pc, #196]	@ (8014d98 <xPortStartScheduler+0x138>)
 8014cd4:	2207      	movs	r2, #7
 8014cd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cd8:	e009      	b.n	8014cee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8014cda:	4b2f      	ldr	r3, [pc, #188]	@ (8014d98 <xPortStartScheduler+0x138>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	3b01      	subs	r3, #1
 8014ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8014d98 <xPortStartScheduler+0x138>)
 8014ce2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014ce4:	78fb      	ldrb	r3, [r7, #3]
 8014ce6:	b2db      	uxtb	r3, r3
 8014ce8:	005b      	lsls	r3, r3, #1
 8014cea:	b2db      	uxtb	r3, r3
 8014cec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cee:	78fb      	ldrb	r3, [r7, #3]
 8014cf0:	b2db      	uxtb	r3, r3
 8014cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014cf6:	2b80      	cmp	r3, #128	@ 0x80
 8014cf8:	d0ef      	beq.n	8014cda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014cfa:	4b27      	ldr	r3, [pc, #156]	@ (8014d98 <xPortStartScheduler+0x138>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	f1c3 0307 	rsb	r3, r3, #7
 8014d02:	2b04      	cmp	r3, #4
 8014d04:	d00b      	beq.n	8014d1e <xPortStartScheduler+0xbe>
	__asm volatile
 8014d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d0a:	f383 8811 	msr	BASEPRI, r3
 8014d0e:	f3bf 8f6f 	isb	sy
 8014d12:	f3bf 8f4f 	dsb	sy
 8014d16:	60bb      	str	r3, [r7, #8]
}
 8014d18:	bf00      	nop
 8014d1a:	bf00      	nop
 8014d1c:	e7fd      	b.n	8014d1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8014d98 <xPortStartScheduler+0x138>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	021b      	lsls	r3, r3, #8
 8014d24:	4a1c      	ldr	r2, [pc, #112]	@ (8014d98 <xPortStartScheduler+0x138>)
 8014d26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014d28:	4b1b      	ldr	r3, [pc, #108]	@ (8014d98 <xPortStartScheduler+0x138>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014d30:	4a19      	ldr	r2, [pc, #100]	@ (8014d98 <xPortStartScheduler+0x138>)
 8014d32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	b2da      	uxtb	r2, r3
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014d3c:	4b17      	ldr	r3, [pc, #92]	@ (8014d9c <xPortStartScheduler+0x13c>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	4a16      	ldr	r2, [pc, #88]	@ (8014d9c <xPortStartScheduler+0x13c>)
 8014d42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014d46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014d48:	4b14      	ldr	r3, [pc, #80]	@ (8014d9c <xPortStartScheduler+0x13c>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	4a13      	ldr	r2, [pc, #76]	@ (8014d9c <xPortStartScheduler+0x13c>)
 8014d4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014d52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014d54:	f000 f8da 	bl	8014f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014d58:	4b11      	ldr	r3, [pc, #68]	@ (8014da0 <xPortStartScheduler+0x140>)
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014d5e:	f000 f8f9 	bl	8014f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014d62:	4b10      	ldr	r3, [pc, #64]	@ (8014da4 <xPortStartScheduler+0x144>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	4a0f      	ldr	r2, [pc, #60]	@ (8014da4 <xPortStartScheduler+0x144>)
 8014d68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014d6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014d6e:	f7ff ff63 	bl	8014c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014d72:	f7ff fb89 	bl	8014488 <vTaskSwitchContext>
	prvTaskExitError();
 8014d76:	f7ff ff17 	bl	8014ba8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014d7a:	2300      	movs	r3, #0
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3718      	adds	r7, #24
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	e000ed00 	.word	0xe000ed00
 8014d88:	410fc271 	.word	0x410fc271
 8014d8c:	410fc270 	.word	0x410fc270
 8014d90:	e000e400 	.word	0xe000e400
 8014d94:	2404b988 	.word	0x2404b988
 8014d98:	2404b98c 	.word	0x2404b98c
 8014d9c:	e000ed20 	.word	0xe000ed20
 8014da0:	240000c8 	.word	0x240000c8
 8014da4:	e000ef34 	.word	0xe000ef34

08014da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014da8:	b480      	push	{r7}
 8014daa:	b083      	sub	sp, #12
 8014dac:	af00      	add	r7, sp, #0
	__asm volatile
 8014dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014db2:	f383 8811 	msr	BASEPRI, r3
 8014db6:	f3bf 8f6f 	isb	sy
 8014dba:	f3bf 8f4f 	dsb	sy
 8014dbe:	607b      	str	r3, [r7, #4]
}
 8014dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014dc2:	4b10      	ldr	r3, [pc, #64]	@ (8014e04 <vPortEnterCritical+0x5c>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	3301      	adds	r3, #1
 8014dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8014e04 <vPortEnterCritical+0x5c>)
 8014dca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8014e04 <vPortEnterCritical+0x5c>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b01      	cmp	r3, #1
 8014dd2:	d110      	bne.n	8014df6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8014e08 <vPortEnterCritical+0x60>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00b      	beq.n	8014df6 <vPortEnterCritical+0x4e>
	__asm volatile
 8014dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014de2:	f383 8811 	msr	BASEPRI, r3
 8014de6:	f3bf 8f6f 	isb	sy
 8014dea:	f3bf 8f4f 	dsb	sy
 8014dee:	603b      	str	r3, [r7, #0]
}
 8014df0:	bf00      	nop
 8014df2:	bf00      	nop
 8014df4:	e7fd      	b.n	8014df2 <vPortEnterCritical+0x4a>
	}
}
 8014df6:	bf00      	nop
 8014df8:	370c      	adds	r7, #12
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop
 8014e04:	240000c8 	.word	0x240000c8
 8014e08:	e000ed04 	.word	0xe000ed04

08014e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014e0c:	b480      	push	{r7}
 8014e0e:	b083      	sub	sp, #12
 8014e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014e12:	4b12      	ldr	r3, [pc, #72]	@ (8014e5c <vPortExitCritical+0x50>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d10b      	bne.n	8014e32 <vPortExitCritical+0x26>
	__asm volatile
 8014e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e1e:	f383 8811 	msr	BASEPRI, r3
 8014e22:	f3bf 8f6f 	isb	sy
 8014e26:	f3bf 8f4f 	dsb	sy
 8014e2a:	607b      	str	r3, [r7, #4]
}
 8014e2c:	bf00      	nop
 8014e2e:	bf00      	nop
 8014e30:	e7fd      	b.n	8014e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014e32:	4b0a      	ldr	r3, [pc, #40]	@ (8014e5c <vPortExitCritical+0x50>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	3b01      	subs	r3, #1
 8014e38:	4a08      	ldr	r2, [pc, #32]	@ (8014e5c <vPortExitCritical+0x50>)
 8014e3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014e3c:	4b07      	ldr	r3, [pc, #28]	@ (8014e5c <vPortExitCritical+0x50>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d105      	bne.n	8014e50 <vPortExitCritical+0x44>
 8014e44:	2300      	movs	r3, #0
 8014e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	f383 8811 	msr	BASEPRI, r3
}
 8014e4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014e50:	bf00      	nop
 8014e52:	370c      	adds	r7, #12
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr
 8014e5c:	240000c8 	.word	0x240000c8

08014e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014e60:	f3ef 8009 	mrs	r0, PSP
 8014e64:	f3bf 8f6f 	isb	sy
 8014e68:	4b15      	ldr	r3, [pc, #84]	@ (8014ec0 <pxCurrentTCBConst>)
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	f01e 0f10 	tst.w	lr, #16
 8014e70:	bf08      	it	eq
 8014e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e7a:	6010      	str	r0, [r2, #0]
 8014e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014e80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014e84:	f380 8811 	msr	BASEPRI, r0
 8014e88:	f3bf 8f4f 	dsb	sy
 8014e8c:	f3bf 8f6f 	isb	sy
 8014e90:	f7ff fafa 	bl	8014488 <vTaskSwitchContext>
 8014e94:	f04f 0000 	mov.w	r0, #0
 8014e98:	f380 8811 	msr	BASEPRI, r0
 8014e9c:	bc09      	pop	{r0, r3}
 8014e9e:	6819      	ldr	r1, [r3, #0]
 8014ea0:	6808      	ldr	r0, [r1, #0]
 8014ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ea6:	f01e 0f10 	tst.w	lr, #16
 8014eaa:	bf08      	it	eq
 8014eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014eb0:	f380 8809 	msr	PSP, r0
 8014eb4:	f3bf 8f6f 	isb	sy
 8014eb8:	4770      	bx	lr
 8014eba:	bf00      	nop
 8014ebc:	f3af 8000 	nop.w

08014ec0 <pxCurrentTCBConst>:
 8014ec0:	2404b85c 	.word	0x2404b85c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014ec4:	bf00      	nop
 8014ec6:	bf00      	nop

08014ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b082      	sub	sp, #8
 8014ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8014ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ed2:	f383 8811 	msr	BASEPRI, r3
 8014ed6:	f3bf 8f6f 	isb	sy
 8014eda:	f3bf 8f4f 	dsb	sy
 8014ede:	607b      	str	r3, [r7, #4]
}
 8014ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014ee2:	f7ff fa17 	bl	8014314 <xTaskIncrementTick>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d003      	beq.n	8014ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014eec:	4b06      	ldr	r3, [pc, #24]	@ (8014f08 <SysTick_Handler+0x40>)
 8014eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ef2:	601a      	str	r2, [r3, #0]
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	f383 8811 	msr	BASEPRI, r3
}
 8014efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014f00:	bf00      	nop
 8014f02:	3708      	adds	r7, #8
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}
 8014f08:	e000ed04 	.word	0xe000ed04

08014f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014f10:	4b0b      	ldr	r3, [pc, #44]	@ (8014f40 <vPortSetupTimerInterrupt+0x34>)
 8014f12:	2200      	movs	r2, #0
 8014f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014f16:	4b0b      	ldr	r3, [pc, #44]	@ (8014f44 <vPortSetupTimerInterrupt+0x38>)
 8014f18:	2200      	movs	r2, #0
 8014f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8014f48 <vPortSetupTimerInterrupt+0x3c>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	4a0a      	ldr	r2, [pc, #40]	@ (8014f4c <vPortSetupTimerInterrupt+0x40>)
 8014f22:	fba2 2303 	umull	r2, r3, r2, r3
 8014f26:	099b      	lsrs	r3, r3, #6
 8014f28:	4a09      	ldr	r2, [pc, #36]	@ (8014f50 <vPortSetupTimerInterrupt+0x44>)
 8014f2a:	3b01      	subs	r3, #1
 8014f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014f2e:	4b04      	ldr	r3, [pc, #16]	@ (8014f40 <vPortSetupTimerInterrupt+0x34>)
 8014f30:	2207      	movs	r2, #7
 8014f32:	601a      	str	r2, [r3, #0]
}
 8014f34:	bf00      	nop
 8014f36:	46bd      	mov	sp, r7
 8014f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3c:	4770      	bx	lr
 8014f3e:	bf00      	nop
 8014f40:	e000e010 	.word	0xe000e010
 8014f44:	e000e018 	.word	0xe000e018
 8014f48:	24000000 	.word	0x24000000
 8014f4c:	10624dd3 	.word	0x10624dd3
 8014f50:	e000e014 	.word	0xe000e014

08014f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014f54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014f64 <vPortEnableVFP+0x10>
 8014f58:	6801      	ldr	r1, [r0, #0]
 8014f5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014f5e:	6001      	str	r1, [r0, #0]
 8014f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014f62:	bf00      	nop
 8014f64:	e000ed88 	.word	0xe000ed88

08014f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014f68:	b480      	push	{r7}
 8014f6a:	b085      	sub	sp, #20
 8014f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014f6e:	f3ef 8305 	mrs	r3, IPSR
 8014f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	2b0f      	cmp	r3, #15
 8014f78:	d915      	bls.n	8014fa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014f7a:	4a18      	ldr	r2, [pc, #96]	@ (8014fdc <vPortValidateInterruptPriority+0x74>)
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	4413      	add	r3, r2
 8014f80:	781b      	ldrb	r3, [r3, #0]
 8014f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014f84:	4b16      	ldr	r3, [pc, #88]	@ (8014fe0 <vPortValidateInterruptPriority+0x78>)
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	7afa      	ldrb	r2, [r7, #11]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d20b      	bcs.n	8014fa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f92:	f383 8811 	msr	BASEPRI, r3
 8014f96:	f3bf 8f6f 	isb	sy
 8014f9a:	f3bf 8f4f 	dsb	sy
 8014f9e:	607b      	str	r3, [r7, #4]
}
 8014fa0:	bf00      	nop
 8014fa2:	bf00      	nop
 8014fa4:	e7fd      	b.n	8014fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8014fe4 <vPortValidateInterruptPriority+0x7c>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014fae:	4b0e      	ldr	r3, [pc, #56]	@ (8014fe8 <vPortValidateInterruptPriority+0x80>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d90b      	bls.n	8014fce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8014fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fba:	f383 8811 	msr	BASEPRI, r3
 8014fbe:	f3bf 8f6f 	isb	sy
 8014fc2:	f3bf 8f4f 	dsb	sy
 8014fc6:	603b      	str	r3, [r7, #0]
}
 8014fc8:	bf00      	nop
 8014fca:	bf00      	nop
 8014fcc:	e7fd      	b.n	8014fca <vPortValidateInterruptPriority+0x62>
	}
 8014fce:	bf00      	nop
 8014fd0:	3714      	adds	r7, #20
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd8:	4770      	bx	lr
 8014fda:	bf00      	nop
 8014fdc:	e000e3f0 	.word	0xe000e3f0
 8014fe0:	2404b988 	.word	0x2404b988
 8014fe4:	e000ed0c 	.word	0xe000ed0c
 8014fe8:	2404b98c 	.word	0x2404b98c

08014fec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b08a      	sub	sp, #40	@ 0x28
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014ff8:	f7ff f8e0 	bl	80141bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8015170 <pvPortMalloc+0x184>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d101      	bne.n	8015008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015004:	f000 f924 	bl	8015250 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015008:	4b5a      	ldr	r3, [pc, #360]	@ (8015174 <pvPortMalloc+0x188>)
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	4013      	ands	r3, r2
 8015010:	2b00      	cmp	r3, #0
 8015012:	f040 8095 	bne.w	8015140 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d01e      	beq.n	801505a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801501c:	2208      	movs	r2, #8
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	4413      	add	r3, r2
 8015022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f003 0307 	and.w	r3, r3, #7
 801502a:	2b00      	cmp	r3, #0
 801502c:	d015      	beq.n	801505a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f023 0307 	bic.w	r3, r3, #7
 8015034:	3308      	adds	r3, #8
 8015036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f003 0307 	and.w	r3, r3, #7
 801503e:	2b00      	cmp	r3, #0
 8015040:	d00b      	beq.n	801505a <pvPortMalloc+0x6e>
	__asm volatile
 8015042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015046:	f383 8811 	msr	BASEPRI, r3
 801504a:	f3bf 8f6f 	isb	sy
 801504e:	f3bf 8f4f 	dsb	sy
 8015052:	617b      	str	r3, [r7, #20]
}
 8015054:	bf00      	nop
 8015056:	bf00      	nop
 8015058:	e7fd      	b.n	8015056 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d06f      	beq.n	8015140 <pvPortMalloc+0x154>
 8015060:	4b45      	ldr	r3, [pc, #276]	@ (8015178 <pvPortMalloc+0x18c>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	687a      	ldr	r2, [r7, #4]
 8015066:	429a      	cmp	r2, r3
 8015068:	d86a      	bhi.n	8015140 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801506a:	4b44      	ldr	r3, [pc, #272]	@ (801517c <pvPortMalloc+0x190>)
 801506c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801506e:	4b43      	ldr	r3, [pc, #268]	@ (801517c <pvPortMalloc+0x190>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015074:	e004      	b.n	8015080 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015078:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	687a      	ldr	r2, [r7, #4]
 8015086:	429a      	cmp	r2, r3
 8015088:	d903      	bls.n	8015092 <pvPortMalloc+0xa6>
 801508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d1f1      	bne.n	8015076 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015092:	4b37      	ldr	r3, [pc, #220]	@ (8015170 <pvPortMalloc+0x184>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015098:	429a      	cmp	r2, r3
 801509a:	d051      	beq.n	8015140 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801509c:	6a3b      	ldr	r3, [r7, #32]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	2208      	movs	r2, #8
 80150a2:	4413      	add	r3, r2
 80150a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80150a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a8:	681a      	ldr	r2, [r3, #0]
 80150aa:	6a3b      	ldr	r3, [r7, #32]
 80150ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80150ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150b0:	685a      	ldr	r2, [r3, #4]
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	1ad2      	subs	r2, r2, r3
 80150b6:	2308      	movs	r3, #8
 80150b8:	005b      	lsls	r3, r3, #1
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d920      	bls.n	8015100 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80150be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	4413      	add	r3, r2
 80150c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80150c6:	69bb      	ldr	r3, [r7, #24]
 80150c8:	f003 0307 	and.w	r3, r3, #7
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d00b      	beq.n	80150e8 <pvPortMalloc+0xfc>
	__asm volatile
 80150d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150d4:	f383 8811 	msr	BASEPRI, r3
 80150d8:	f3bf 8f6f 	isb	sy
 80150dc:	f3bf 8f4f 	dsb	sy
 80150e0:	613b      	str	r3, [r7, #16]
}
 80150e2:	bf00      	nop
 80150e4:	bf00      	nop
 80150e6:	e7fd      	b.n	80150e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80150e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ea:	685a      	ldr	r2, [r3, #4]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	1ad2      	subs	r2, r2, r3
 80150f0:	69bb      	ldr	r3, [r7, #24]
 80150f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80150f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80150fa:	69b8      	ldr	r0, [r7, #24]
 80150fc:	f000 f90a 	bl	8015314 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015100:	4b1d      	ldr	r3, [pc, #116]	@ (8015178 <pvPortMalloc+0x18c>)
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015106:	685b      	ldr	r3, [r3, #4]
 8015108:	1ad3      	subs	r3, r2, r3
 801510a:	4a1b      	ldr	r2, [pc, #108]	@ (8015178 <pvPortMalloc+0x18c>)
 801510c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801510e:	4b1a      	ldr	r3, [pc, #104]	@ (8015178 <pvPortMalloc+0x18c>)
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	4b1b      	ldr	r3, [pc, #108]	@ (8015180 <pvPortMalloc+0x194>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	429a      	cmp	r2, r3
 8015118:	d203      	bcs.n	8015122 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801511a:	4b17      	ldr	r3, [pc, #92]	@ (8015178 <pvPortMalloc+0x18c>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	4a18      	ldr	r2, [pc, #96]	@ (8015180 <pvPortMalloc+0x194>)
 8015120:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015124:	685a      	ldr	r2, [r3, #4]
 8015126:	4b13      	ldr	r3, [pc, #76]	@ (8015174 <pvPortMalloc+0x188>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	431a      	orrs	r2, r3
 801512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801512e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015132:	2200      	movs	r2, #0
 8015134:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015136:	4b13      	ldr	r3, [pc, #76]	@ (8015184 <pvPortMalloc+0x198>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	3301      	adds	r3, #1
 801513c:	4a11      	ldr	r2, [pc, #68]	@ (8015184 <pvPortMalloc+0x198>)
 801513e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015140:	f7ff f84a 	bl	80141d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015144:	69fb      	ldr	r3, [r7, #28]
 8015146:	f003 0307 	and.w	r3, r3, #7
 801514a:	2b00      	cmp	r3, #0
 801514c:	d00b      	beq.n	8015166 <pvPortMalloc+0x17a>
	__asm volatile
 801514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015152:	f383 8811 	msr	BASEPRI, r3
 8015156:	f3bf 8f6f 	isb	sy
 801515a:	f3bf 8f4f 	dsb	sy
 801515e:	60fb      	str	r3, [r7, #12]
}
 8015160:	bf00      	nop
 8015162:	bf00      	nop
 8015164:	e7fd      	b.n	8015162 <pvPortMalloc+0x176>
	return pvReturn;
 8015166:	69fb      	ldr	r3, [r7, #28]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3728      	adds	r7, #40	@ 0x28
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	2404f598 	.word	0x2404f598
 8015174:	2404f5ac 	.word	0x2404f5ac
 8015178:	2404f59c 	.word	0x2404f59c
 801517c:	2404f590 	.word	0x2404f590
 8015180:	2404f5a0 	.word	0x2404f5a0
 8015184:	2404f5a4 	.word	0x2404f5a4

08015188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b086      	sub	sp, #24
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d04f      	beq.n	801523a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801519a:	2308      	movs	r3, #8
 801519c:	425b      	negs	r3, r3
 801519e:	697a      	ldr	r2, [r7, #20]
 80151a0:	4413      	add	r3, r2
 80151a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	685a      	ldr	r2, [r3, #4]
 80151ac:	4b25      	ldr	r3, [pc, #148]	@ (8015244 <vPortFree+0xbc>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	4013      	ands	r3, r2
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d10b      	bne.n	80151ce <vPortFree+0x46>
	__asm volatile
 80151b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151ba:	f383 8811 	msr	BASEPRI, r3
 80151be:	f3bf 8f6f 	isb	sy
 80151c2:	f3bf 8f4f 	dsb	sy
 80151c6:	60fb      	str	r3, [r7, #12]
}
 80151c8:	bf00      	nop
 80151ca:	bf00      	nop
 80151cc:	e7fd      	b.n	80151ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d00b      	beq.n	80151ee <vPortFree+0x66>
	__asm volatile
 80151d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151da:	f383 8811 	msr	BASEPRI, r3
 80151de:	f3bf 8f6f 	isb	sy
 80151e2:	f3bf 8f4f 	dsb	sy
 80151e6:	60bb      	str	r3, [r7, #8]
}
 80151e8:	bf00      	nop
 80151ea:	bf00      	nop
 80151ec:	e7fd      	b.n	80151ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	685a      	ldr	r2, [r3, #4]
 80151f2:	4b14      	ldr	r3, [pc, #80]	@ (8015244 <vPortFree+0xbc>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	4013      	ands	r3, r2
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d01e      	beq.n	801523a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d11a      	bne.n	801523a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	685a      	ldr	r2, [r3, #4]
 8015208:	4b0e      	ldr	r3, [pc, #56]	@ (8015244 <vPortFree+0xbc>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	43db      	mvns	r3, r3
 801520e:	401a      	ands	r2, r3
 8015210:	693b      	ldr	r3, [r7, #16]
 8015212:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015214:	f7fe ffd2 	bl	80141bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	685a      	ldr	r2, [r3, #4]
 801521c:	4b0a      	ldr	r3, [pc, #40]	@ (8015248 <vPortFree+0xc0>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	4413      	add	r3, r2
 8015222:	4a09      	ldr	r2, [pc, #36]	@ (8015248 <vPortFree+0xc0>)
 8015224:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015226:	6938      	ldr	r0, [r7, #16]
 8015228:	f000 f874 	bl	8015314 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801522c:	4b07      	ldr	r3, [pc, #28]	@ (801524c <vPortFree+0xc4>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	3301      	adds	r3, #1
 8015232:	4a06      	ldr	r2, [pc, #24]	@ (801524c <vPortFree+0xc4>)
 8015234:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015236:	f7fe ffcf 	bl	80141d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801523a:	bf00      	nop
 801523c:	3718      	adds	r7, #24
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
 8015242:	bf00      	nop
 8015244:	2404f5ac 	.word	0x2404f5ac
 8015248:	2404f59c 	.word	0x2404f59c
 801524c:	2404f5a8 	.word	0x2404f5a8

08015250 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015250:	b480      	push	{r7}
 8015252:	b085      	sub	sp, #20
 8015254:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015256:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801525a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801525c:	4b27      	ldr	r3, [pc, #156]	@ (80152fc <prvHeapInit+0xac>)
 801525e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f003 0307 	and.w	r3, r3, #7
 8015266:	2b00      	cmp	r3, #0
 8015268:	d00c      	beq.n	8015284 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	3307      	adds	r3, #7
 801526e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f023 0307 	bic.w	r3, r3, #7
 8015276:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015278:	68ba      	ldr	r2, [r7, #8]
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	1ad3      	subs	r3, r2, r3
 801527e:	4a1f      	ldr	r2, [pc, #124]	@ (80152fc <prvHeapInit+0xac>)
 8015280:	4413      	add	r3, r2
 8015282:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015288:	4a1d      	ldr	r2, [pc, #116]	@ (8015300 <prvHeapInit+0xb0>)
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801528e:	4b1c      	ldr	r3, [pc, #112]	@ (8015300 <prvHeapInit+0xb0>)
 8015290:	2200      	movs	r2, #0
 8015292:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	68ba      	ldr	r2, [r7, #8]
 8015298:	4413      	add	r3, r2
 801529a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801529c:	2208      	movs	r2, #8
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	1a9b      	subs	r3, r3, r2
 80152a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f023 0307 	bic.w	r3, r3, #7
 80152aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	4a15      	ldr	r2, [pc, #84]	@ (8015304 <prvHeapInit+0xb4>)
 80152b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80152b2:	4b14      	ldr	r3, [pc, #80]	@ (8015304 <prvHeapInit+0xb4>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	2200      	movs	r2, #0
 80152b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80152ba:	4b12      	ldr	r3, [pc, #72]	@ (8015304 <prvHeapInit+0xb4>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	2200      	movs	r2, #0
 80152c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	68fa      	ldr	r2, [r7, #12]
 80152ca:	1ad2      	subs	r2, r2, r3
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80152d0:	4b0c      	ldr	r3, [pc, #48]	@ (8015304 <prvHeapInit+0xb4>)
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	685b      	ldr	r3, [r3, #4]
 80152dc:	4a0a      	ldr	r2, [pc, #40]	@ (8015308 <prvHeapInit+0xb8>)
 80152de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	4a09      	ldr	r2, [pc, #36]	@ (801530c <prvHeapInit+0xbc>)
 80152e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80152e8:	4b09      	ldr	r3, [pc, #36]	@ (8015310 <prvHeapInit+0xc0>)
 80152ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80152ee:	601a      	str	r2, [r3, #0]
}
 80152f0:	bf00      	nop
 80152f2:	3714      	adds	r7, #20
 80152f4:	46bd      	mov	sp, r7
 80152f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fa:	4770      	bx	lr
 80152fc:	2404b990 	.word	0x2404b990
 8015300:	2404f590 	.word	0x2404f590
 8015304:	2404f598 	.word	0x2404f598
 8015308:	2404f5a0 	.word	0x2404f5a0
 801530c:	2404f59c 	.word	0x2404f59c
 8015310:	2404f5ac 	.word	0x2404f5ac

08015314 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015314:	b480      	push	{r7}
 8015316:	b085      	sub	sp, #20
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801531c:	4b28      	ldr	r3, [pc, #160]	@ (80153c0 <prvInsertBlockIntoFreeList+0xac>)
 801531e:	60fb      	str	r3, [r7, #12]
 8015320:	e002      	b.n	8015328 <prvInsertBlockIntoFreeList+0x14>
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	60fb      	str	r3, [r7, #12]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	687a      	ldr	r2, [r7, #4]
 801532e:	429a      	cmp	r2, r3
 8015330:	d8f7      	bhi.n	8015322 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	68ba      	ldr	r2, [r7, #8]
 801533c:	4413      	add	r3, r2
 801533e:	687a      	ldr	r2, [r7, #4]
 8015340:	429a      	cmp	r2, r3
 8015342:	d108      	bne.n	8015356 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	685a      	ldr	r2, [r3, #4]
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	441a      	add	r2, r3
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	68ba      	ldr	r2, [r7, #8]
 8015360:	441a      	add	r2, r3
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	429a      	cmp	r2, r3
 8015368:	d118      	bne.n	801539c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	681a      	ldr	r2, [r3, #0]
 801536e:	4b15      	ldr	r3, [pc, #84]	@ (80153c4 <prvInsertBlockIntoFreeList+0xb0>)
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	429a      	cmp	r2, r3
 8015374:	d00d      	beq.n	8015392 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	685a      	ldr	r2, [r3, #4]
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	685b      	ldr	r3, [r3, #4]
 8015380:	441a      	add	r2, r3
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	681a      	ldr	r2, [r3, #0]
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	601a      	str	r2, [r3, #0]
 8015390:	e008      	b.n	80153a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015392:	4b0c      	ldr	r3, [pc, #48]	@ (80153c4 <prvInsertBlockIntoFreeList+0xb0>)
 8015394:	681a      	ldr	r2, [r3, #0]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	601a      	str	r2, [r3, #0]
 801539a:	e003      	b.n	80153a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	681a      	ldr	r2, [r3, #0]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80153a4:	68fa      	ldr	r2, [r7, #12]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	429a      	cmp	r2, r3
 80153aa:	d002      	beq.n	80153b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	687a      	ldr	r2, [r7, #4]
 80153b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80153b2:	bf00      	nop
 80153b4:	3714      	adds	r7, #20
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr
 80153be:	bf00      	nop
 80153c0:	2404f590 	.word	0x2404f590
 80153c4:	2404f598 	.word	0x2404f598

080153c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80153cc:	2200      	movs	r2, #0
 80153ce:	490f      	ldr	r1, [pc, #60]	@ (801540c <MX_USB_DEVICE_Init+0x44>)
 80153d0:	480f      	ldr	r0, [pc, #60]	@ (8015410 <MX_USB_DEVICE_Init+0x48>)
 80153d2:	f7fb ffe7 	bl	80113a4 <USBD_Init>
 80153d6:	4603      	mov	r3, r0
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d001      	beq.n	80153e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80153dc:	f7ec f872 	bl	80014c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80153e0:	490c      	ldr	r1, [pc, #48]	@ (8015414 <MX_USB_DEVICE_Init+0x4c>)
 80153e2:	480b      	ldr	r0, [pc, #44]	@ (8015410 <MX_USB_DEVICE_Init+0x48>)
 80153e4:	f7fc f80e 	bl	8011404 <USBD_RegisterClass>
 80153e8:	4603      	mov	r3, r0
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d001      	beq.n	80153f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80153ee:	f7ec f869 	bl	80014c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80153f2:	4807      	ldr	r0, [pc, #28]	@ (8015410 <MX_USB_DEVICE_Init+0x48>)
 80153f4:	f7fc f83c 	bl	8011470 <USBD_Start>
 80153f8:	4603      	mov	r3, r0
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d001      	beq.n	8015402 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80153fe:	f7ec f861 	bl	80014c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015402:	f7f2 ff8b 	bl	800831c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015406:	bf00      	nop
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	240000cc 	.word	0x240000cc
 8015410:	2404f5b0 	.word	0x2404f5b0
 8015414:	24000014 	.word	0x24000014

08015418 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	4603      	mov	r3, r0
 8015420:	6039      	str	r1, [r7, #0]
 8015422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	2212      	movs	r2, #18
 8015428:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801542a:	4b03      	ldr	r3, [pc, #12]	@ (8015438 <USBD_FS_DeviceDescriptor+0x20>)
}
 801542c:	4618      	mov	r0, r3
 801542e:	370c      	adds	r7, #12
 8015430:	46bd      	mov	sp, r7
 8015432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015436:	4770      	bx	lr
 8015438:	240000ec 	.word	0x240000ec

0801543c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
 8015442:	4603      	mov	r3, r0
 8015444:	6039      	str	r1, [r7, #0]
 8015446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	2204      	movs	r2, #4
 801544c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801544e:	4b03      	ldr	r3, [pc, #12]	@ (801545c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015450:	4618      	mov	r0, r3
 8015452:	370c      	adds	r7, #12
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr
 801545c:	24000100 	.word	0x24000100

08015460 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b082      	sub	sp, #8
 8015464:	af00      	add	r7, sp, #0
 8015466:	4603      	mov	r3, r0
 8015468:	6039      	str	r1, [r7, #0]
 801546a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801546c:	79fb      	ldrb	r3, [r7, #7]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d105      	bne.n	801547e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015472:	683a      	ldr	r2, [r7, #0]
 8015474:	4907      	ldr	r1, [pc, #28]	@ (8015494 <USBD_FS_ProductStrDescriptor+0x34>)
 8015476:	4808      	ldr	r0, [pc, #32]	@ (8015498 <USBD_FS_ProductStrDescriptor+0x38>)
 8015478:	f7fd f9d4 	bl	8012824 <USBD_GetString>
 801547c:	e004      	b.n	8015488 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801547e:	683a      	ldr	r2, [r7, #0]
 8015480:	4904      	ldr	r1, [pc, #16]	@ (8015494 <USBD_FS_ProductStrDescriptor+0x34>)
 8015482:	4805      	ldr	r0, [pc, #20]	@ (8015498 <USBD_FS_ProductStrDescriptor+0x38>)
 8015484:	f7fd f9ce 	bl	8012824 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015488:	4b02      	ldr	r3, [pc, #8]	@ (8015494 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801548a:	4618      	mov	r0, r3
 801548c:	3708      	adds	r7, #8
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}
 8015492:	bf00      	nop
 8015494:	2404f88c 	.word	0x2404f88c
 8015498:	08017164 	.word	0x08017164

0801549c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b082      	sub	sp, #8
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	4603      	mov	r3, r0
 80154a4:	6039      	str	r1, [r7, #0]
 80154a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80154a8:	683a      	ldr	r2, [r7, #0]
 80154aa:	4904      	ldr	r1, [pc, #16]	@ (80154bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80154ac:	4804      	ldr	r0, [pc, #16]	@ (80154c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80154ae:	f7fd f9b9 	bl	8012824 <USBD_GetString>
  return USBD_StrDesc;
 80154b2:	4b02      	ldr	r3, [pc, #8]	@ (80154bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3708      	adds	r7, #8
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	2404f88c 	.word	0x2404f88c
 80154c0:	0801717c 	.word	0x0801717c

080154c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b082      	sub	sp, #8
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	4603      	mov	r3, r0
 80154cc:	6039      	str	r1, [r7, #0]
 80154ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	221a      	movs	r2, #26
 80154d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80154d6:	f000 f843 	bl	8015560 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80154da:	4b02      	ldr	r3, [pc, #8]	@ (80154e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}
 80154e4:	24000104 	.word	0x24000104

080154e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	4603      	mov	r3, r0
 80154f0:	6039      	str	r1, [r7, #0]
 80154f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80154f4:	79fb      	ldrb	r3, [r7, #7]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d105      	bne.n	8015506 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154fa:	683a      	ldr	r2, [r7, #0]
 80154fc:	4907      	ldr	r1, [pc, #28]	@ (801551c <USBD_FS_ConfigStrDescriptor+0x34>)
 80154fe:	4808      	ldr	r0, [pc, #32]	@ (8015520 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015500:	f7fd f990 	bl	8012824 <USBD_GetString>
 8015504:	e004      	b.n	8015510 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015506:	683a      	ldr	r2, [r7, #0]
 8015508:	4904      	ldr	r1, [pc, #16]	@ (801551c <USBD_FS_ConfigStrDescriptor+0x34>)
 801550a:	4805      	ldr	r0, [pc, #20]	@ (8015520 <USBD_FS_ConfigStrDescriptor+0x38>)
 801550c:	f7fd f98a 	bl	8012824 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015510:	4b02      	ldr	r3, [pc, #8]	@ (801551c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015512:	4618      	mov	r0, r3
 8015514:	3708      	adds	r7, #8
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	2404f88c 	.word	0x2404f88c
 8015520:	08017190 	.word	0x08017190

08015524 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b082      	sub	sp, #8
 8015528:	af00      	add	r7, sp, #0
 801552a:	4603      	mov	r3, r0
 801552c:	6039      	str	r1, [r7, #0]
 801552e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015530:	79fb      	ldrb	r3, [r7, #7]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d105      	bne.n	8015542 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015536:	683a      	ldr	r2, [r7, #0]
 8015538:	4907      	ldr	r1, [pc, #28]	@ (8015558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801553a:	4808      	ldr	r0, [pc, #32]	@ (801555c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801553c:	f7fd f972 	bl	8012824 <USBD_GetString>
 8015540:	e004      	b.n	801554c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015542:	683a      	ldr	r2, [r7, #0]
 8015544:	4904      	ldr	r1, [pc, #16]	@ (8015558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015546:	4805      	ldr	r0, [pc, #20]	@ (801555c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015548:	f7fd f96c 	bl	8012824 <USBD_GetString>
  }
  return USBD_StrDesc;
 801554c:	4b02      	ldr	r3, [pc, #8]	@ (8015558 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801554e:	4618      	mov	r0, r3
 8015550:	3708      	adds	r7, #8
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop
 8015558:	2404f88c 	.word	0x2404f88c
 801555c:	0801719c 	.word	0x0801719c

08015560 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b084      	sub	sp, #16
 8015564:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015566:	4b0f      	ldr	r3, [pc, #60]	@ (80155a4 <Get_SerialNum+0x44>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801556c:	4b0e      	ldr	r3, [pc, #56]	@ (80155a8 <Get_SerialNum+0x48>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015572:	4b0e      	ldr	r3, [pc, #56]	@ (80155ac <Get_SerialNum+0x4c>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015578:	68fa      	ldr	r2, [r7, #12]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	4413      	add	r3, r2
 801557e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d009      	beq.n	801559a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015586:	2208      	movs	r2, #8
 8015588:	4909      	ldr	r1, [pc, #36]	@ (80155b0 <Get_SerialNum+0x50>)
 801558a:	68f8      	ldr	r0, [r7, #12]
 801558c:	f000 f814 	bl	80155b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015590:	2204      	movs	r2, #4
 8015592:	4908      	ldr	r1, [pc, #32]	@ (80155b4 <Get_SerialNum+0x54>)
 8015594:	68b8      	ldr	r0, [r7, #8]
 8015596:	f000 f80f 	bl	80155b8 <IntToUnicode>
  }
}
 801559a:	bf00      	nop
 801559c:	3710      	adds	r7, #16
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}
 80155a2:	bf00      	nop
 80155a4:	1ff1e800 	.word	0x1ff1e800
 80155a8:	1ff1e804 	.word	0x1ff1e804
 80155ac:	1ff1e808 	.word	0x1ff1e808
 80155b0:	24000106 	.word	0x24000106
 80155b4:	24000116 	.word	0x24000116

080155b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80155b8:	b480      	push	{r7}
 80155ba:	b087      	sub	sp, #28
 80155bc:	af00      	add	r7, sp, #0
 80155be:	60f8      	str	r0, [r7, #12]
 80155c0:	60b9      	str	r1, [r7, #8]
 80155c2:	4613      	mov	r3, r2
 80155c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80155c6:	2300      	movs	r3, #0
 80155c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80155ca:	2300      	movs	r3, #0
 80155cc:	75fb      	strb	r3, [r7, #23]
 80155ce:	e027      	b.n	8015620 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	0f1b      	lsrs	r3, r3, #28
 80155d4:	2b09      	cmp	r3, #9
 80155d6:	d80b      	bhi.n	80155f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	0f1b      	lsrs	r3, r3, #28
 80155dc:	b2da      	uxtb	r2, r3
 80155de:	7dfb      	ldrb	r3, [r7, #23]
 80155e0:	005b      	lsls	r3, r3, #1
 80155e2:	4619      	mov	r1, r3
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	440b      	add	r3, r1
 80155e8:	3230      	adds	r2, #48	@ 0x30
 80155ea:	b2d2      	uxtb	r2, r2
 80155ec:	701a      	strb	r2, [r3, #0]
 80155ee:	e00a      	b.n	8015606 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	0f1b      	lsrs	r3, r3, #28
 80155f4:	b2da      	uxtb	r2, r3
 80155f6:	7dfb      	ldrb	r3, [r7, #23]
 80155f8:	005b      	lsls	r3, r3, #1
 80155fa:	4619      	mov	r1, r3
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	440b      	add	r3, r1
 8015600:	3237      	adds	r2, #55	@ 0x37
 8015602:	b2d2      	uxtb	r2, r2
 8015604:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	011b      	lsls	r3, r3, #4
 801560a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801560c:	7dfb      	ldrb	r3, [r7, #23]
 801560e:	005b      	lsls	r3, r3, #1
 8015610:	3301      	adds	r3, #1
 8015612:	68ba      	ldr	r2, [r7, #8]
 8015614:	4413      	add	r3, r2
 8015616:	2200      	movs	r2, #0
 8015618:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801561a:	7dfb      	ldrb	r3, [r7, #23]
 801561c:	3301      	adds	r3, #1
 801561e:	75fb      	strb	r3, [r7, #23]
 8015620:	7dfa      	ldrb	r2, [r7, #23]
 8015622:	79fb      	ldrb	r3, [r7, #7]
 8015624:	429a      	cmp	r2, r3
 8015626:	d3d3      	bcc.n	80155d0 <IntToUnicode+0x18>
  }
}
 8015628:	bf00      	nop
 801562a:	bf00      	nop
 801562c:	371c      	adds	r7, #28
 801562e:	46bd      	mov	sp, r7
 8015630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015634:	4770      	bx	lr
	...

08015638 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b0ba      	sub	sp, #232	@ 0xe8
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015640:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015644:	2200      	movs	r2, #0
 8015646:	601a      	str	r2, [r3, #0]
 8015648:	605a      	str	r2, [r3, #4]
 801564a:	609a      	str	r2, [r3, #8]
 801564c:	60da      	str	r2, [r3, #12]
 801564e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015650:	f107 0310 	add.w	r3, r7, #16
 8015654:	22c0      	movs	r2, #192	@ 0xc0
 8015656:	2100      	movs	r1, #0
 8015658:	4618      	mov	r0, r3
 801565a:	f000 fd3f 	bl	80160dc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	4a2c      	ldr	r2, [pc, #176]	@ (8015714 <HAL_PCD_MspInit+0xdc>)
 8015664:	4293      	cmp	r3, r2
 8015666:	d151      	bne.n	801570c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015668:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801566c:	f04f 0300 	mov.w	r3, #0
 8015670:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015674:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8015678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801567c:	f107 0310 	add.w	r3, r7, #16
 8015680:	4618      	mov	r0, r3
 8015682:	f7f3 feed 	bl	8009460 <HAL_RCCEx_PeriphCLKConfig>
 8015686:	4603      	mov	r3, r0
 8015688:	2b00      	cmp	r3, #0
 801568a:	d001      	beq.n	8015690 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801568c:	f7eb ff1a 	bl	80014c4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015690:	f7f2 fe44 	bl	800831c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015694:	4b20      	ldr	r3, [pc, #128]	@ (8015718 <HAL_PCD_MspInit+0xe0>)
 8015696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801569a:	4a1f      	ldr	r2, [pc, #124]	@ (8015718 <HAL_PCD_MspInit+0xe0>)
 801569c:	f043 0301 	orr.w	r3, r3, #1
 80156a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80156a4:	4b1c      	ldr	r3, [pc, #112]	@ (8015718 <HAL_PCD_MspInit+0xe0>)
 80156a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80156aa:	f003 0301 	and.w	r3, r3, #1
 80156ae:	60fb      	str	r3, [r7, #12]
 80156b0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80156b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80156b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80156ba:	2302      	movs	r3, #2
 80156bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156c0:	2300      	movs	r3, #0
 80156c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80156c6:	2300      	movs	r3, #0
 80156c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80156cc:	230a      	movs	r3, #10
 80156ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80156d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80156d6:	4619      	mov	r1, r3
 80156d8:	4810      	ldr	r0, [pc, #64]	@ (801571c <HAL_PCD_MspInit+0xe4>)
 80156da:	f7f1 f993 	bl	8006a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80156de:	4b0e      	ldr	r3, [pc, #56]	@ (8015718 <HAL_PCD_MspInit+0xe0>)
 80156e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80156e4:	4a0c      	ldr	r2, [pc, #48]	@ (8015718 <HAL_PCD_MspInit+0xe0>)
 80156e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80156ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80156ee:	4b0a      	ldr	r3, [pc, #40]	@ (8015718 <HAL_PCD_MspInit+0xe0>)
 80156f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80156f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80156f8:	60bb      	str	r3, [r7, #8]
 80156fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80156fc:	2200      	movs	r2, #0
 80156fe:	2105      	movs	r1, #5
 8015700:	2065      	movs	r0, #101	@ 0x65
 8015702:	f7ed fb67 	bl	8002dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015706:	2065      	movs	r0, #101	@ 0x65
 8015708:	f7ed fb7e 	bl	8002e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801570c:	bf00      	nop
 801570e:	37e8      	adds	r7, #232	@ 0xe8
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}
 8015714:	40080000 	.word	0x40080000
 8015718:	58024400 	.word	0x58024400
 801571c:	58020000 	.word	0x58020000

08015720 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015734:	4619      	mov	r1, r3
 8015736:	4610      	mov	r0, r2
 8015738:	f7fb fee7 	bl	801150a <USBD_LL_SetupStage>
}
 801573c:	bf00      	nop
 801573e:	3708      	adds	r7, #8
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}

08015744 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b082      	sub	sp, #8
 8015748:	af00      	add	r7, sp, #0
 801574a:	6078      	str	r0, [r7, #4]
 801574c:	460b      	mov	r3, r1
 801574e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015756:	78fa      	ldrb	r2, [r7, #3]
 8015758:	6879      	ldr	r1, [r7, #4]
 801575a:	4613      	mov	r3, r2
 801575c:	00db      	lsls	r3, r3, #3
 801575e:	4413      	add	r3, r2
 8015760:	009b      	lsls	r3, r3, #2
 8015762:	440b      	add	r3, r1
 8015764:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	78fb      	ldrb	r3, [r7, #3]
 801576c:	4619      	mov	r1, r3
 801576e:	f7fb ff21 	bl	80115b4 <USBD_LL_DataOutStage>
}
 8015772:	bf00      	nop
 8015774:	3708      	adds	r7, #8
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}

0801577a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801577a:	b580      	push	{r7, lr}
 801577c:	b082      	sub	sp, #8
 801577e:	af00      	add	r7, sp, #0
 8015780:	6078      	str	r0, [r7, #4]
 8015782:	460b      	mov	r3, r1
 8015784:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801578c:	78fa      	ldrb	r2, [r7, #3]
 801578e:	6879      	ldr	r1, [r7, #4]
 8015790:	4613      	mov	r3, r2
 8015792:	00db      	lsls	r3, r3, #3
 8015794:	4413      	add	r3, r2
 8015796:	009b      	lsls	r3, r3, #2
 8015798:	440b      	add	r3, r1
 801579a:	3320      	adds	r3, #32
 801579c:	681a      	ldr	r2, [r3, #0]
 801579e:	78fb      	ldrb	r3, [r7, #3]
 80157a0:	4619      	mov	r1, r3
 80157a2:	f7fb ffba 	bl	801171a <USBD_LL_DataInStage>
}
 80157a6:	bf00      	nop
 80157a8:	3708      	adds	r7, #8
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}

080157ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157ae:	b580      	push	{r7, lr}
 80157b0:	b082      	sub	sp, #8
 80157b2:	af00      	add	r7, sp, #0
 80157b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80157bc:	4618      	mov	r0, r3
 80157be:	f7fc f8f4 	bl	80119aa <USBD_LL_SOF>
}
 80157c2:	bf00      	nop
 80157c4:	3708      	adds	r7, #8
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}

080157ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157ca:	b580      	push	{r7, lr}
 80157cc:	b084      	sub	sp, #16
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80157d2:	2301      	movs	r3, #1
 80157d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	79db      	ldrb	r3, [r3, #7]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d102      	bne.n	80157e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80157de:	2300      	movs	r3, #0
 80157e0:	73fb      	strb	r3, [r7, #15]
 80157e2:	e008      	b.n	80157f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	79db      	ldrb	r3, [r3, #7]
 80157e8:	2b02      	cmp	r3, #2
 80157ea:	d102      	bne.n	80157f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80157ec:	2301      	movs	r3, #1
 80157ee:	73fb      	strb	r3, [r7, #15]
 80157f0:	e001      	b.n	80157f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80157f2:	f7eb fe67 	bl	80014c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80157fc:	7bfa      	ldrb	r2, [r7, #15]
 80157fe:	4611      	mov	r1, r2
 8015800:	4618      	mov	r0, r3
 8015802:	f7fc f88e 	bl	8011922 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801580c:	4618      	mov	r0, r3
 801580e:	f7fc f836 	bl	801187e <USBD_LL_Reset>
}
 8015812:	bf00      	nop
 8015814:	3710      	adds	r7, #16
 8015816:	46bd      	mov	sp, r7
 8015818:	bd80      	pop	{r7, pc}
	...

0801581c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b082      	sub	sp, #8
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801582a:	4618      	mov	r0, r3
 801582c:	f7fc f889 	bl	8011942 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	6812      	ldr	r2, [r2, #0]
 801583e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015842:	f043 0301 	orr.w	r3, r3, #1
 8015846:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	7adb      	ldrb	r3, [r3, #11]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d005      	beq.n	801585c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015850:	4b04      	ldr	r3, [pc, #16]	@ (8015864 <HAL_PCD_SuspendCallback+0x48>)
 8015852:	691b      	ldr	r3, [r3, #16]
 8015854:	4a03      	ldr	r2, [pc, #12]	@ (8015864 <HAL_PCD_SuspendCallback+0x48>)
 8015856:	f043 0306 	orr.w	r3, r3, #6
 801585a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	e000ed00 	.word	0xe000ed00

08015868 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b082      	sub	sp, #8
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015876:	4618      	mov	r0, r3
 8015878:	f7fc f87f 	bl	801197a <USBD_LL_Resume>
}
 801587c:	bf00      	nop
 801587e:	3708      	adds	r7, #8
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}

08015884 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b082      	sub	sp, #8
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	460b      	mov	r3, r1
 801588e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015896:	78fa      	ldrb	r2, [r7, #3]
 8015898:	4611      	mov	r1, r2
 801589a:	4618      	mov	r0, r3
 801589c:	f7fc f8d7 	bl	8011a4e <USBD_LL_IsoOUTIncomplete>
}
 80158a0:	bf00      	nop
 80158a2:	3708      	adds	r7, #8
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
 80158b0:	460b      	mov	r3, r1
 80158b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80158ba:	78fa      	ldrb	r2, [r7, #3]
 80158bc:	4611      	mov	r1, r2
 80158be:	4618      	mov	r0, r3
 80158c0:	f7fc f893 	bl	80119ea <USBD_LL_IsoINIncomplete>
}
 80158c4:	bf00      	nop
 80158c6:	3708      	adds	r7, #8
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80158da:	4618      	mov	r0, r3
 80158dc:	f7fc f8e9 	bl	8011ab2 <USBD_LL_DevConnected>
}
 80158e0:	bf00      	nop
 80158e2:	3708      	adds	r7, #8
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}

080158e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b082      	sub	sp, #8
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fc f8e6 	bl	8011ac8 <USBD_LL_DevDisconnected>
}
 80158fc:	bf00      	nop
 80158fe:	3708      	adds	r7, #8
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}

08015904 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b082      	sub	sp, #8
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d13e      	bne.n	8015992 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015914:	4a21      	ldr	r2, [pc, #132]	@ (801599c <USBD_LL_Init+0x98>)
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	4a1f      	ldr	r2, [pc, #124]	@ (801599c <USBD_LL_Init+0x98>)
 8015920:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015924:	4b1d      	ldr	r3, [pc, #116]	@ (801599c <USBD_LL_Init+0x98>)
 8015926:	4a1e      	ldr	r2, [pc, #120]	@ (80159a0 <USBD_LL_Init+0x9c>)
 8015928:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801592a:	4b1c      	ldr	r3, [pc, #112]	@ (801599c <USBD_LL_Init+0x98>)
 801592c:	2209      	movs	r2, #9
 801592e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015930:	4b1a      	ldr	r3, [pc, #104]	@ (801599c <USBD_LL_Init+0x98>)
 8015932:	2202      	movs	r2, #2
 8015934:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015936:	4b19      	ldr	r3, [pc, #100]	@ (801599c <USBD_LL_Init+0x98>)
 8015938:	2200      	movs	r2, #0
 801593a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801593c:	4b17      	ldr	r3, [pc, #92]	@ (801599c <USBD_LL_Init+0x98>)
 801593e:	2202      	movs	r2, #2
 8015940:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015942:	4b16      	ldr	r3, [pc, #88]	@ (801599c <USBD_LL_Init+0x98>)
 8015944:	2200      	movs	r2, #0
 8015946:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015948:	4b14      	ldr	r3, [pc, #80]	@ (801599c <USBD_LL_Init+0x98>)
 801594a:	2200      	movs	r2, #0
 801594c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801594e:	4b13      	ldr	r3, [pc, #76]	@ (801599c <USBD_LL_Init+0x98>)
 8015950:	2200      	movs	r2, #0
 8015952:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8015954:	4b11      	ldr	r3, [pc, #68]	@ (801599c <USBD_LL_Init+0x98>)
 8015956:	2200      	movs	r2, #0
 8015958:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801595a:	4b10      	ldr	r3, [pc, #64]	@ (801599c <USBD_LL_Init+0x98>)
 801595c:	2200      	movs	r2, #0
 801595e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015960:	4b0e      	ldr	r3, [pc, #56]	@ (801599c <USBD_LL_Init+0x98>)
 8015962:	2200      	movs	r2, #0
 8015964:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015966:	480d      	ldr	r0, [pc, #52]	@ (801599c <USBD_LL_Init+0x98>)
 8015968:	f7f1 fa15 	bl	8006d96 <HAL_PCD_Init>
 801596c:	4603      	mov	r3, r0
 801596e:	2b00      	cmp	r3, #0
 8015970:	d001      	beq.n	8015976 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015972:	f7eb fda7 	bl	80014c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015976:	2180      	movs	r1, #128	@ 0x80
 8015978:	4808      	ldr	r0, [pc, #32]	@ (801599c <USBD_LL_Init+0x98>)
 801597a:	f7f2 fc54 	bl	8008226 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801597e:	2240      	movs	r2, #64	@ 0x40
 8015980:	2100      	movs	r1, #0
 8015982:	4806      	ldr	r0, [pc, #24]	@ (801599c <USBD_LL_Init+0x98>)
 8015984:	f7f2 fc08 	bl	8008198 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015988:	2280      	movs	r2, #128	@ 0x80
 801598a:	2101      	movs	r1, #1
 801598c:	4803      	ldr	r0, [pc, #12]	@ (801599c <USBD_LL_Init+0x98>)
 801598e:	f7f2 fc03 	bl	8008198 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8015992:	2300      	movs	r3, #0
}
 8015994:	4618      	mov	r0, r3
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}
 801599c:	2404fa8c 	.word	0x2404fa8c
 80159a0:	40080000 	.word	0x40080000

080159a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b084      	sub	sp, #16
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159ac:	2300      	movs	r3, #0
 80159ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159b0:	2300      	movs	r3, #0
 80159b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80159ba:	4618      	mov	r0, r3
 80159bc:	f7f1 faf7 	bl	8006fae <HAL_PCD_Start>
 80159c0:	4603      	mov	r3, r0
 80159c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159c4:	7bfb      	ldrb	r3, [r7, #15]
 80159c6:	4618      	mov	r0, r3
 80159c8:	f000 f930 	bl	8015c2c <USBD_Get_USB_Status>
 80159cc:	4603      	mov	r3, r0
 80159ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80159d2:	4618      	mov	r0, r3
 80159d4:	3710      	adds	r7, #16
 80159d6:	46bd      	mov	sp, r7
 80159d8:	bd80      	pop	{r7, pc}

080159da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80159da:	b580      	push	{r7, lr}
 80159dc:	b084      	sub	sp, #16
 80159de:	af00      	add	r7, sp, #0
 80159e0:	6078      	str	r0, [r7, #4]
 80159e2:	4608      	mov	r0, r1
 80159e4:	4611      	mov	r1, r2
 80159e6:	461a      	mov	r2, r3
 80159e8:	4603      	mov	r3, r0
 80159ea:	70fb      	strb	r3, [r7, #3]
 80159ec:	460b      	mov	r3, r1
 80159ee:	70bb      	strb	r3, [r7, #2]
 80159f0:	4613      	mov	r3, r2
 80159f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159f4:	2300      	movs	r3, #0
 80159f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159f8:	2300      	movs	r3, #0
 80159fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015a02:	78bb      	ldrb	r3, [r7, #2]
 8015a04:	883a      	ldrh	r2, [r7, #0]
 8015a06:	78f9      	ldrb	r1, [r7, #3]
 8015a08:	f7f1 fff8 	bl	80079fc <HAL_PCD_EP_Open>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a10:	7bfb      	ldrb	r3, [r7, #15]
 8015a12:	4618      	mov	r0, r3
 8015a14:	f000 f90a 	bl	8015c2c <USBD_Get_USB_Status>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	3710      	adds	r7, #16
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}

08015a26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b084      	sub	sp, #16
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
 8015a2e:	460b      	mov	r3, r1
 8015a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a32:	2300      	movs	r3, #0
 8015a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a36:	2300      	movs	r3, #0
 8015a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a40:	78fa      	ldrb	r2, [r7, #3]
 8015a42:	4611      	mov	r1, r2
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7f2 f843 	bl	8007ad0 <HAL_PCD_EP_Close>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a4e:	7bfb      	ldrb	r3, [r7, #15]
 8015a50:	4618      	mov	r0, r3
 8015a52:	f000 f8eb 	bl	8015c2c <USBD_Get_USB_Status>
 8015a56:	4603      	mov	r3, r0
 8015a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	3710      	adds	r7, #16
 8015a60:	46bd      	mov	sp, r7
 8015a62:	bd80      	pop	{r7, pc}

08015a64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b084      	sub	sp, #16
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	460b      	mov	r3, r1
 8015a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a70:	2300      	movs	r3, #0
 8015a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a74:	2300      	movs	r3, #0
 8015a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a7e:	78fa      	ldrb	r2, [r7, #3]
 8015a80:	4611      	mov	r1, r2
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7f2 f8e3 	bl	8007c4e <HAL_PCD_EP_SetStall>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a8c:	7bfb      	ldrb	r3, [r7, #15]
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f000 f8cc 	bl	8015c2c <USBD_Get_USB_Status>
 8015a94:	4603      	mov	r3, r0
 8015a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3710      	adds	r7, #16
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b084      	sub	sp, #16
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
 8015aaa:	460b      	mov	r3, r1
 8015aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015abc:	78fa      	ldrb	r2, [r7, #3]
 8015abe:	4611      	mov	r1, r2
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7f2 f927 	bl	8007d14 <HAL_PCD_EP_ClrStall>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015aca:	7bfb      	ldrb	r3, [r7, #15]
 8015acc:	4618      	mov	r0, r3
 8015ace:	f000 f8ad 	bl	8015c2c <USBD_Get_USB_Status>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3710      	adds	r7, #16
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ae0:	b480      	push	{r7}
 8015ae2:	b085      	sub	sp, #20
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	460b      	mov	r3, r1
 8015aea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015af2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	da0b      	bge.n	8015b14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015afc:	78fb      	ldrb	r3, [r7, #3]
 8015afe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015b02:	68f9      	ldr	r1, [r7, #12]
 8015b04:	4613      	mov	r3, r2
 8015b06:	00db      	lsls	r3, r3, #3
 8015b08:	4413      	add	r3, r2
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	440b      	add	r3, r1
 8015b0e:	3316      	adds	r3, #22
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	e00b      	b.n	8015b2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015b14:	78fb      	ldrb	r3, [r7, #3]
 8015b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015b1a:	68f9      	ldr	r1, [r7, #12]
 8015b1c:	4613      	mov	r3, r2
 8015b1e:	00db      	lsls	r3, r3, #3
 8015b20:	4413      	add	r3, r2
 8015b22:	009b      	lsls	r3, r3, #2
 8015b24:	440b      	add	r3, r1
 8015b26:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8015b2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3714      	adds	r7, #20
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr

08015b38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
 8015b40:	460b      	mov	r3, r1
 8015b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b44:	2300      	movs	r3, #0
 8015b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b48:	2300      	movs	r3, #0
 8015b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015b52:	78fa      	ldrb	r2, [r7, #3]
 8015b54:	4611      	mov	r1, r2
 8015b56:	4618      	mov	r0, r3
 8015b58:	f7f1 ff2c 	bl	80079b4 <HAL_PCD_SetAddress>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b60:	7bfb      	ldrb	r3, [r7, #15]
 8015b62:	4618      	mov	r0, r3
 8015b64:	f000 f862 	bl	8015c2c <USBD_Get_USB_Status>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3710      	adds	r7, #16
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}

08015b76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b76:	b580      	push	{r7, lr}
 8015b78:	b086      	sub	sp, #24
 8015b7a:	af00      	add	r7, sp, #0
 8015b7c:	60f8      	str	r0, [r7, #12]
 8015b7e:	607a      	str	r2, [r7, #4]
 8015b80:	603b      	str	r3, [r7, #0]
 8015b82:	460b      	mov	r3, r1
 8015b84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b86:	2300      	movs	r3, #0
 8015b88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015b94:	7af9      	ldrb	r1, [r7, #11]
 8015b96:	683b      	ldr	r3, [r7, #0]
 8015b98:	687a      	ldr	r2, [r7, #4]
 8015b9a:	f7f2 f81e 	bl	8007bda <HAL_PCD_EP_Transmit>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ba2:	7dfb      	ldrb	r3, [r7, #23]
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f000 f841 	bl	8015c2c <USBD_Get_USB_Status>
 8015baa:	4603      	mov	r3, r0
 8015bac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015bae:	7dbb      	ldrb	r3, [r7, #22]
}
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	3718      	adds	r7, #24
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}

08015bb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b086      	sub	sp, #24
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	607a      	str	r2, [r7, #4]
 8015bc2:	603b      	str	r3, [r7, #0]
 8015bc4:	460b      	mov	r3, r1
 8015bc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015bd6:	7af9      	ldrb	r1, [r7, #11]
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	687a      	ldr	r2, [r7, #4]
 8015bdc:	f7f1 ffc2 	bl	8007b64 <HAL_PCD_EP_Receive>
 8015be0:	4603      	mov	r3, r0
 8015be2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015be4:	7dfb      	ldrb	r3, [r7, #23]
 8015be6:	4618      	mov	r0, r3
 8015be8:	f000 f820 	bl	8015c2c <USBD_Get_USB_Status>
 8015bec:	4603      	mov	r3, r0
 8015bee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015bf0:	7dbb      	ldrb	r3, [r7, #22]
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3718      	adds	r7, #24
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
	...

08015bfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015bfc:	b480      	push	{r7}
 8015bfe:	b083      	sub	sp, #12
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015c04:	4b03      	ldr	r3, [pc, #12]	@ (8015c14 <USBD_static_malloc+0x18>)
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	370c      	adds	r7, #12
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c10:	4770      	bx	lr
 8015c12:	bf00      	nop
 8015c14:	2404ff70 	.word	0x2404ff70

08015c18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	b083      	sub	sp, #12
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015c20:	bf00      	nop
 8015c22:	370c      	adds	r7, #12
 8015c24:	46bd      	mov	sp, r7
 8015c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2a:	4770      	bx	lr

08015c2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015c2c:	b480      	push	{r7}
 8015c2e:	b085      	sub	sp, #20
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	4603      	mov	r3, r0
 8015c34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c36:	2300      	movs	r3, #0
 8015c38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015c3a:	79fb      	ldrb	r3, [r7, #7]
 8015c3c:	2b03      	cmp	r3, #3
 8015c3e:	d817      	bhi.n	8015c70 <USBD_Get_USB_Status+0x44>
 8015c40:	a201      	add	r2, pc, #4	@ (adr r2, 8015c48 <USBD_Get_USB_Status+0x1c>)
 8015c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c46:	bf00      	nop
 8015c48:	08015c59 	.word	0x08015c59
 8015c4c:	08015c5f 	.word	0x08015c5f
 8015c50:	08015c65 	.word	0x08015c65
 8015c54:	08015c6b 	.word	0x08015c6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8015c5c:	e00b      	b.n	8015c76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015c5e:	2303      	movs	r3, #3
 8015c60:	73fb      	strb	r3, [r7, #15]
    break;
 8015c62:	e008      	b.n	8015c76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015c64:	2301      	movs	r3, #1
 8015c66:	73fb      	strb	r3, [r7, #15]
    break;
 8015c68:	e005      	b.n	8015c76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015c6a:	2303      	movs	r3, #3
 8015c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8015c6e:	e002      	b.n	8015c76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015c70:	2303      	movs	r3, #3
 8015c72:	73fb      	strb	r3, [r7, #15]
    break;
 8015c74:	bf00      	nop
  }
  return usb_status;
 8015c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3714      	adds	r7, #20
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c82:	4770      	bx	lr

08015c84 <std>:
 8015c84:	2300      	movs	r3, #0
 8015c86:	b510      	push	{r4, lr}
 8015c88:	4604      	mov	r4, r0
 8015c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8015c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015c92:	6083      	str	r3, [r0, #8]
 8015c94:	8181      	strh	r1, [r0, #12]
 8015c96:	6643      	str	r3, [r0, #100]	@ 0x64
 8015c98:	81c2      	strh	r2, [r0, #14]
 8015c9a:	6183      	str	r3, [r0, #24]
 8015c9c:	4619      	mov	r1, r3
 8015c9e:	2208      	movs	r2, #8
 8015ca0:	305c      	adds	r0, #92	@ 0x5c
 8015ca2:	f000 fa1b 	bl	80160dc <memset>
 8015ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8015cdc <std+0x58>)
 8015ca8:	6263      	str	r3, [r4, #36]	@ 0x24
 8015caa:	4b0d      	ldr	r3, [pc, #52]	@ (8015ce0 <std+0x5c>)
 8015cac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015cae:	4b0d      	ldr	r3, [pc, #52]	@ (8015ce4 <std+0x60>)
 8015cb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8015ce8 <std+0x64>)
 8015cb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8015cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8015cec <std+0x68>)
 8015cb8:	6224      	str	r4, [r4, #32]
 8015cba:	429c      	cmp	r4, r3
 8015cbc:	d006      	beq.n	8015ccc <std+0x48>
 8015cbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015cc2:	4294      	cmp	r4, r2
 8015cc4:	d002      	beq.n	8015ccc <std+0x48>
 8015cc6:	33d0      	adds	r3, #208	@ 0xd0
 8015cc8:	429c      	cmp	r4, r3
 8015cca:	d105      	bne.n	8015cd8 <std+0x54>
 8015ccc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cd4:	f000 bad8 	b.w	8016288 <__retarget_lock_init_recursive>
 8015cd8:	bd10      	pop	{r4, pc}
 8015cda:	bf00      	nop
 8015cdc:	08015f2d 	.word	0x08015f2d
 8015ce0:	08015f4f 	.word	0x08015f4f
 8015ce4:	08015f87 	.word	0x08015f87
 8015ce8:	08015fab 	.word	0x08015fab
 8015cec:	2404ff84 	.word	0x2404ff84

08015cf0 <stdio_exit_handler>:
 8015cf0:	4a02      	ldr	r2, [pc, #8]	@ (8015cfc <stdio_exit_handler+0xc>)
 8015cf2:	4903      	ldr	r1, [pc, #12]	@ (8015d00 <stdio_exit_handler+0x10>)
 8015cf4:	4803      	ldr	r0, [pc, #12]	@ (8015d04 <stdio_exit_handler+0x14>)
 8015cf6:	f000 b869 	b.w	8015dcc <_fwalk_sglue>
 8015cfa:	bf00      	nop
 8015cfc:	24000120 	.word	0x24000120
 8015d00:	08016df1 	.word	0x08016df1
 8015d04:	24000130 	.word	0x24000130

08015d08 <cleanup_stdio>:
 8015d08:	6841      	ldr	r1, [r0, #4]
 8015d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8015d3c <cleanup_stdio+0x34>)
 8015d0c:	4299      	cmp	r1, r3
 8015d0e:	b510      	push	{r4, lr}
 8015d10:	4604      	mov	r4, r0
 8015d12:	d001      	beq.n	8015d18 <cleanup_stdio+0x10>
 8015d14:	f001 f86c 	bl	8016df0 <_fflush_r>
 8015d18:	68a1      	ldr	r1, [r4, #8]
 8015d1a:	4b09      	ldr	r3, [pc, #36]	@ (8015d40 <cleanup_stdio+0x38>)
 8015d1c:	4299      	cmp	r1, r3
 8015d1e:	d002      	beq.n	8015d26 <cleanup_stdio+0x1e>
 8015d20:	4620      	mov	r0, r4
 8015d22:	f001 f865 	bl	8016df0 <_fflush_r>
 8015d26:	68e1      	ldr	r1, [r4, #12]
 8015d28:	4b06      	ldr	r3, [pc, #24]	@ (8015d44 <cleanup_stdio+0x3c>)
 8015d2a:	4299      	cmp	r1, r3
 8015d2c:	d004      	beq.n	8015d38 <cleanup_stdio+0x30>
 8015d2e:	4620      	mov	r0, r4
 8015d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d34:	f001 b85c 	b.w	8016df0 <_fflush_r>
 8015d38:	bd10      	pop	{r4, pc}
 8015d3a:	bf00      	nop
 8015d3c:	2404ff84 	.word	0x2404ff84
 8015d40:	2404ffec 	.word	0x2404ffec
 8015d44:	24050054 	.word	0x24050054

08015d48 <global_stdio_init.part.0>:
 8015d48:	b510      	push	{r4, lr}
 8015d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8015d78 <global_stdio_init.part.0+0x30>)
 8015d4c:	4c0b      	ldr	r4, [pc, #44]	@ (8015d7c <global_stdio_init.part.0+0x34>)
 8015d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8015d80 <global_stdio_init.part.0+0x38>)
 8015d50:	601a      	str	r2, [r3, #0]
 8015d52:	4620      	mov	r0, r4
 8015d54:	2200      	movs	r2, #0
 8015d56:	2104      	movs	r1, #4
 8015d58:	f7ff ff94 	bl	8015c84 <std>
 8015d5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015d60:	2201      	movs	r2, #1
 8015d62:	2109      	movs	r1, #9
 8015d64:	f7ff ff8e 	bl	8015c84 <std>
 8015d68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015d6c:	2202      	movs	r2, #2
 8015d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d72:	2112      	movs	r1, #18
 8015d74:	f7ff bf86 	b.w	8015c84 <std>
 8015d78:	240500bc 	.word	0x240500bc
 8015d7c:	2404ff84 	.word	0x2404ff84
 8015d80:	08015cf1 	.word	0x08015cf1

08015d84 <__sfp_lock_acquire>:
 8015d84:	4801      	ldr	r0, [pc, #4]	@ (8015d8c <__sfp_lock_acquire+0x8>)
 8015d86:	f000 ba80 	b.w	801628a <__retarget_lock_acquire_recursive>
 8015d8a:	bf00      	nop
 8015d8c:	240500c5 	.word	0x240500c5

08015d90 <__sfp_lock_release>:
 8015d90:	4801      	ldr	r0, [pc, #4]	@ (8015d98 <__sfp_lock_release+0x8>)
 8015d92:	f000 ba7b 	b.w	801628c <__retarget_lock_release_recursive>
 8015d96:	bf00      	nop
 8015d98:	240500c5 	.word	0x240500c5

08015d9c <__sinit>:
 8015d9c:	b510      	push	{r4, lr}
 8015d9e:	4604      	mov	r4, r0
 8015da0:	f7ff fff0 	bl	8015d84 <__sfp_lock_acquire>
 8015da4:	6a23      	ldr	r3, [r4, #32]
 8015da6:	b11b      	cbz	r3, 8015db0 <__sinit+0x14>
 8015da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dac:	f7ff bff0 	b.w	8015d90 <__sfp_lock_release>
 8015db0:	4b04      	ldr	r3, [pc, #16]	@ (8015dc4 <__sinit+0x28>)
 8015db2:	6223      	str	r3, [r4, #32]
 8015db4:	4b04      	ldr	r3, [pc, #16]	@ (8015dc8 <__sinit+0x2c>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d1f5      	bne.n	8015da8 <__sinit+0xc>
 8015dbc:	f7ff ffc4 	bl	8015d48 <global_stdio_init.part.0>
 8015dc0:	e7f2      	b.n	8015da8 <__sinit+0xc>
 8015dc2:	bf00      	nop
 8015dc4:	08015d09 	.word	0x08015d09
 8015dc8:	240500bc 	.word	0x240500bc

08015dcc <_fwalk_sglue>:
 8015dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015dd0:	4607      	mov	r7, r0
 8015dd2:	4688      	mov	r8, r1
 8015dd4:	4614      	mov	r4, r2
 8015dd6:	2600      	movs	r6, #0
 8015dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8015de0:	d505      	bpl.n	8015dee <_fwalk_sglue+0x22>
 8015de2:	6824      	ldr	r4, [r4, #0]
 8015de4:	2c00      	cmp	r4, #0
 8015de6:	d1f7      	bne.n	8015dd8 <_fwalk_sglue+0xc>
 8015de8:	4630      	mov	r0, r6
 8015dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dee:	89ab      	ldrh	r3, [r5, #12]
 8015df0:	2b01      	cmp	r3, #1
 8015df2:	d907      	bls.n	8015e04 <_fwalk_sglue+0x38>
 8015df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015df8:	3301      	adds	r3, #1
 8015dfa:	d003      	beq.n	8015e04 <_fwalk_sglue+0x38>
 8015dfc:	4629      	mov	r1, r5
 8015dfe:	4638      	mov	r0, r7
 8015e00:	47c0      	blx	r8
 8015e02:	4306      	orrs	r6, r0
 8015e04:	3568      	adds	r5, #104	@ 0x68
 8015e06:	e7e9      	b.n	8015ddc <_fwalk_sglue+0x10>

08015e08 <iprintf>:
 8015e08:	b40f      	push	{r0, r1, r2, r3}
 8015e0a:	b507      	push	{r0, r1, r2, lr}
 8015e0c:	4906      	ldr	r1, [pc, #24]	@ (8015e28 <iprintf+0x20>)
 8015e0e:	ab04      	add	r3, sp, #16
 8015e10:	6808      	ldr	r0, [r1, #0]
 8015e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e16:	6881      	ldr	r1, [r0, #8]
 8015e18:	9301      	str	r3, [sp, #4]
 8015e1a:	f000 fcc1 	bl	80167a0 <_vfiprintf_r>
 8015e1e:	b003      	add	sp, #12
 8015e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e24:	b004      	add	sp, #16
 8015e26:	4770      	bx	lr
 8015e28:	2400012c 	.word	0x2400012c

08015e2c <_puts_r>:
 8015e2c:	6a03      	ldr	r3, [r0, #32]
 8015e2e:	b570      	push	{r4, r5, r6, lr}
 8015e30:	6884      	ldr	r4, [r0, #8]
 8015e32:	4605      	mov	r5, r0
 8015e34:	460e      	mov	r6, r1
 8015e36:	b90b      	cbnz	r3, 8015e3c <_puts_r+0x10>
 8015e38:	f7ff ffb0 	bl	8015d9c <__sinit>
 8015e3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015e3e:	07db      	lsls	r3, r3, #31
 8015e40:	d405      	bmi.n	8015e4e <_puts_r+0x22>
 8015e42:	89a3      	ldrh	r3, [r4, #12]
 8015e44:	0598      	lsls	r0, r3, #22
 8015e46:	d402      	bmi.n	8015e4e <_puts_r+0x22>
 8015e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e4a:	f000 fa1e 	bl	801628a <__retarget_lock_acquire_recursive>
 8015e4e:	89a3      	ldrh	r3, [r4, #12]
 8015e50:	0719      	lsls	r1, r3, #28
 8015e52:	d502      	bpl.n	8015e5a <_puts_r+0x2e>
 8015e54:	6923      	ldr	r3, [r4, #16]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d135      	bne.n	8015ec6 <_puts_r+0x9a>
 8015e5a:	4621      	mov	r1, r4
 8015e5c:	4628      	mov	r0, r5
 8015e5e:	f000 f8e7 	bl	8016030 <__swsetup_r>
 8015e62:	b380      	cbz	r0, 8015ec6 <_puts_r+0x9a>
 8015e64:	f04f 35ff 	mov.w	r5, #4294967295
 8015e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015e6a:	07da      	lsls	r2, r3, #31
 8015e6c:	d405      	bmi.n	8015e7a <_puts_r+0x4e>
 8015e6e:	89a3      	ldrh	r3, [r4, #12]
 8015e70:	059b      	lsls	r3, r3, #22
 8015e72:	d402      	bmi.n	8015e7a <_puts_r+0x4e>
 8015e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e76:	f000 fa09 	bl	801628c <__retarget_lock_release_recursive>
 8015e7a:	4628      	mov	r0, r5
 8015e7c:	bd70      	pop	{r4, r5, r6, pc}
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	da04      	bge.n	8015e8c <_puts_r+0x60>
 8015e82:	69a2      	ldr	r2, [r4, #24]
 8015e84:	429a      	cmp	r2, r3
 8015e86:	dc17      	bgt.n	8015eb8 <_puts_r+0x8c>
 8015e88:	290a      	cmp	r1, #10
 8015e8a:	d015      	beq.n	8015eb8 <_puts_r+0x8c>
 8015e8c:	6823      	ldr	r3, [r4, #0]
 8015e8e:	1c5a      	adds	r2, r3, #1
 8015e90:	6022      	str	r2, [r4, #0]
 8015e92:	7019      	strb	r1, [r3, #0]
 8015e94:	68a3      	ldr	r3, [r4, #8]
 8015e96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015e9a:	3b01      	subs	r3, #1
 8015e9c:	60a3      	str	r3, [r4, #8]
 8015e9e:	2900      	cmp	r1, #0
 8015ea0:	d1ed      	bne.n	8015e7e <_puts_r+0x52>
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	da11      	bge.n	8015eca <_puts_r+0x9e>
 8015ea6:	4622      	mov	r2, r4
 8015ea8:	210a      	movs	r1, #10
 8015eaa:	4628      	mov	r0, r5
 8015eac:	f000 f881 	bl	8015fb2 <__swbuf_r>
 8015eb0:	3001      	adds	r0, #1
 8015eb2:	d0d7      	beq.n	8015e64 <_puts_r+0x38>
 8015eb4:	250a      	movs	r5, #10
 8015eb6:	e7d7      	b.n	8015e68 <_puts_r+0x3c>
 8015eb8:	4622      	mov	r2, r4
 8015eba:	4628      	mov	r0, r5
 8015ebc:	f000 f879 	bl	8015fb2 <__swbuf_r>
 8015ec0:	3001      	adds	r0, #1
 8015ec2:	d1e7      	bne.n	8015e94 <_puts_r+0x68>
 8015ec4:	e7ce      	b.n	8015e64 <_puts_r+0x38>
 8015ec6:	3e01      	subs	r6, #1
 8015ec8:	e7e4      	b.n	8015e94 <_puts_r+0x68>
 8015eca:	6823      	ldr	r3, [r4, #0]
 8015ecc:	1c5a      	adds	r2, r3, #1
 8015ece:	6022      	str	r2, [r4, #0]
 8015ed0:	220a      	movs	r2, #10
 8015ed2:	701a      	strb	r2, [r3, #0]
 8015ed4:	e7ee      	b.n	8015eb4 <_puts_r+0x88>
	...

08015ed8 <puts>:
 8015ed8:	4b02      	ldr	r3, [pc, #8]	@ (8015ee4 <puts+0xc>)
 8015eda:	4601      	mov	r1, r0
 8015edc:	6818      	ldr	r0, [r3, #0]
 8015ede:	f7ff bfa5 	b.w	8015e2c <_puts_r>
 8015ee2:	bf00      	nop
 8015ee4:	2400012c 	.word	0x2400012c

08015ee8 <siprintf>:
 8015ee8:	b40e      	push	{r1, r2, r3}
 8015eea:	b510      	push	{r4, lr}
 8015eec:	b09d      	sub	sp, #116	@ 0x74
 8015eee:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015ef0:	9002      	str	r0, [sp, #8]
 8015ef2:	9006      	str	r0, [sp, #24]
 8015ef4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015ef8:	480a      	ldr	r0, [pc, #40]	@ (8015f24 <siprintf+0x3c>)
 8015efa:	9107      	str	r1, [sp, #28]
 8015efc:	9104      	str	r1, [sp, #16]
 8015efe:	490a      	ldr	r1, [pc, #40]	@ (8015f28 <siprintf+0x40>)
 8015f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f04:	9105      	str	r1, [sp, #20]
 8015f06:	2400      	movs	r4, #0
 8015f08:	a902      	add	r1, sp, #8
 8015f0a:	6800      	ldr	r0, [r0, #0]
 8015f0c:	9301      	str	r3, [sp, #4]
 8015f0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015f10:	f000 fb20 	bl	8016554 <_svfiprintf_r>
 8015f14:	9b02      	ldr	r3, [sp, #8]
 8015f16:	701c      	strb	r4, [r3, #0]
 8015f18:	b01d      	add	sp, #116	@ 0x74
 8015f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f1e:	b003      	add	sp, #12
 8015f20:	4770      	bx	lr
 8015f22:	bf00      	nop
 8015f24:	2400012c 	.word	0x2400012c
 8015f28:	ffff0208 	.word	0xffff0208

08015f2c <__sread>:
 8015f2c:	b510      	push	{r4, lr}
 8015f2e:	460c      	mov	r4, r1
 8015f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f34:	f000 f95a 	bl	80161ec <_read_r>
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	bfab      	itete	ge
 8015f3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8015f40:	181b      	addge	r3, r3, r0
 8015f42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015f46:	bfac      	ite	ge
 8015f48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015f4a:	81a3      	strhlt	r3, [r4, #12]
 8015f4c:	bd10      	pop	{r4, pc}

08015f4e <__swrite>:
 8015f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f52:	461f      	mov	r7, r3
 8015f54:	898b      	ldrh	r3, [r1, #12]
 8015f56:	05db      	lsls	r3, r3, #23
 8015f58:	4605      	mov	r5, r0
 8015f5a:	460c      	mov	r4, r1
 8015f5c:	4616      	mov	r6, r2
 8015f5e:	d505      	bpl.n	8015f6c <__swrite+0x1e>
 8015f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f64:	2302      	movs	r3, #2
 8015f66:	2200      	movs	r2, #0
 8015f68:	f000 f92e 	bl	80161c8 <_lseek_r>
 8015f6c:	89a3      	ldrh	r3, [r4, #12]
 8015f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015f76:	81a3      	strh	r3, [r4, #12]
 8015f78:	4632      	mov	r2, r6
 8015f7a:	463b      	mov	r3, r7
 8015f7c:	4628      	mov	r0, r5
 8015f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f82:	f000 b945 	b.w	8016210 <_write_r>

08015f86 <__sseek>:
 8015f86:	b510      	push	{r4, lr}
 8015f88:	460c      	mov	r4, r1
 8015f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f8e:	f000 f91b 	bl	80161c8 <_lseek_r>
 8015f92:	1c43      	adds	r3, r0, #1
 8015f94:	89a3      	ldrh	r3, [r4, #12]
 8015f96:	bf15      	itete	ne
 8015f98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015f9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015f9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015fa2:	81a3      	strheq	r3, [r4, #12]
 8015fa4:	bf18      	it	ne
 8015fa6:	81a3      	strhne	r3, [r4, #12]
 8015fa8:	bd10      	pop	{r4, pc}

08015faa <__sclose>:
 8015faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fae:	f000 b89d 	b.w	80160ec <_close_r>

08015fb2 <__swbuf_r>:
 8015fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fb4:	460e      	mov	r6, r1
 8015fb6:	4614      	mov	r4, r2
 8015fb8:	4605      	mov	r5, r0
 8015fba:	b118      	cbz	r0, 8015fc4 <__swbuf_r+0x12>
 8015fbc:	6a03      	ldr	r3, [r0, #32]
 8015fbe:	b90b      	cbnz	r3, 8015fc4 <__swbuf_r+0x12>
 8015fc0:	f7ff feec 	bl	8015d9c <__sinit>
 8015fc4:	69a3      	ldr	r3, [r4, #24]
 8015fc6:	60a3      	str	r3, [r4, #8]
 8015fc8:	89a3      	ldrh	r3, [r4, #12]
 8015fca:	071a      	lsls	r2, r3, #28
 8015fcc:	d501      	bpl.n	8015fd2 <__swbuf_r+0x20>
 8015fce:	6923      	ldr	r3, [r4, #16]
 8015fd0:	b943      	cbnz	r3, 8015fe4 <__swbuf_r+0x32>
 8015fd2:	4621      	mov	r1, r4
 8015fd4:	4628      	mov	r0, r5
 8015fd6:	f000 f82b 	bl	8016030 <__swsetup_r>
 8015fda:	b118      	cbz	r0, 8015fe4 <__swbuf_r+0x32>
 8015fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8015fe0:	4638      	mov	r0, r7
 8015fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fe4:	6823      	ldr	r3, [r4, #0]
 8015fe6:	6922      	ldr	r2, [r4, #16]
 8015fe8:	1a98      	subs	r0, r3, r2
 8015fea:	6963      	ldr	r3, [r4, #20]
 8015fec:	b2f6      	uxtb	r6, r6
 8015fee:	4283      	cmp	r3, r0
 8015ff0:	4637      	mov	r7, r6
 8015ff2:	dc05      	bgt.n	8016000 <__swbuf_r+0x4e>
 8015ff4:	4621      	mov	r1, r4
 8015ff6:	4628      	mov	r0, r5
 8015ff8:	f000 fefa 	bl	8016df0 <_fflush_r>
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	d1ed      	bne.n	8015fdc <__swbuf_r+0x2a>
 8016000:	68a3      	ldr	r3, [r4, #8]
 8016002:	3b01      	subs	r3, #1
 8016004:	60a3      	str	r3, [r4, #8]
 8016006:	6823      	ldr	r3, [r4, #0]
 8016008:	1c5a      	adds	r2, r3, #1
 801600a:	6022      	str	r2, [r4, #0]
 801600c:	701e      	strb	r6, [r3, #0]
 801600e:	6962      	ldr	r2, [r4, #20]
 8016010:	1c43      	adds	r3, r0, #1
 8016012:	429a      	cmp	r2, r3
 8016014:	d004      	beq.n	8016020 <__swbuf_r+0x6e>
 8016016:	89a3      	ldrh	r3, [r4, #12]
 8016018:	07db      	lsls	r3, r3, #31
 801601a:	d5e1      	bpl.n	8015fe0 <__swbuf_r+0x2e>
 801601c:	2e0a      	cmp	r6, #10
 801601e:	d1df      	bne.n	8015fe0 <__swbuf_r+0x2e>
 8016020:	4621      	mov	r1, r4
 8016022:	4628      	mov	r0, r5
 8016024:	f000 fee4 	bl	8016df0 <_fflush_r>
 8016028:	2800      	cmp	r0, #0
 801602a:	d0d9      	beq.n	8015fe0 <__swbuf_r+0x2e>
 801602c:	e7d6      	b.n	8015fdc <__swbuf_r+0x2a>
	...

08016030 <__swsetup_r>:
 8016030:	b538      	push	{r3, r4, r5, lr}
 8016032:	4b29      	ldr	r3, [pc, #164]	@ (80160d8 <__swsetup_r+0xa8>)
 8016034:	4605      	mov	r5, r0
 8016036:	6818      	ldr	r0, [r3, #0]
 8016038:	460c      	mov	r4, r1
 801603a:	b118      	cbz	r0, 8016044 <__swsetup_r+0x14>
 801603c:	6a03      	ldr	r3, [r0, #32]
 801603e:	b90b      	cbnz	r3, 8016044 <__swsetup_r+0x14>
 8016040:	f7ff feac 	bl	8015d9c <__sinit>
 8016044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016048:	0719      	lsls	r1, r3, #28
 801604a:	d422      	bmi.n	8016092 <__swsetup_r+0x62>
 801604c:	06da      	lsls	r2, r3, #27
 801604e:	d407      	bmi.n	8016060 <__swsetup_r+0x30>
 8016050:	2209      	movs	r2, #9
 8016052:	602a      	str	r2, [r5, #0]
 8016054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016058:	81a3      	strh	r3, [r4, #12]
 801605a:	f04f 30ff 	mov.w	r0, #4294967295
 801605e:	e033      	b.n	80160c8 <__swsetup_r+0x98>
 8016060:	0758      	lsls	r0, r3, #29
 8016062:	d512      	bpl.n	801608a <__swsetup_r+0x5a>
 8016064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016066:	b141      	cbz	r1, 801607a <__swsetup_r+0x4a>
 8016068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801606c:	4299      	cmp	r1, r3
 801606e:	d002      	beq.n	8016076 <__swsetup_r+0x46>
 8016070:	4628      	mov	r0, r5
 8016072:	f000 f91b 	bl	80162ac <_free_r>
 8016076:	2300      	movs	r3, #0
 8016078:	6363      	str	r3, [r4, #52]	@ 0x34
 801607a:	89a3      	ldrh	r3, [r4, #12]
 801607c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016080:	81a3      	strh	r3, [r4, #12]
 8016082:	2300      	movs	r3, #0
 8016084:	6063      	str	r3, [r4, #4]
 8016086:	6923      	ldr	r3, [r4, #16]
 8016088:	6023      	str	r3, [r4, #0]
 801608a:	89a3      	ldrh	r3, [r4, #12]
 801608c:	f043 0308 	orr.w	r3, r3, #8
 8016090:	81a3      	strh	r3, [r4, #12]
 8016092:	6923      	ldr	r3, [r4, #16]
 8016094:	b94b      	cbnz	r3, 80160aa <__swsetup_r+0x7a>
 8016096:	89a3      	ldrh	r3, [r4, #12]
 8016098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801609c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80160a0:	d003      	beq.n	80160aa <__swsetup_r+0x7a>
 80160a2:	4621      	mov	r1, r4
 80160a4:	4628      	mov	r0, r5
 80160a6:	f000 fef1 	bl	8016e8c <__smakebuf_r>
 80160aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160ae:	f013 0201 	ands.w	r2, r3, #1
 80160b2:	d00a      	beq.n	80160ca <__swsetup_r+0x9a>
 80160b4:	2200      	movs	r2, #0
 80160b6:	60a2      	str	r2, [r4, #8]
 80160b8:	6962      	ldr	r2, [r4, #20]
 80160ba:	4252      	negs	r2, r2
 80160bc:	61a2      	str	r2, [r4, #24]
 80160be:	6922      	ldr	r2, [r4, #16]
 80160c0:	b942      	cbnz	r2, 80160d4 <__swsetup_r+0xa4>
 80160c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80160c6:	d1c5      	bne.n	8016054 <__swsetup_r+0x24>
 80160c8:	bd38      	pop	{r3, r4, r5, pc}
 80160ca:	0799      	lsls	r1, r3, #30
 80160cc:	bf58      	it	pl
 80160ce:	6962      	ldrpl	r2, [r4, #20]
 80160d0:	60a2      	str	r2, [r4, #8]
 80160d2:	e7f4      	b.n	80160be <__swsetup_r+0x8e>
 80160d4:	2000      	movs	r0, #0
 80160d6:	e7f7      	b.n	80160c8 <__swsetup_r+0x98>
 80160d8:	2400012c 	.word	0x2400012c

080160dc <memset>:
 80160dc:	4402      	add	r2, r0
 80160de:	4603      	mov	r3, r0
 80160e0:	4293      	cmp	r3, r2
 80160e2:	d100      	bne.n	80160e6 <memset+0xa>
 80160e4:	4770      	bx	lr
 80160e6:	f803 1b01 	strb.w	r1, [r3], #1
 80160ea:	e7f9      	b.n	80160e0 <memset+0x4>

080160ec <_close_r>:
 80160ec:	b538      	push	{r3, r4, r5, lr}
 80160ee:	4d06      	ldr	r5, [pc, #24]	@ (8016108 <_close_r+0x1c>)
 80160f0:	2300      	movs	r3, #0
 80160f2:	4604      	mov	r4, r0
 80160f4:	4608      	mov	r0, r1
 80160f6:	602b      	str	r3, [r5, #0]
 80160f8:	f7eb fc21 	bl	800193e <_close>
 80160fc:	1c43      	adds	r3, r0, #1
 80160fe:	d102      	bne.n	8016106 <_close_r+0x1a>
 8016100:	682b      	ldr	r3, [r5, #0]
 8016102:	b103      	cbz	r3, 8016106 <_close_r+0x1a>
 8016104:	6023      	str	r3, [r4, #0]
 8016106:	bd38      	pop	{r3, r4, r5, pc}
 8016108:	240500c0 	.word	0x240500c0

0801610c <_reclaim_reent>:
 801610c:	4b2d      	ldr	r3, [pc, #180]	@ (80161c4 <_reclaim_reent+0xb8>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	4283      	cmp	r3, r0
 8016112:	b570      	push	{r4, r5, r6, lr}
 8016114:	4604      	mov	r4, r0
 8016116:	d053      	beq.n	80161c0 <_reclaim_reent+0xb4>
 8016118:	69c3      	ldr	r3, [r0, #28]
 801611a:	b31b      	cbz	r3, 8016164 <_reclaim_reent+0x58>
 801611c:	68db      	ldr	r3, [r3, #12]
 801611e:	b163      	cbz	r3, 801613a <_reclaim_reent+0x2e>
 8016120:	2500      	movs	r5, #0
 8016122:	69e3      	ldr	r3, [r4, #28]
 8016124:	68db      	ldr	r3, [r3, #12]
 8016126:	5959      	ldr	r1, [r3, r5]
 8016128:	b9b1      	cbnz	r1, 8016158 <_reclaim_reent+0x4c>
 801612a:	3504      	adds	r5, #4
 801612c:	2d80      	cmp	r5, #128	@ 0x80
 801612e:	d1f8      	bne.n	8016122 <_reclaim_reent+0x16>
 8016130:	69e3      	ldr	r3, [r4, #28]
 8016132:	4620      	mov	r0, r4
 8016134:	68d9      	ldr	r1, [r3, #12]
 8016136:	f000 f8b9 	bl	80162ac <_free_r>
 801613a:	69e3      	ldr	r3, [r4, #28]
 801613c:	6819      	ldr	r1, [r3, #0]
 801613e:	b111      	cbz	r1, 8016146 <_reclaim_reent+0x3a>
 8016140:	4620      	mov	r0, r4
 8016142:	f000 f8b3 	bl	80162ac <_free_r>
 8016146:	69e3      	ldr	r3, [r4, #28]
 8016148:	689d      	ldr	r5, [r3, #8]
 801614a:	b15d      	cbz	r5, 8016164 <_reclaim_reent+0x58>
 801614c:	4629      	mov	r1, r5
 801614e:	4620      	mov	r0, r4
 8016150:	682d      	ldr	r5, [r5, #0]
 8016152:	f000 f8ab 	bl	80162ac <_free_r>
 8016156:	e7f8      	b.n	801614a <_reclaim_reent+0x3e>
 8016158:	680e      	ldr	r6, [r1, #0]
 801615a:	4620      	mov	r0, r4
 801615c:	f000 f8a6 	bl	80162ac <_free_r>
 8016160:	4631      	mov	r1, r6
 8016162:	e7e1      	b.n	8016128 <_reclaim_reent+0x1c>
 8016164:	6961      	ldr	r1, [r4, #20]
 8016166:	b111      	cbz	r1, 801616e <_reclaim_reent+0x62>
 8016168:	4620      	mov	r0, r4
 801616a:	f000 f89f 	bl	80162ac <_free_r>
 801616e:	69e1      	ldr	r1, [r4, #28]
 8016170:	b111      	cbz	r1, 8016178 <_reclaim_reent+0x6c>
 8016172:	4620      	mov	r0, r4
 8016174:	f000 f89a 	bl	80162ac <_free_r>
 8016178:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801617a:	b111      	cbz	r1, 8016182 <_reclaim_reent+0x76>
 801617c:	4620      	mov	r0, r4
 801617e:	f000 f895 	bl	80162ac <_free_r>
 8016182:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016184:	b111      	cbz	r1, 801618c <_reclaim_reent+0x80>
 8016186:	4620      	mov	r0, r4
 8016188:	f000 f890 	bl	80162ac <_free_r>
 801618c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801618e:	b111      	cbz	r1, 8016196 <_reclaim_reent+0x8a>
 8016190:	4620      	mov	r0, r4
 8016192:	f000 f88b 	bl	80162ac <_free_r>
 8016196:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016198:	b111      	cbz	r1, 80161a0 <_reclaim_reent+0x94>
 801619a:	4620      	mov	r0, r4
 801619c:	f000 f886 	bl	80162ac <_free_r>
 80161a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80161a2:	b111      	cbz	r1, 80161aa <_reclaim_reent+0x9e>
 80161a4:	4620      	mov	r0, r4
 80161a6:	f000 f881 	bl	80162ac <_free_r>
 80161aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80161ac:	b111      	cbz	r1, 80161b4 <_reclaim_reent+0xa8>
 80161ae:	4620      	mov	r0, r4
 80161b0:	f000 f87c 	bl	80162ac <_free_r>
 80161b4:	6a23      	ldr	r3, [r4, #32]
 80161b6:	b11b      	cbz	r3, 80161c0 <_reclaim_reent+0xb4>
 80161b8:	4620      	mov	r0, r4
 80161ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161be:	4718      	bx	r3
 80161c0:	bd70      	pop	{r4, r5, r6, pc}
 80161c2:	bf00      	nop
 80161c4:	2400012c 	.word	0x2400012c

080161c8 <_lseek_r>:
 80161c8:	b538      	push	{r3, r4, r5, lr}
 80161ca:	4d07      	ldr	r5, [pc, #28]	@ (80161e8 <_lseek_r+0x20>)
 80161cc:	4604      	mov	r4, r0
 80161ce:	4608      	mov	r0, r1
 80161d0:	4611      	mov	r1, r2
 80161d2:	2200      	movs	r2, #0
 80161d4:	602a      	str	r2, [r5, #0]
 80161d6:	461a      	mov	r2, r3
 80161d8:	f7eb fbd8 	bl	800198c <_lseek>
 80161dc:	1c43      	adds	r3, r0, #1
 80161de:	d102      	bne.n	80161e6 <_lseek_r+0x1e>
 80161e0:	682b      	ldr	r3, [r5, #0]
 80161e2:	b103      	cbz	r3, 80161e6 <_lseek_r+0x1e>
 80161e4:	6023      	str	r3, [r4, #0]
 80161e6:	bd38      	pop	{r3, r4, r5, pc}
 80161e8:	240500c0 	.word	0x240500c0

080161ec <_read_r>:
 80161ec:	b538      	push	{r3, r4, r5, lr}
 80161ee:	4d07      	ldr	r5, [pc, #28]	@ (801620c <_read_r+0x20>)
 80161f0:	4604      	mov	r4, r0
 80161f2:	4608      	mov	r0, r1
 80161f4:	4611      	mov	r1, r2
 80161f6:	2200      	movs	r2, #0
 80161f8:	602a      	str	r2, [r5, #0]
 80161fa:	461a      	mov	r2, r3
 80161fc:	f7eb fb66 	bl	80018cc <_read>
 8016200:	1c43      	adds	r3, r0, #1
 8016202:	d102      	bne.n	801620a <_read_r+0x1e>
 8016204:	682b      	ldr	r3, [r5, #0]
 8016206:	b103      	cbz	r3, 801620a <_read_r+0x1e>
 8016208:	6023      	str	r3, [r4, #0]
 801620a:	bd38      	pop	{r3, r4, r5, pc}
 801620c:	240500c0 	.word	0x240500c0

08016210 <_write_r>:
 8016210:	b538      	push	{r3, r4, r5, lr}
 8016212:	4d07      	ldr	r5, [pc, #28]	@ (8016230 <_write_r+0x20>)
 8016214:	4604      	mov	r4, r0
 8016216:	4608      	mov	r0, r1
 8016218:	4611      	mov	r1, r2
 801621a:	2200      	movs	r2, #0
 801621c:	602a      	str	r2, [r5, #0]
 801621e:	461a      	mov	r2, r3
 8016220:	f7eb fb71 	bl	8001906 <_write>
 8016224:	1c43      	adds	r3, r0, #1
 8016226:	d102      	bne.n	801622e <_write_r+0x1e>
 8016228:	682b      	ldr	r3, [r5, #0]
 801622a:	b103      	cbz	r3, 801622e <_write_r+0x1e>
 801622c:	6023      	str	r3, [r4, #0]
 801622e:	bd38      	pop	{r3, r4, r5, pc}
 8016230:	240500c0 	.word	0x240500c0

08016234 <__errno>:
 8016234:	4b01      	ldr	r3, [pc, #4]	@ (801623c <__errno+0x8>)
 8016236:	6818      	ldr	r0, [r3, #0]
 8016238:	4770      	bx	lr
 801623a:	bf00      	nop
 801623c:	2400012c 	.word	0x2400012c

08016240 <__libc_init_array>:
 8016240:	b570      	push	{r4, r5, r6, lr}
 8016242:	4d0d      	ldr	r5, [pc, #52]	@ (8016278 <__libc_init_array+0x38>)
 8016244:	4c0d      	ldr	r4, [pc, #52]	@ (801627c <__libc_init_array+0x3c>)
 8016246:	1b64      	subs	r4, r4, r5
 8016248:	10a4      	asrs	r4, r4, #2
 801624a:	2600      	movs	r6, #0
 801624c:	42a6      	cmp	r6, r4
 801624e:	d109      	bne.n	8016264 <__libc_init_array+0x24>
 8016250:	4d0b      	ldr	r5, [pc, #44]	@ (8016280 <__libc_init_array+0x40>)
 8016252:	4c0c      	ldr	r4, [pc, #48]	@ (8016284 <__libc_init_array+0x44>)
 8016254:	f000 fed8 	bl	8017008 <_init>
 8016258:	1b64      	subs	r4, r4, r5
 801625a:	10a4      	asrs	r4, r4, #2
 801625c:	2600      	movs	r6, #0
 801625e:	42a6      	cmp	r6, r4
 8016260:	d105      	bne.n	801626e <__libc_init_array+0x2e>
 8016262:	bd70      	pop	{r4, r5, r6, pc}
 8016264:	f855 3b04 	ldr.w	r3, [r5], #4
 8016268:	4798      	blx	r3
 801626a:	3601      	adds	r6, #1
 801626c:	e7ee      	b.n	801624c <__libc_init_array+0xc>
 801626e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016272:	4798      	blx	r3
 8016274:	3601      	adds	r6, #1
 8016276:	e7f2      	b.n	801625e <__libc_init_array+0x1e>
 8016278:	08017270 	.word	0x08017270
 801627c:	08017270 	.word	0x08017270
 8016280:	08017270 	.word	0x08017270
 8016284:	08017274 	.word	0x08017274

08016288 <__retarget_lock_init_recursive>:
 8016288:	4770      	bx	lr

0801628a <__retarget_lock_acquire_recursive>:
 801628a:	4770      	bx	lr

0801628c <__retarget_lock_release_recursive>:
 801628c:	4770      	bx	lr

0801628e <memcpy>:
 801628e:	440a      	add	r2, r1
 8016290:	4291      	cmp	r1, r2
 8016292:	f100 33ff 	add.w	r3, r0, #4294967295
 8016296:	d100      	bne.n	801629a <memcpy+0xc>
 8016298:	4770      	bx	lr
 801629a:	b510      	push	{r4, lr}
 801629c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80162a4:	4291      	cmp	r1, r2
 80162a6:	d1f9      	bne.n	801629c <memcpy+0xe>
 80162a8:	bd10      	pop	{r4, pc}
	...

080162ac <_free_r>:
 80162ac:	b538      	push	{r3, r4, r5, lr}
 80162ae:	4605      	mov	r5, r0
 80162b0:	2900      	cmp	r1, #0
 80162b2:	d041      	beq.n	8016338 <_free_r+0x8c>
 80162b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162b8:	1f0c      	subs	r4, r1, #4
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	bfb8      	it	lt
 80162be:	18e4      	addlt	r4, r4, r3
 80162c0:	f000 f8e0 	bl	8016484 <__malloc_lock>
 80162c4:	4a1d      	ldr	r2, [pc, #116]	@ (801633c <_free_r+0x90>)
 80162c6:	6813      	ldr	r3, [r2, #0]
 80162c8:	b933      	cbnz	r3, 80162d8 <_free_r+0x2c>
 80162ca:	6063      	str	r3, [r4, #4]
 80162cc:	6014      	str	r4, [r2, #0]
 80162ce:	4628      	mov	r0, r5
 80162d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162d4:	f000 b8dc 	b.w	8016490 <__malloc_unlock>
 80162d8:	42a3      	cmp	r3, r4
 80162da:	d908      	bls.n	80162ee <_free_r+0x42>
 80162dc:	6820      	ldr	r0, [r4, #0]
 80162de:	1821      	adds	r1, r4, r0
 80162e0:	428b      	cmp	r3, r1
 80162e2:	bf01      	itttt	eq
 80162e4:	6819      	ldreq	r1, [r3, #0]
 80162e6:	685b      	ldreq	r3, [r3, #4]
 80162e8:	1809      	addeq	r1, r1, r0
 80162ea:	6021      	streq	r1, [r4, #0]
 80162ec:	e7ed      	b.n	80162ca <_free_r+0x1e>
 80162ee:	461a      	mov	r2, r3
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	b10b      	cbz	r3, 80162f8 <_free_r+0x4c>
 80162f4:	42a3      	cmp	r3, r4
 80162f6:	d9fa      	bls.n	80162ee <_free_r+0x42>
 80162f8:	6811      	ldr	r1, [r2, #0]
 80162fa:	1850      	adds	r0, r2, r1
 80162fc:	42a0      	cmp	r0, r4
 80162fe:	d10b      	bne.n	8016318 <_free_r+0x6c>
 8016300:	6820      	ldr	r0, [r4, #0]
 8016302:	4401      	add	r1, r0
 8016304:	1850      	adds	r0, r2, r1
 8016306:	4283      	cmp	r3, r0
 8016308:	6011      	str	r1, [r2, #0]
 801630a:	d1e0      	bne.n	80162ce <_free_r+0x22>
 801630c:	6818      	ldr	r0, [r3, #0]
 801630e:	685b      	ldr	r3, [r3, #4]
 8016310:	6053      	str	r3, [r2, #4]
 8016312:	4408      	add	r0, r1
 8016314:	6010      	str	r0, [r2, #0]
 8016316:	e7da      	b.n	80162ce <_free_r+0x22>
 8016318:	d902      	bls.n	8016320 <_free_r+0x74>
 801631a:	230c      	movs	r3, #12
 801631c:	602b      	str	r3, [r5, #0]
 801631e:	e7d6      	b.n	80162ce <_free_r+0x22>
 8016320:	6820      	ldr	r0, [r4, #0]
 8016322:	1821      	adds	r1, r4, r0
 8016324:	428b      	cmp	r3, r1
 8016326:	bf04      	itt	eq
 8016328:	6819      	ldreq	r1, [r3, #0]
 801632a:	685b      	ldreq	r3, [r3, #4]
 801632c:	6063      	str	r3, [r4, #4]
 801632e:	bf04      	itt	eq
 8016330:	1809      	addeq	r1, r1, r0
 8016332:	6021      	streq	r1, [r4, #0]
 8016334:	6054      	str	r4, [r2, #4]
 8016336:	e7ca      	b.n	80162ce <_free_r+0x22>
 8016338:	bd38      	pop	{r3, r4, r5, pc}
 801633a:	bf00      	nop
 801633c:	240500cc 	.word	0x240500cc

08016340 <sbrk_aligned>:
 8016340:	b570      	push	{r4, r5, r6, lr}
 8016342:	4e0f      	ldr	r6, [pc, #60]	@ (8016380 <sbrk_aligned+0x40>)
 8016344:	460c      	mov	r4, r1
 8016346:	6831      	ldr	r1, [r6, #0]
 8016348:	4605      	mov	r5, r0
 801634a:	b911      	cbnz	r1, 8016352 <sbrk_aligned+0x12>
 801634c:	f000 fe16 	bl	8016f7c <_sbrk_r>
 8016350:	6030      	str	r0, [r6, #0]
 8016352:	4621      	mov	r1, r4
 8016354:	4628      	mov	r0, r5
 8016356:	f000 fe11 	bl	8016f7c <_sbrk_r>
 801635a:	1c43      	adds	r3, r0, #1
 801635c:	d103      	bne.n	8016366 <sbrk_aligned+0x26>
 801635e:	f04f 34ff 	mov.w	r4, #4294967295
 8016362:	4620      	mov	r0, r4
 8016364:	bd70      	pop	{r4, r5, r6, pc}
 8016366:	1cc4      	adds	r4, r0, #3
 8016368:	f024 0403 	bic.w	r4, r4, #3
 801636c:	42a0      	cmp	r0, r4
 801636e:	d0f8      	beq.n	8016362 <sbrk_aligned+0x22>
 8016370:	1a21      	subs	r1, r4, r0
 8016372:	4628      	mov	r0, r5
 8016374:	f000 fe02 	bl	8016f7c <_sbrk_r>
 8016378:	3001      	adds	r0, #1
 801637a:	d1f2      	bne.n	8016362 <sbrk_aligned+0x22>
 801637c:	e7ef      	b.n	801635e <sbrk_aligned+0x1e>
 801637e:	bf00      	nop
 8016380:	240500c8 	.word	0x240500c8

08016384 <_malloc_r>:
 8016384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016388:	1ccd      	adds	r5, r1, #3
 801638a:	f025 0503 	bic.w	r5, r5, #3
 801638e:	3508      	adds	r5, #8
 8016390:	2d0c      	cmp	r5, #12
 8016392:	bf38      	it	cc
 8016394:	250c      	movcc	r5, #12
 8016396:	2d00      	cmp	r5, #0
 8016398:	4606      	mov	r6, r0
 801639a:	db01      	blt.n	80163a0 <_malloc_r+0x1c>
 801639c:	42a9      	cmp	r1, r5
 801639e:	d904      	bls.n	80163aa <_malloc_r+0x26>
 80163a0:	230c      	movs	r3, #12
 80163a2:	6033      	str	r3, [r6, #0]
 80163a4:	2000      	movs	r0, #0
 80163a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016480 <_malloc_r+0xfc>
 80163ae:	f000 f869 	bl	8016484 <__malloc_lock>
 80163b2:	f8d8 3000 	ldr.w	r3, [r8]
 80163b6:	461c      	mov	r4, r3
 80163b8:	bb44      	cbnz	r4, 801640c <_malloc_r+0x88>
 80163ba:	4629      	mov	r1, r5
 80163bc:	4630      	mov	r0, r6
 80163be:	f7ff ffbf 	bl	8016340 <sbrk_aligned>
 80163c2:	1c43      	adds	r3, r0, #1
 80163c4:	4604      	mov	r4, r0
 80163c6:	d158      	bne.n	801647a <_malloc_r+0xf6>
 80163c8:	f8d8 4000 	ldr.w	r4, [r8]
 80163cc:	4627      	mov	r7, r4
 80163ce:	2f00      	cmp	r7, #0
 80163d0:	d143      	bne.n	801645a <_malloc_r+0xd6>
 80163d2:	2c00      	cmp	r4, #0
 80163d4:	d04b      	beq.n	801646e <_malloc_r+0xea>
 80163d6:	6823      	ldr	r3, [r4, #0]
 80163d8:	4639      	mov	r1, r7
 80163da:	4630      	mov	r0, r6
 80163dc:	eb04 0903 	add.w	r9, r4, r3
 80163e0:	f000 fdcc 	bl	8016f7c <_sbrk_r>
 80163e4:	4581      	cmp	r9, r0
 80163e6:	d142      	bne.n	801646e <_malloc_r+0xea>
 80163e8:	6821      	ldr	r1, [r4, #0]
 80163ea:	1a6d      	subs	r5, r5, r1
 80163ec:	4629      	mov	r1, r5
 80163ee:	4630      	mov	r0, r6
 80163f0:	f7ff ffa6 	bl	8016340 <sbrk_aligned>
 80163f4:	3001      	adds	r0, #1
 80163f6:	d03a      	beq.n	801646e <_malloc_r+0xea>
 80163f8:	6823      	ldr	r3, [r4, #0]
 80163fa:	442b      	add	r3, r5
 80163fc:	6023      	str	r3, [r4, #0]
 80163fe:	f8d8 3000 	ldr.w	r3, [r8]
 8016402:	685a      	ldr	r2, [r3, #4]
 8016404:	bb62      	cbnz	r2, 8016460 <_malloc_r+0xdc>
 8016406:	f8c8 7000 	str.w	r7, [r8]
 801640a:	e00f      	b.n	801642c <_malloc_r+0xa8>
 801640c:	6822      	ldr	r2, [r4, #0]
 801640e:	1b52      	subs	r2, r2, r5
 8016410:	d420      	bmi.n	8016454 <_malloc_r+0xd0>
 8016412:	2a0b      	cmp	r2, #11
 8016414:	d917      	bls.n	8016446 <_malloc_r+0xc2>
 8016416:	1961      	adds	r1, r4, r5
 8016418:	42a3      	cmp	r3, r4
 801641a:	6025      	str	r5, [r4, #0]
 801641c:	bf18      	it	ne
 801641e:	6059      	strne	r1, [r3, #4]
 8016420:	6863      	ldr	r3, [r4, #4]
 8016422:	bf08      	it	eq
 8016424:	f8c8 1000 	streq.w	r1, [r8]
 8016428:	5162      	str	r2, [r4, r5]
 801642a:	604b      	str	r3, [r1, #4]
 801642c:	4630      	mov	r0, r6
 801642e:	f000 f82f 	bl	8016490 <__malloc_unlock>
 8016432:	f104 000b 	add.w	r0, r4, #11
 8016436:	1d23      	adds	r3, r4, #4
 8016438:	f020 0007 	bic.w	r0, r0, #7
 801643c:	1ac2      	subs	r2, r0, r3
 801643e:	bf1c      	itt	ne
 8016440:	1a1b      	subne	r3, r3, r0
 8016442:	50a3      	strne	r3, [r4, r2]
 8016444:	e7af      	b.n	80163a6 <_malloc_r+0x22>
 8016446:	6862      	ldr	r2, [r4, #4]
 8016448:	42a3      	cmp	r3, r4
 801644a:	bf0c      	ite	eq
 801644c:	f8c8 2000 	streq.w	r2, [r8]
 8016450:	605a      	strne	r2, [r3, #4]
 8016452:	e7eb      	b.n	801642c <_malloc_r+0xa8>
 8016454:	4623      	mov	r3, r4
 8016456:	6864      	ldr	r4, [r4, #4]
 8016458:	e7ae      	b.n	80163b8 <_malloc_r+0x34>
 801645a:	463c      	mov	r4, r7
 801645c:	687f      	ldr	r7, [r7, #4]
 801645e:	e7b6      	b.n	80163ce <_malloc_r+0x4a>
 8016460:	461a      	mov	r2, r3
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	42a3      	cmp	r3, r4
 8016466:	d1fb      	bne.n	8016460 <_malloc_r+0xdc>
 8016468:	2300      	movs	r3, #0
 801646a:	6053      	str	r3, [r2, #4]
 801646c:	e7de      	b.n	801642c <_malloc_r+0xa8>
 801646e:	230c      	movs	r3, #12
 8016470:	6033      	str	r3, [r6, #0]
 8016472:	4630      	mov	r0, r6
 8016474:	f000 f80c 	bl	8016490 <__malloc_unlock>
 8016478:	e794      	b.n	80163a4 <_malloc_r+0x20>
 801647a:	6005      	str	r5, [r0, #0]
 801647c:	e7d6      	b.n	801642c <_malloc_r+0xa8>
 801647e:	bf00      	nop
 8016480:	240500cc 	.word	0x240500cc

08016484 <__malloc_lock>:
 8016484:	4801      	ldr	r0, [pc, #4]	@ (801648c <__malloc_lock+0x8>)
 8016486:	f7ff bf00 	b.w	801628a <__retarget_lock_acquire_recursive>
 801648a:	bf00      	nop
 801648c:	240500c4 	.word	0x240500c4

08016490 <__malloc_unlock>:
 8016490:	4801      	ldr	r0, [pc, #4]	@ (8016498 <__malloc_unlock+0x8>)
 8016492:	f7ff befb 	b.w	801628c <__retarget_lock_release_recursive>
 8016496:	bf00      	nop
 8016498:	240500c4 	.word	0x240500c4

0801649c <__ssputs_r>:
 801649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164a0:	688e      	ldr	r6, [r1, #8]
 80164a2:	461f      	mov	r7, r3
 80164a4:	42be      	cmp	r6, r7
 80164a6:	680b      	ldr	r3, [r1, #0]
 80164a8:	4682      	mov	sl, r0
 80164aa:	460c      	mov	r4, r1
 80164ac:	4690      	mov	r8, r2
 80164ae:	d82d      	bhi.n	801650c <__ssputs_r+0x70>
 80164b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80164b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80164b8:	d026      	beq.n	8016508 <__ssputs_r+0x6c>
 80164ba:	6965      	ldr	r5, [r4, #20]
 80164bc:	6909      	ldr	r1, [r1, #16]
 80164be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164c2:	eba3 0901 	sub.w	r9, r3, r1
 80164c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80164ca:	1c7b      	adds	r3, r7, #1
 80164cc:	444b      	add	r3, r9
 80164ce:	106d      	asrs	r5, r5, #1
 80164d0:	429d      	cmp	r5, r3
 80164d2:	bf38      	it	cc
 80164d4:	461d      	movcc	r5, r3
 80164d6:	0553      	lsls	r3, r2, #21
 80164d8:	d527      	bpl.n	801652a <__ssputs_r+0x8e>
 80164da:	4629      	mov	r1, r5
 80164dc:	f7ff ff52 	bl	8016384 <_malloc_r>
 80164e0:	4606      	mov	r6, r0
 80164e2:	b360      	cbz	r0, 801653e <__ssputs_r+0xa2>
 80164e4:	6921      	ldr	r1, [r4, #16]
 80164e6:	464a      	mov	r2, r9
 80164e8:	f7ff fed1 	bl	801628e <memcpy>
 80164ec:	89a3      	ldrh	r3, [r4, #12]
 80164ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80164f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80164f6:	81a3      	strh	r3, [r4, #12]
 80164f8:	6126      	str	r6, [r4, #16]
 80164fa:	6165      	str	r5, [r4, #20]
 80164fc:	444e      	add	r6, r9
 80164fe:	eba5 0509 	sub.w	r5, r5, r9
 8016502:	6026      	str	r6, [r4, #0]
 8016504:	60a5      	str	r5, [r4, #8]
 8016506:	463e      	mov	r6, r7
 8016508:	42be      	cmp	r6, r7
 801650a:	d900      	bls.n	801650e <__ssputs_r+0x72>
 801650c:	463e      	mov	r6, r7
 801650e:	6820      	ldr	r0, [r4, #0]
 8016510:	4632      	mov	r2, r6
 8016512:	4641      	mov	r1, r8
 8016514:	f000 fcf6 	bl	8016f04 <memmove>
 8016518:	68a3      	ldr	r3, [r4, #8]
 801651a:	1b9b      	subs	r3, r3, r6
 801651c:	60a3      	str	r3, [r4, #8]
 801651e:	6823      	ldr	r3, [r4, #0]
 8016520:	4433      	add	r3, r6
 8016522:	6023      	str	r3, [r4, #0]
 8016524:	2000      	movs	r0, #0
 8016526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801652a:	462a      	mov	r2, r5
 801652c:	f000 fd36 	bl	8016f9c <_realloc_r>
 8016530:	4606      	mov	r6, r0
 8016532:	2800      	cmp	r0, #0
 8016534:	d1e0      	bne.n	80164f8 <__ssputs_r+0x5c>
 8016536:	6921      	ldr	r1, [r4, #16]
 8016538:	4650      	mov	r0, sl
 801653a:	f7ff feb7 	bl	80162ac <_free_r>
 801653e:	230c      	movs	r3, #12
 8016540:	f8ca 3000 	str.w	r3, [sl]
 8016544:	89a3      	ldrh	r3, [r4, #12]
 8016546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801654a:	81a3      	strh	r3, [r4, #12]
 801654c:	f04f 30ff 	mov.w	r0, #4294967295
 8016550:	e7e9      	b.n	8016526 <__ssputs_r+0x8a>
	...

08016554 <_svfiprintf_r>:
 8016554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016558:	4698      	mov	r8, r3
 801655a:	898b      	ldrh	r3, [r1, #12]
 801655c:	061b      	lsls	r3, r3, #24
 801655e:	b09d      	sub	sp, #116	@ 0x74
 8016560:	4607      	mov	r7, r0
 8016562:	460d      	mov	r5, r1
 8016564:	4614      	mov	r4, r2
 8016566:	d510      	bpl.n	801658a <_svfiprintf_r+0x36>
 8016568:	690b      	ldr	r3, [r1, #16]
 801656a:	b973      	cbnz	r3, 801658a <_svfiprintf_r+0x36>
 801656c:	2140      	movs	r1, #64	@ 0x40
 801656e:	f7ff ff09 	bl	8016384 <_malloc_r>
 8016572:	6028      	str	r0, [r5, #0]
 8016574:	6128      	str	r0, [r5, #16]
 8016576:	b930      	cbnz	r0, 8016586 <_svfiprintf_r+0x32>
 8016578:	230c      	movs	r3, #12
 801657a:	603b      	str	r3, [r7, #0]
 801657c:	f04f 30ff 	mov.w	r0, #4294967295
 8016580:	b01d      	add	sp, #116	@ 0x74
 8016582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016586:	2340      	movs	r3, #64	@ 0x40
 8016588:	616b      	str	r3, [r5, #20]
 801658a:	2300      	movs	r3, #0
 801658c:	9309      	str	r3, [sp, #36]	@ 0x24
 801658e:	2320      	movs	r3, #32
 8016590:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016594:	f8cd 800c 	str.w	r8, [sp, #12]
 8016598:	2330      	movs	r3, #48	@ 0x30
 801659a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016738 <_svfiprintf_r+0x1e4>
 801659e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80165a2:	f04f 0901 	mov.w	r9, #1
 80165a6:	4623      	mov	r3, r4
 80165a8:	469a      	mov	sl, r3
 80165aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165ae:	b10a      	cbz	r2, 80165b4 <_svfiprintf_r+0x60>
 80165b0:	2a25      	cmp	r2, #37	@ 0x25
 80165b2:	d1f9      	bne.n	80165a8 <_svfiprintf_r+0x54>
 80165b4:	ebba 0b04 	subs.w	fp, sl, r4
 80165b8:	d00b      	beq.n	80165d2 <_svfiprintf_r+0x7e>
 80165ba:	465b      	mov	r3, fp
 80165bc:	4622      	mov	r2, r4
 80165be:	4629      	mov	r1, r5
 80165c0:	4638      	mov	r0, r7
 80165c2:	f7ff ff6b 	bl	801649c <__ssputs_r>
 80165c6:	3001      	adds	r0, #1
 80165c8:	f000 80a7 	beq.w	801671a <_svfiprintf_r+0x1c6>
 80165cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80165ce:	445a      	add	r2, fp
 80165d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80165d2:	f89a 3000 	ldrb.w	r3, [sl]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	f000 809f 	beq.w	801671a <_svfiprintf_r+0x1c6>
 80165dc:	2300      	movs	r3, #0
 80165de:	f04f 32ff 	mov.w	r2, #4294967295
 80165e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165e6:	f10a 0a01 	add.w	sl, sl, #1
 80165ea:	9304      	str	r3, [sp, #16]
 80165ec:	9307      	str	r3, [sp, #28]
 80165ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80165f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80165f4:	4654      	mov	r4, sl
 80165f6:	2205      	movs	r2, #5
 80165f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165fc:	484e      	ldr	r0, [pc, #312]	@ (8016738 <_svfiprintf_r+0x1e4>)
 80165fe:	f7e9 fe6f 	bl	80002e0 <memchr>
 8016602:	9a04      	ldr	r2, [sp, #16]
 8016604:	b9d8      	cbnz	r0, 801663e <_svfiprintf_r+0xea>
 8016606:	06d0      	lsls	r0, r2, #27
 8016608:	bf44      	itt	mi
 801660a:	2320      	movmi	r3, #32
 801660c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016610:	0711      	lsls	r1, r2, #28
 8016612:	bf44      	itt	mi
 8016614:	232b      	movmi	r3, #43	@ 0x2b
 8016616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801661a:	f89a 3000 	ldrb.w	r3, [sl]
 801661e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016620:	d015      	beq.n	801664e <_svfiprintf_r+0xfa>
 8016622:	9a07      	ldr	r2, [sp, #28]
 8016624:	4654      	mov	r4, sl
 8016626:	2000      	movs	r0, #0
 8016628:	f04f 0c0a 	mov.w	ip, #10
 801662c:	4621      	mov	r1, r4
 801662e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016632:	3b30      	subs	r3, #48	@ 0x30
 8016634:	2b09      	cmp	r3, #9
 8016636:	d94b      	bls.n	80166d0 <_svfiprintf_r+0x17c>
 8016638:	b1b0      	cbz	r0, 8016668 <_svfiprintf_r+0x114>
 801663a:	9207      	str	r2, [sp, #28]
 801663c:	e014      	b.n	8016668 <_svfiprintf_r+0x114>
 801663e:	eba0 0308 	sub.w	r3, r0, r8
 8016642:	fa09 f303 	lsl.w	r3, r9, r3
 8016646:	4313      	orrs	r3, r2
 8016648:	9304      	str	r3, [sp, #16]
 801664a:	46a2      	mov	sl, r4
 801664c:	e7d2      	b.n	80165f4 <_svfiprintf_r+0xa0>
 801664e:	9b03      	ldr	r3, [sp, #12]
 8016650:	1d19      	adds	r1, r3, #4
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	9103      	str	r1, [sp, #12]
 8016656:	2b00      	cmp	r3, #0
 8016658:	bfbb      	ittet	lt
 801665a:	425b      	neglt	r3, r3
 801665c:	f042 0202 	orrlt.w	r2, r2, #2
 8016660:	9307      	strge	r3, [sp, #28]
 8016662:	9307      	strlt	r3, [sp, #28]
 8016664:	bfb8      	it	lt
 8016666:	9204      	strlt	r2, [sp, #16]
 8016668:	7823      	ldrb	r3, [r4, #0]
 801666a:	2b2e      	cmp	r3, #46	@ 0x2e
 801666c:	d10a      	bne.n	8016684 <_svfiprintf_r+0x130>
 801666e:	7863      	ldrb	r3, [r4, #1]
 8016670:	2b2a      	cmp	r3, #42	@ 0x2a
 8016672:	d132      	bne.n	80166da <_svfiprintf_r+0x186>
 8016674:	9b03      	ldr	r3, [sp, #12]
 8016676:	1d1a      	adds	r2, r3, #4
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	9203      	str	r2, [sp, #12]
 801667c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016680:	3402      	adds	r4, #2
 8016682:	9305      	str	r3, [sp, #20]
 8016684:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016748 <_svfiprintf_r+0x1f4>
 8016688:	7821      	ldrb	r1, [r4, #0]
 801668a:	2203      	movs	r2, #3
 801668c:	4650      	mov	r0, sl
 801668e:	f7e9 fe27 	bl	80002e0 <memchr>
 8016692:	b138      	cbz	r0, 80166a4 <_svfiprintf_r+0x150>
 8016694:	9b04      	ldr	r3, [sp, #16]
 8016696:	eba0 000a 	sub.w	r0, r0, sl
 801669a:	2240      	movs	r2, #64	@ 0x40
 801669c:	4082      	lsls	r2, r0
 801669e:	4313      	orrs	r3, r2
 80166a0:	3401      	adds	r4, #1
 80166a2:	9304      	str	r3, [sp, #16]
 80166a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166a8:	4824      	ldr	r0, [pc, #144]	@ (801673c <_svfiprintf_r+0x1e8>)
 80166aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80166ae:	2206      	movs	r2, #6
 80166b0:	f7e9 fe16 	bl	80002e0 <memchr>
 80166b4:	2800      	cmp	r0, #0
 80166b6:	d036      	beq.n	8016726 <_svfiprintf_r+0x1d2>
 80166b8:	4b21      	ldr	r3, [pc, #132]	@ (8016740 <_svfiprintf_r+0x1ec>)
 80166ba:	bb1b      	cbnz	r3, 8016704 <_svfiprintf_r+0x1b0>
 80166bc:	9b03      	ldr	r3, [sp, #12]
 80166be:	3307      	adds	r3, #7
 80166c0:	f023 0307 	bic.w	r3, r3, #7
 80166c4:	3308      	adds	r3, #8
 80166c6:	9303      	str	r3, [sp, #12]
 80166c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166ca:	4433      	add	r3, r6
 80166cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80166ce:	e76a      	b.n	80165a6 <_svfiprintf_r+0x52>
 80166d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80166d4:	460c      	mov	r4, r1
 80166d6:	2001      	movs	r0, #1
 80166d8:	e7a8      	b.n	801662c <_svfiprintf_r+0xd8>
 80166da:	2300      	movs	r3, #0
 80166dc:	3401      	adds	r4, #1
 80166de:	9305      	str	r3, [sp, #20]
 80166e0:	4619      	mov	r1, r3
 80166e2:	f04f 0c0a 	mov.w	ip, #10
 80166e6:	4620      	mov	r0, r4
 80166e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166ec:	3a30      	subs	r2, #48	@ 0x30
 80166ee:	2a09      	cmp	r2, #9
 80166f0:	d903      	bls.n	80166fa <_svfiprintf_r+0x1a6>
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d0c6      	beq.n	8016684 <_svfiprintf_r+0x130>
 80166f6:	9105      	str	r1, [sp, #20]
 80166f8:	e7c4      	b.n	8016684 <_svfiprintf_r+0x130>
 80166fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80166fe:	4604      	mov	r4, r0
 8016700:	2301      	movs	r3, #1
 8016702:	e7f0      	b.n	80166e6 <_svfiprintf_r+0x192>
 8016704:	ab03      	add	r3, sp, #12
 8016706:	9300      	str	r3, [sp, #0]
 8016708:	462a      	mov	r2, r5
 801670a:	4b0e      	ldr	r3, [pc, #56]	@ (8016744 <_svfiprintf_r+0x1f0>)
 801670c:	a904      	add	r1, sp, #16
 801670e:	4638      	mov	r0, r7
 8016710:	f3af 8000 	nop.w
 8016714:	1c42      	adds	r2, r0, #1
 8016716:	4606      	mov	r6, r0
 8016718:	d1d6      	bne.n	80166c8 <_svfiprintf_r+0x174>
 801671a:	89ab      	ldrh	r3, [r5, #12]
 801671c:	065b      	lsls	r3, r3, #25
 801671e:	f53f af2d 	bmi.w	801657c <_svfiprintf_r+0x28>
 8016722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016724:	e72c      	b.n	8016580 <_svfiprintf_r+0x2c>
 8016726:	ab03      	add	r3, sp, #12
 8016728:	9300      	str	r3, [sp, #0]
 801672a:	462a      	mov	r2, r5
 801672c:	4b05      	ldr	r3, [pc, #20]	@ (8016744 <_svfiprintf_r+0x1f0>)
 801672e:	a904      	add	r1, sp, #16
 8016730:	4638      	mov	r0, r7
 8016732:	f000 f9bb 	bl	8016aac <_printf_i>
 8016736:	e7ed      	b.n	8016714 <_svfiprintf_r+0x1c0>
 8016738:	08017234 	.word	0x08017234
 801673c:	0801723e 	.word	0x0801723e
 8016740:	00000000 	.word	0x00000000
 8016744:	0801649d 	.word	0x0801649d
 8016748:	0801723a 	.word	0x0801723a

0801674c <__sfputc_r>:
 801674c:	6893      	ldr	r3, [r2, #8]
 801674e:	3b01      	subs	r3, #1
 8016750:	2b00      	cmp	r3, #0
 8016752:	b410      	push	{r4}
 8016754:	6093      	str	r3, [r2, #8]
 8016756:	da08      	bge.n	801676a <__sfputc_r+0x1e>
 8016758:	6994      	ldr	r4, [r2, #24]
 801675a:	42a3      	cmp	r3, r4
 801675c:	db01      	blt.n	8016762 <__sfputc_r+0x16>
 801675e:	290a      	cmp	r1, #10
 8016760:	d103      	bne.n	801676a <__sfputc_r+0x1e>
 8016762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016766:	f7ff bc24 	b.w	8015fb2 <__swbuf_r>
 801676a:	6813      	ldr	r3, [r2, #0]
 801676c:	1c58      	adds	r0, r3, #1
 801676e:	6010      	str	r0, [r2, #0]
 8016770:	7019      	strb	r1, [r3, #0]
 8016772:	4608      	mov	r0, r1
 8016774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016778:	4770      	bx	lr

0801677a <__sfputs_r>:
 801677a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801677c:	4606      	mov	r6, r0
 801677e:	460f      	mov	r7, r1
 8016780:	4614      	mov	r4, r2
 8016782:	18d5      	adds	r5, r2, r3
 8016784:	42ac      	cmp	r4, r5
 8016786:	d101      	bne.n	801678c <__sfputs_r+0x12>
 8016788:	2000      	movs	r0, #0
 801678a:	e007      	b.n	801679c <__sfputs_r+0x22>
 801678c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016790:	463a      	mov	r2, r7
 8016792:	4630      	mov	r0, r6
 8016794:	f7ff ffda 	bl	801674c <__sfputc_r>
 8016798:	1c43      	adds	r3, r0, #1
 801679a:	d1f3      	bne.n	8016784 <__sfputs_r+0xa>
 801679c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167a0 <_vfiprintf_r>:
 80167a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a4:	460d      	mov	r5, r1
 80167a6:	b09d      	sub	sp, #116	@ 0x74
 80167a8:	4614      	mov	r4, r2
 80167aa:	4698      	mov	r8, r3
 80167ac:	4606      	mov	r6, r0
 80167ae:	b118      	cbz	r0, 80167b8 <_vfiprintf_r+0x18>
 80167b0:	6a03      	ldr	r3, [r0, #32]
 80167b2:	b90b      	cbnz	r3, 80167b8 <_vfiprintf_r+0x18>
 80167b4:	f7ff faf2 	bl	8015d9c <__sinit>
 80167b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80167ba:	07d9      	lsls	r1, r3, #31
 80167bc:	d405      	bmi.n	80167ca <_vfiprintf_r+0x2a>
 80167be:	89ab      	ldrh	r3, [r5, #12]
 80167c0:	059a      	lsls	r2, r3, #22
 80167c2:	d402      	bmi.n	80167ca <_vfiprintf_r+0x2a>
 80167c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80167c6:	f7ff fd60 	bl	801628a <__retarget_lock_acquire_recursive>
 80167ca:	89ab      	ldrh	r3, [r5, #12]
 80167cc:	071b      	lsls	r3, r3, #28
 80167ce:	d501      	bpl.n	80167d4 <_vfiprintf_r+0x34>
 80167d0:	692b      	ldr	r3, [r5, #16]
 80167d2:	b99b      	cbnz	r3, 80167fc <_vfiprintf_r+0x5c>
 80167d4:	4629      	mov	r1, r5
 80167d6:	4630      	mov	r0, r6
 80167d8:	f7ff fc2a 	bl	8016030 <__swsetup_r>
 80167dc:	b170      	cbz	r0, 80167fc <_vfiprintf_r+0x5c>
 80167de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80167e0:	07dc      	lsls	r4, r3, #31
 80167e2:	d504      	bpl.n	80167ee <_vfiprintf_r+0x4e>
 80167e4:	f04f 30ff 	mov.w	r0, #4294967295
 80167e8:	b01d      	add	sp, #116	@ 0x74
 80167ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ee:	89ab      	ldrh	r3, [r5, #12]
 80167f0:	0598      	lsls	r0, r3, #22
 80167f2:	d4f7      	bmi.n	80167e4 <_vfiprintf_r+0x44>
 80167f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80167f6:	f7ff fd49 	bl	801628c <__retarget_lock_release_recursive>
 80167fa:	e7f3      	b.n	80167e4 <_vfiprintf_r+0x44>
 80167fc:	2300      	movs	r3, #0
 80167fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8016800:	2320      	movs	r3, #32
 8016802:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016806:	f8cd 800c 	str.w	r8, [sp, #12]
 801680a:	2330      	movs	r3, #48	@ 0x30
 801680c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80169bc <_vfiprintf_r+0x21c>
 8016810:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016814:	f04f 0901 	mov.w	r9, #1
 8016818:	4623      	mov	r3, r4
 801681a:	469a      	mov	sl, r3
 801681c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016820:	b10a      	cbz	r2, 8016826 <_vfiprintf_r+0x86>
 8016822:	2a25      	cmp	r2, #37	@ 0x25
 8016824:	d1f9      	bne.n	801681a <_vfiprintf_r+0x7a>
 8016826:	ebba 0b04 	subs.w	fp, sl, r4
 801682a:	d00b      	beq.n	8016844 <_vfiprintf_r+0xa4>
 801682c:	465b      	mov	r3, fp
 801682e:	4622      	mov	r2, r4
 8016830:	4629      	mov	r1, r5
 8016832:	4630      	mov	r0, r6
 8016834:	f7ff ffa1 	bl	801677a <__sfputs_r>
 8016838:	3001      	adds	r0, #1
 801683a:	f000 80a7 	beq.w	801698c <_vfiprintf_r+0x1ec>
 801683e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016840:	445a      	add	r2, fp
 8016842:	9209      	str	r2, [sp, #36]	@ 0x24
 8016844:	f89a 3000 	ldrb.w	r3, [sl]
 8016848:	2b00      	cmp	r3, #0
 801684a:	f000 809f 	beq.w	801698c <_vfiprintf_r+0x1ec>
 801684e:	2300      	movs	r3, #0
 8016850:	f04f 32ff 	mov.w	r2, #4294967295
 8016854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016858:	f10a 0a01 	add.w	sl, sl, #1
 801685c:	9304      	str	r3, [sp, #16]
 801685e:	9307      	str	r3, [sp, #28]
 8016860:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016864:	931a      	str	r3, [sp, #104]	@ 0x68
 8016866:	4654      	mov	r4, sl
 8016868:	2205      	movs	r2, #5
 801686a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801686e:	4853      	ldr	r0, [pc, #332]	@ (80169bc <_vfiprintf_r+0x21c>)
 8016870:	f7e9 fd36 	bl	80002e0 <memchr>
 8016874:	9a04      	ldr	r2, [sp, #16]
 8016876:	b9d8      	cbnz	r0, 80168b0 <_vfiprintf_r+0x110>
 8016878:	06d1      	lsls	r1, r2, #27
 801687a:	bf44      	itt	mi
 801687c:	2320      	movmi	r3, #32
 801687e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016882:	0713      	lsls	r3, r2, #28
 8016884:	bf44      	itt	mi
 8016886:	232b      	movmi	r3, #43	@ 0x2b
 8016888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801688c:	f89a 3000 	ldrb.w	r3, [sl]
 8016890:	2b2a      	cmp	r3, #42	@ 0x2a
 8016892:	d015      	beq.n	80168c0 <_vfiprintf_r+0x120>
 8016894:	9a07      	ldr	r2, [sp, #28]
 8016896:	4654      	mov	r4, sl
 8016898:	2000      	movs	r0, #0
 801689a:	f04f 0c0a 	mov.w	ip, #10
 801689e:	4621      	mov	r1, r4
 80168a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168a4:	3b30      	subs	r3, #48	@ 0x30
 80168a6:	2b09      	cmp	r3, #9
 80168a8:	d94b      	bls.n	8016942 <_vfiprintf_r+0x1a2>
 80168aa:	b1b0      	cbz	r0, 80168da <_vfiprintf_r+0x13a>
 80168ac:	9207      	str	r2, [sp, #28]
 80168ae:	e014      	b.n	80168da <_vfiprintf_r+0x13a>
 80168b0:	eba0 0308 	sub.w	r3, r0, r8
 80168b4:	fa09 f303 	lsl.w	r3, r9, r3
 80168b8:	4313      	orrs	r3, r2
 80168ba:	9304      	str	r3, [sp, #16]
 80168bc:	46a2      	mov	sl, r4
 80168be:	e7d2      	b.n	8016866 <_vfiprintf_r+0xc6>
 80168c0:	9b03      	ldr	r3, [sp, #12]
 80168c2:	1d19      	adds	r1, r3, #4
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	9103      	str	r1, [sp, #12]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	bfbb      	ittet	lt
 80168cc:	425b      	neglt	r3, r3
 80168ce:	f042 0202 	orrlt.w	r2, r2, #2
 80168d2:	9307      	strge	r3, [sp, #28]
 80168d4:	9307      	strlt	r3, [sp, #28]
 80168d6:	bfb8      	it	lt
 80168d8:	9204      	strlt	r2, [sp, #16]
 80168da:	7823      	ldrb	r3, [r4, #0]
 80168dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80168de:	d10a      	bne.n	80168f6 <_vfiprintf_r+0x156>
 80168e0:	7863      	ldrb	r3, [r4, #1]
 80168e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80168e4:	d132      	bne.n	801694c <_vfiprintf_r+0x1ac>
 80168e6:	9b03      	ldr	r3, [sp, #12]
 80168e8:	1d1a      	adds	r2, r3, #4
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	9203      	str	r2, [sp, #12]
 80168ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80168f2:	3402      	adds	r4, #2
 80168f4:	9305      	str	r3, [sp, #20]
 80168f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80169cc <_vfiprintf_r+0x22c>
 80168fa:	7821      	ldrb	r1, [r4, #0]
 80168fc:	2203      	movs	r2, #3
 80168fe:	4650      	mov	r0, sl
 8016900:	f7e9 fcee 	bl	80002e0 <memchr>
 8016904:	b138      	cbz	r0, 8016916 <_vfiprintf_r+0x176>
 8016906:	9b04      	ldr	r3, [sp, #16]
 8016908:	eba0 000a 	sub.w	r0, r0, sl
 801690c:	2240      	movs	r2, #64	@ 0x40
 801690e:	4082      	lsls	r2, r0
 8016910:	4313      	orrs	r3, r2
 8016912:	3401      	adds	r4, #1
 8016914:	9304      	str	r3, [sp, #16]
 8016916:	f814 1b01 	ldrb.w	r1, [r4], #1
 801691a:	4829      	ldr	r0, [pc, #164]	@ (80169c0 <_vfiprintf_r+0x220>)
 801691c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016920:	2206      	movs	r2, #6
 8016922:	f7e9 fcdd 	bl	80002e0 <memchr>
 8016926:	2800      	cmp	r0, #0
 8016928:	d03f      	beq.n	80169aa <_vfiprintf_r+0x20a>
 801692a:	4b26      	ldr	r3, [pc, #152]	@ (80169c4 <_vfiprintf_r+0x224>)
 801692c:	bb1b      	cbnz	r3, 8016976 <_vfiprintf_r+0x1d6>
 801692e:	9b03      	ldr	r3, [sp, #12]
 8016930:	3307      	adds	r3, #7
 8016932:	f023 0307 	bic.w	r3, r3, #7
 8016936:	3308      	adds	r3, #8
 8016938:	9303      	str	r3, [sp, #12]
 801693a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801693c:	443b      	add	r3, r7
 801693e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016940:	e76a      	b.n	8016818 <_vfiprintf_r+0x78>
 8016942:	fb0c 3202 	mla	r2, ip, r2, r3
 8016946:	460c      	mov	r4, r1
 8016948:	2001      	movs	r0, #1
 801694a:	e7a8      	b.n	801689e <_vfiprintf_r+0xfe>
 801694c:	2300      	movs	r3, #0
 801694e:	3401      	adds	r4, #1
 8016950:	9305      	str	r3, [sp, #20]
 8016952:	4619      	mov	r1, r3
 8016954:	f04f 0c0a 	mov.w	ip, #10
 8016958:	4620      	mov	r0, r4
 801695a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801695e:	3a30      	subs	r2, #48	@ 0x30
 8016960:	2a09      	cmp	r2, #9
 8016962:	d903      	bls.n	801696c <_vfiprintf_r+0x1cc>
 8016964:	2b00      	cmp	r3, #0
 8016966:	d0c6      	beq.n	80168f6 <_vfiprintf_r+0x156>
 8016968:	9105      	str	r1, [sp, #20]
 801696a:	e7c4      	b.n	80168f6 <_vfiprintf_r+0x156>
 801696c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016970:	4604      	mov	r4, r0
 8016972:	2301      	movs	r3, #1
 8016974:	e7f0      	b.n	8016958 <_vfiprintf_r+0x1b8>
 8016976:	ab03      	add	r3, sp, #12
 8016978:	9300      	str	r3, [sp, #0]
 801697a:	462a      	mov	r2, r5
 801697c:	4b12      	ldr	r3, [pc, #72]	@ (80169c8 <_vfiprintf_r+0x228>)
 801697e:	a904      	add	r1, sp, #16
 8016980:	4630      	mov	r0, r6
 8016982:	f3af 8000 	nop.w
 8016986:	4607      	mov	r7, r0
 8016988:	1c78      	adds	r0, r7, #1
 801698a:	d1d6      	bne.n	801693a <_vfiprintf_r+0x19a>
 801698c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801698e:	07d9      	lsls	r1, r3, #31
 8016990:	d405      	bmi.n	801699e <_vfiprintf_r+0x1fe>
 8016992:	89ab      	ldrh	r3, [r5, #12]
 8016994:	059a      	lsls	r2, r3, #22
 8016996:	d402      	bmi.n	801699e <_vfiprintf_r+0x1fe>
 8016998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801699a:	f7ff fc77 	bl	801628c <__retarget_lock_release_recursive>
 801699e:	89ab      	ldrh	r3, [r5, #12]
 80169a0:	065b      	lsls	r3, r3, #25
 80169a2:	f53f af1f 	bmi.w	80167e4 <_vfiprintf_r+0x44>
 80169a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80169a8:	e71e      	b.n	80167e8 <_vfiprintf_r+0x48>
 80169aa:	ab03      	add	r3, sp, #12
 80169ac:	9300      	str	r3, [sp, #0]
 80169ae:	462a      	mov	r2, r5
 80169b0:	4b05      	ldr	r3, [pc, #20]	@ (80169c8 <_vfiprintf_r+0x228>)
 80169b2:	a904      	add	r1, sp, #16
 80169b4:	4630      	mov	r0, r6
 80169b6:	f000 f879 	bl	8016aac <_printf_i>
 80169ba:	e7e4      	b.n	8016986 <_vfiprintf_r+0x1e6>
 80169bc:	08017234 	.word	0x08017234
 80169c0:	0801723e 	.word	0x0801723e
 80169c4:	00000000 	.word	0x00000000
 80169c8:	0801677b 	.word	0x0801677b
 80169cc:	0801723a 	.word	0x0801723a

080169d0 <_printf_common>:
 80169d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169d4:	4616      	mov	r6, r2
 80169d6:	4698      	mov	r8, r3
 80169d8:	688a      	ldr	r2, [r1, #8]
 80169da:	690b      	ldr	r3, [r1, #16]
 80169dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80169e0:	4293      	cmp	r3, r2
 80169e2:	bfb8      	it	lt
 80169e4:	4613      	movlt	r3, r2
 80169e6:	6033      	str	r3, [r6, #0]
 80169e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80169ec:	4607      	mov	r7, r0
 80169ee:	460c      	mov	r4, r1
 80169f0:	b10a      	cbz	r2, 80169f6 <_printf_common+0x26>
 80169f2:	3301      	adds	r3, #1
 80169f4:	6033      	str	r3, [r6, #0]
 80169f6:	6823      	ldr	r3, [r4, #0]
 80169f8:	0699      	lsls	r1, r3, #26
 80169fa:	bf42      	ittt	mi
 80169fc:	6833      	ldrmi	r3, [r6, #0]
 80169fe:	3302      	addmi	r3, #2
 8016a00:	6033      	strmi	r3, [r6, #0]
 8016a02:	6825      	ldr	r5, [r4, #0]
 8016a04:	f015 0506 	ands.w	r5, r5, #6
 8016a08:	d106      	bne.n	8016a18 <_printf_common+0x48>
 8016a0a:	f104 0a19 	add.w	sl, r4, #25
 8016a0e:	68e3      	ldr	r3, [r4, #12]
 8016a10:	6832      	ldr	r2, [r6, #0]
 8016a12:	1a9b      	subs	r3, r3, r2
 8016a14:	42ab      	cmp	r3, r5
 8016a16:	dc26      	bgt.n	8016a66 <_printf_common+0x96>
 8016a18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016a1c:	6822      	ldr	r2, [r4, #0]
 8016a1e:	3b00      	subs	r3, #0
 8016a20:	bf18      	it	ne
 8016a22:	2301      	movne	r3, #1
 8016a24:	0692      	lsls	r2, r2, #26
 8016a26:	d42b      	bmi.n	8016a80 <_printf_common+0xb0>
 8016a28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016a2c:	4641      	mov	r1, r8
 8016a2e:	4638      	mov	r0, r7
 8016a30:	47c8      	blx	r9
 8016a32:	3001      	adds	r0, #1
 8016a34:	d01e      	beq.n	8016a74 <_printf_common+0xa4>
 8016a36:	6823      	ldr	r3, [r4, #0]
 8016a38:	6922      	ldr	r2, [r4, #16]
 8016a3a:	f003 0306 	and.w	r3, r3, #6
 8016a3e:	2b04      	cmp	r3, #4
 8016a40:	bf02      	ittt	eq
 8016a42:	68e5      	ldreq	r5, [r4, #12]
 8016a44:	6833      	ldreq	r3, [r6, #0]
 8016a46:	1aed      	subeq	r5, r5, r3
 8016a48:	68a3      	ldr	r3, [r4, #8]
 8016a4a:	bf0c      	ite	eq
 8016a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016a50:	2500      	movne	r5, #0
 8016a52:	4293      	cmp	r3, r2
 8016a54:	bfc4      	itt	gt
 8016a56:	1a9b      	subgt	r3, r3, r2
 8016a58:	18ed      	addgt	r5, r5, r3
 8016a5a:	2600      	movs	r6, #0
 8016a5c:	341a      	adds	r4, #26
 8016a5e:	42b5      	cmp	r5, r6
 8016a60:	d11a      	bne.n	8016a98 <_printf_common+0xc8>
 8016a62:	2000      	movs	r0, #0
 8016a64:	e008      	b.n	8016a78 <_printf_common+0xa8>
 8016a66:	2301      	movs	r3, #1
 8016a68:	4652      	mov	r2, sl
 8016a6a:	4641      	mov	r1, r8
 8016a6c:	4638      	mov	r0, r7
 8016a6e:	47c8      	blx	r9
 8016a70:	3001      	adds	r0, #1
 8016a72:	d103      	bne.n	8016a7c <_printf_common+0xac>
 8016a74:	f04f 30ff 	mov.w	r0, #4294967295
 8016a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a7c:	3501      	adds	r5, #1
 8016a7e:	e7c6      	b.n	8016a0e <_printf_common+0x3e>
 8016a80:	18e1      	adds	r1, r4, r3
 8016a82:	1c5a      	adds	r2, r3, #1
 8016a84:	2030      	movs	r0, #48	@ 0x30
 8016a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016a8a:	4422      	add	r2, r4
 8016a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016a90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016a94:	3302      	adds	r3, #2
 8016a96:	e7c7      	b.n	8016a28 <_printf_common+0x58>
 8016a98:	2301      	movs	r3, #1
 8016a9a:	4622      	mov	r2, r4
 8016a9c:	4641      	mov	r1, r8
 8016a9e:	4638      	mov	r0, r7
 8016aa0:	47c8      	blx	r9
 8016aa2:	3001      	adds	r0, #1
 8016aa4:	d0e6      	beq.n	8016a74 <_printf_common+0xa4>
 8016aa6:	3601      	adds	r6, #1
 8016aa8:	e7d9      	b.n	8016a5e <_printf_common+0x8e>
	...

08016aac <_printf_i>:
 8016aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ab0:	7e0f      	ldrb	r7, [r1, #24]
 8016ab2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016ab4:	2f78      	cmp	r7, #120	@ 0x78
 8016ab6:	4691      	mov	r9, r2
 8016ab8:	4680      	mov	r8, r0
 8016aba:	460c      	mov	r4, r1
 8016abc:	469a      	mov	sl, r3
 8016abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016ac2:	d807      	bhi.n	8016ad4 <_printf_i+0x28>
 8016ac4:	2f62      	cmp	r7, #98	@ 0x62
 8016ac6:	d80a      	bhi.n	8016ade <_printf_i+0x32>
 8016ac8:	2f00      	cmp	r7, #0
 8016aca:	f000 80d1 	beq.w	8016c70 <_printf_i+0x1c4>
 8016ace:	2f58      	cmp	r7, #88	@ 0x58
 8016ad0:	f000 80b8 	beq.w	8016c44 <_printf_i+0x198>
 8016ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016adc:	e03a      	b.n	8016b54 <_printf_i+0xa8>
 8016ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016ae2:	2b15      	cmp	r3, #21
 8016ae4:	d8f6      	bhi.n	8016ad4 <_printf_i+0x28>
 8016ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8016aec <_printf_i+0x40>)
 8016ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016aec:	08016b45 	.word	0x08016b45
 8016af0:	08016b59 	.word	0x08016b59
 8016af4:	08016ad5 	.word	0x08016ad5
 8016af8:	08016ad5 	.word	0x08016ad5
 8016afc:	08016ad5 	.word	0x08016ad5
 8016b00:	08016ad5 	.word	0x08016ad5
 8016b04:	08016b59 	.word	0x08016b59
 8016b08:	08016ad5 	.word	0x08016ad5
 8016b0c:	08016ad5 	.word	0x08016ad5
 8016b10:	08016ad5 	.word	0x08016ad5
 8016b14:	08016ad5 	.word	0x08016ad5
 8016b18:	08016c57 	.word	0x08016c57
 8016b1c:	08016b83 	.word	0x08016b83
 8016b20:	08016c11 	.word	0x08016c11
 8016b24:	08016ad5 	.word	0x08016ad5
 8016b28:	08016ad5 	.word	0x08016ad5
 8016b2c:	08016c79 	.word	0x08016c79
 8016b30:	08016ad5 	.word	0x08016ad5
 8016b34:	08016b83 	.word	0x08016b83
 8016b38:	08016ad5 	.word	0x08016ad5
 8016b3c:	08016ad5 	.word	0x08016ad5
 8016b40:	08016c19 	.word	0x08016c19
 8016b44:	6833      	ldr	r3, [r6, #0]
 8016b46:	1d1a      	adds	r2, r3, #4
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	6032      	str	r2, [r6, #0]
 8016b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016b54:	2301      	movs	r3, #1
 8016b56:	e09c      	b.n	8016c92 <_printf_i+0x1e6>
 8016b58:	6833      	ldr	r3, [r6, #0]
 8016b5a:	6820      	ldr	r0, [r4, #0]
 8016b5c:	1d19      	adds	r1, r3, #4
 8016b5e:	6031      	str	r1, [r6, #0]
 8016b60:	0606      	lsls	r6, r0, #24
 8016b62:	d501      	bpl.n	8016b68 <_printf_i+0xbc>
 8016b64:	681d      	ldr	r5, [r3, #0]
 8016b66:	e003      	b.n	8016b70 <_printf_i+0xc4>
 8016b68:	0645      	lsls	r5, r0, #25
 8016b6a:	d5fb      	bpl.n	8016b64 <_printf_i+0xb8>
 8016b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016b70:	2d00      	cmp	r5, #0
 8016b72:	da03      	bge.n	8016b7c <_printf_i+0xd0>
 8016b74:	232d      	movs	r3, #45	@ 0x2d
 8016b76:	426d      	negs	r5, r5
 8016b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016b7c:	4858      	ldr	r0, [pc, #352]	@ (8016ce0 <_printf_i+0x234>)
 8016b7e:	230a      	movs	r3, #10
 8016b80:	e011      	b.n	8016ba6 <_printf_i+0xfa>
 8016b82:	6821      	ldr	r1, [r4, #0]
 8016b84:	6833      	ldr	r3, [r6, #0]
 8016b86:	0608      	lsls	r0, r1, #24
 8016b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8016b8c:	d402      	bmi.n	8016b94 <_printf_i+0xe8>
 8016b8e:	0649      	lsls	r1, r1, #25
 8016b90:	bf48      	it	mi
 8016b92:	b2ad      	uxthmi	r5, r5
 8016b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8016b96:	4852      	ldr	r0, [pc, #328]	@ (8016ce0 <_printf_i+0x234>)
 8016b98:	6033      	str	r3, [r6, #0]
 8016b9a:	bf14      	ite	ne
 8016b9c:	230a      	movne	r3, #10
 8016b9e:	2308      	moveq	r3, #8
 8016ba0:	2100      	movs	r1, #0
 8016ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016ba6:	6866      	ldr	r6, [r4, #4]
 8016ba8:	60a6      	str	r6, [r4, #8]
 8016baa:	2e00      	cmp	r6, #0
 8016bac:	db05      	blt.n	8016bba <_printf_i+0x10e>
 8016bae:	6821      	ldr	r1, [r4, #0]
 8016bb0:	432e      	orrs	r6, r5
 8016bb2:	f021 0104 	bic.w	r1, r1, #4
 8016bb6:	6021      	str	r1, [r4, #0]
 8016bb8:	d04b      	beq.n	8016c52 <_printf_i+0x1a6>
 8016bba:	4616      	mov	r6, r2
 8016bbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8016bc0:	fb03 5711 	mls	r7, r3, r1, r5
 8016bc4:	5dc7      	ldrb	r7, [r0, r7]
 8016bc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016bca:	462f      	mov	r7, r5
 8016bcc:	42bb      	cmp	r3, r7
 8016bce:	460d      	mov	r5, r1
 8016bd0:	d9f4      	bls.n	8016bbc <_printf_i+0x110>
 8016bd2:	2b08      	cmp	r3, #8
 8016bd4:	d10b      	bne.n	8016bee <_printf_i+0x142>
 8016bd6:	6823      	ldr	r3, [r4, #0]
 8016bd8:	07df      	lsls	r7, r3, #31
 8016bda:	d508      	bpl.n	8016bee <_printf_i+0x142>
 8016bdc:	6923      	ldr	r3, [r4, #16]
 8016bde:	6861      	ldr	r1, [r4, #4]
 8016be0:	4299      	cmp	r1, r3
 8016be2:	bfde      	ittt	le
 8016be4:	2330      	movle	r3, #48	@ 0x30
 8016be6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016bea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016bee:	1b92      	subs	r2, r2, r6
 8016bf0:	6122      	str	r2, [r4, #16]
 8016bf2:	f8cd a000 	str.w	sl, [sp]
 8016bf6:	464b      	mov	r3, r9
 8016bf8:	aa03      	add	r2, sp, #12
 8016bfa:	4621      	mov	r1, r4
 8016bfc:	4640      	mov	r0, r8
 8016bfe:	f7ff fee7 	bl	80169d0 <_printf_common>
 8016c02:	3001      	adds	r0, #1
 8016c04:	d14a      	bne.n	8016c9c <_printf_i+0x1f0>
 8016c06:	f04f 30ff 	mov.w	r0, #4294967295
 8016c0a:	b004      	add	sp, #16
 8016c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c10:	6823      	ldr	r3, [r4, #0]
 8016c12:	f043 0320 	orr.w	r3, r3, #32
 8016c16:	6023      	str	r3, [r4, #0]
 8016c18:	4832      	ldr	r0, [pc, #200]	@ (8016ce4 <_printf_i+0x238>)
 8016c1a:	2778      	movs	r7, #120	@ 0x78
 8016c1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016c20:	6823      	ldr	r3, [r4, #0]
 8016c22:	6831      	ldr	r1, [r6, #0]
 8016c24:	061f      	lsls	r7, r3, #24
 8016c26:	f851 5b04 	ldr.w	r5, [r1], #4
 8016c2a:	d402      	bmi.n	8016c32 <_printf_i+0x186>
 8016c2c:	065f      	lsls	r7, r3, #25
 8016c2e:	bf48      	it	mi
 8016c30:	b2ad      	uxthmi	r5, r5
 8016c32:	6031      	str	r1, [r6, #0]
 8016c34:	07d9      	lsls	r1, r3, #31
 8016c36:	bf44      	itt	mi
 8016c38:	f043 0320 	orrmi.w	r3, r3, #32
 8016c3c:	6023      	strmi	r3, [r4, #0]
 8016c3e:	b11d      	cbz	r5, 8016c48 <_printf_i+0x19c>
 8016c40:	2310      	movs	r3, #16
 8016c42:	e7ad      	b.n	8016ba0 <_printf_i+0xf4>
 8016c44:	4826      	ldr	r0, [pc, #152]	@ (8016ce0 <_printf_i+0x234>)
 8016c46:	e7e9      	b.n	8016c1c <_printf_i+0x170>
 8016c48:	6823      	ldr	r3, [r4, #0]
 8016c4a:	f023 0320 	bic.w	r3, r3, #32
 8016c4e:	6023      	str	r3, [r4, #0]
 8016c50:	e7f6      	b.n	8016c40 <_printf_i+0x194>
 8016c52:	4616      	mov	r6, r2
 8016c54:	e7bd      	b.n	8016bd2 <_printf_i+0x126>
 8016c56:	6833      	ldr	r3, [r6, #0]
 8016c58:	6825      	ldr	r5, [r4, #0]
 8016c5a:	6961      	ldr	r1, [r4, #20]
 8016c5c:	1d18      	adds	r0, r3, #4
 8016c5e:	6030      	str	r0, [r6, #0]
 8016c60:	062e      	lsls	r6, r5, #24
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	d501      	bpl.n	8016c6a <_printf_i+0x1be>
 8016c66:	6019      	str	r1, [r3, #0]
 8016c68:	e002      	b.n	8016c70 <_printf_i+0x1c4>
 8016c6a:	0668      	lsls	r0, r5, #25
 8016c6c:	d5fb      	bpl.n	8016c66 <_printf_i+0x1ba>
 8016c6e:	8019      	strh	r1, [r3, #0]
 8016c70:	2300      	movs	r3, #0
 8016c72:	6123      	str	r3, [r4, #16]
 8016c74:	4616      	mov	r6, r2
 8016c76:	e7bc      	b.n	8016bf2 <_printf_i+0x146>
 8016c78:	6833      	ldr	r3, [r6, #0]
 8016c7a:	1d1a      	adds	r2, r3, #4
 8016c7c:	6032      	str	r2, [r6, #0]
 8016c7e:	681e      	ldr	r6, [r3, #0]
 8016c80:	6862      	ldr	r2, [r4, #4]
 8016c82:	2100      	movs	r1, #0
 8016c84:	4630      	mov	r0, r6
 8016c86:	f7e9 fb2b 	bl	80002e0 <memchr>
 8016c8a:	b108      	cbz	r0, 8016c90 <_printf_i+0x1e4>
 8016c8c:	1b80      	subs	r0, r0, r6
 8016c8e:	6060      	str	r0, [r4, #4]
 8016c90:	6863      	ldr	r3, [r4, #4]
 8016c92:	6123      	str	r3, [r4, #16]
 8016c94:	2300      	movs	r3, #0
 8016c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016c9a:	e7aa      	b.n	8016bf2 <_printf_i+0x146>
 8016c9c:	6923      	ldr	r3, [r4, #16]
 8016c9e:	4632      	mov	r2, r6
 8016ca0:	4649      	mov	r1, r9
 8016ca2:	4640      	mov	r0, r8
 8016ca4:	47d0      	blx	sl
 8016ca6:	3001      	adds	r0, #1
 8016ca8:	d0ad      	beq.n	8016c06 <_printf_i+0x15a>
 8016caa:	6823      	ldr	r3, [r4, #0]
 8016cac:	079b      	lsls	r3, r3, #30
 8016cae:	d413      	bmi.n	8016cd8 <_printf_i+0x22c>
 8016cb0:	68e0      	ldr	r0, [r4, #12]
 8016cb2:	9b03      	ldr	r3, [sp, #12]
 8016cb4:	4298      	cmp	r0, r3
 8016cb6:	bfb8      	it	lt
 8016cb8:	4618      	movlt	r0, r3
 8016cba:	e7a6      	b.n	8016c0a <_printf_i+0x15e>
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	4632      	mov	r2, r6
 8016cc0:	4649      	mov	r1, r9
 8016cc2:	4640      	mov	r0, r8
 8016cc4:	47d0      	blx	sl
 8016cc6:	3001      	adds	r0, #1
 8016cc8:	d09d      	beq.n	8016c06 <_printf_i+0x15a>
 8016cca:	3501      	adds	r5, #1
 8016ccc:	68e3      	ldr	r3, [r4, #12]
 8016cce:	9903      	ldr	r1, [sp, #12]
 8016cd0:	1a5b      	subs	r3, r3, r1
 8016cd2:	42ab      	cmp	r3, r5
 8016cd4:	dcf2      	bgt.n	8016cbc <_printf_i+0x210>
 8016cd6:	e7eb      	b.n	8016cb0 <_printf_i+0x204>
 8016cd8:	2500      	movs	r5, #0
 8016cda:	f104 0619 	add.w	r6, r4, #25
 8016cde:	e7f5      	b.n	8016ccc <_printf_i+0x220>
 8016ce0:	08017245 	.word	0x08017245
 8016ce4:	08017256 	.word	0x08017256

08016ce8 <__sflush_r>:
 8016ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf0:	0716      	lsls	r6, r2, #28
 8016cf2:	4605      	mov	r5, r0
 8016cf4:	460c      	mov	r4, r1
 8016cf6:	d454      	bmi.n	8016da2 <__sflush_r+0xba>
 8016cf8:	684b      	ldr	r3, [r1, #4]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	dc02      	bgt.n	8016d04 <__sflush_r+0x1c>
 8016cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	dd48      	ble.n	8016d96 <__sflush_r+0xae>
 8016d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016d06:	2e00      	cmp	r6, #0
 8016d08:	d045      	beq.n	8016d96 <__sflush_r+0xae>
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016d10:	682f      	ldr	r7, [r5, #0]
 8016d12:	6a21      	ldr	r1, [r4, #32]
 8016d14:	602b      	str	r3, [r5, #0]
 8016d16:	d030      	beq.n	8016d7a <__sflush_r+0x92>
 8016d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016d1a:	89a3      	ldrh	r3, [r4, #12]
 8016d1c:	0759      	lsls	r1, r3, #29
 8016d1e:	d505      	bpl.n	8016d2c <__sflush_r+0x44>
 8016d20:	6863      	ldr	r3, [r4, #4]
 8016d22:	1ad2      	subs	r2, r2, r3
 8016d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016d26:	b10b      	cbz	r3, 8016d2c <__sflush_r+0x44>
 8016d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016d2a:	1ad2      	subs	r2, r2, r3
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016d30:	6a21      	ldr	r1, [r4, #32]
 8016d32:	4628      	mov	r0, r5
 8016d34:	47b0      	blx	r6
 8016d36:	1c43      	adds	r3, r0, #1
 8016d38:	89a3      	ldrh	r3, [r4, #12]
 8016d3a:	d106      	bne.n	8016d4a <__sflush_r+0x62>
 8016d3c:	6829      	ldr	r1, [r5, #0]
 8016d3e:	291d      	cmp	r1, #29
 8016d40:	d82b      	bhi.n	8016d9a <__sflush_r+0xb2>
 8016d42:	4a2a      	ldr	r2, [pc, #168]	@ (8016dec <__sflush_r+0x104>)
 8016d44:	40ca      	lsrs	r2, r1
 8016d46:	07d6      	lsls	r6, r2, #31
 8016d48:	d527      	bpl.n	8016d9a <__sflush_r+0xb2>
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	6062      	str	r2, [r4, #4]
 8016d4e:	04d9      	lsls	r1, r3, #19
 8016d50:	6922      	ldr	r2, [r4, #16]
 8016d52:	6022      	str	r2, [r4, #0]
 8016d54:	d504      	bpl.n	8016d60 <__sflush_r+0x78>
 8016d56:	1c42      	adds	r2, r0, #1
 8016d58:	d101      	bne.n	8016d5e <__sflush_r+0x76>
 8016d5a:	682b      	ldr	r3, [r5, #0]
 8016d5c:	b903      	cbnz	r3, 8016d60 <__sflush_r+0x78>
 8016d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016d62:	602f      	str	r7, [r5, #0]
 8016d64:	b1b9      	cbz	r1, 8016d96 <__sflush_r+0xae>
 8016d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016d6a:	4299      	cmp	r1, r3
 8016d6c:	d002      	beq.n	8016d74 <__sflush_r+0x8c>
 8016d6e:	4628      	mov	r0, r5
 8016d70:	f7ff fa9c 	bl	80162ac <_free_r>
 8016d74:	2300      	movs	r3, #0
 8016d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8016d78:	e00d      	b.n	8016d96 <__sflush_r+0xae>
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	4628      	mov	r0, r5
 8016d7e:	47b0      	blx	r6
 8016d80:	4602      	mov	r2, r0
 8016d82:	1c50      	adds	r0, r2, #1
 8016d84:	d1c9      	bne.n	8016d1a <__sflush_r+0x32>
 8016d86:	682b      	ldr	r3, [r5, #0]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d0c6      	beq.n	8016d1a <__sflush_r+0x32>
 8016d8c:	2b1d      	cmp	r3, #29
 8016d8e:	d001      	beq.n	8016d94 <__sflush_r+0xac>
 8016d90:	2b16      	cmp	r3, #22
 8016d92:	d11e      	bne.n	8016dd2 <__sflush_r+0xea>
 8016d94:	602f      	str	r7, [r5, #0]
 8016d96:	2000      	movs	r0, #0
 8016d98:	e022      	b.n	8016de0 <__sflush_r+0xf8>
 8016d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016d9e:	b21b      	sxth	r3, r3
 8016da0:	e01b      	b.n	8016dda <__sflush_r+0xf2>
 8016da2:	690f      	ldr	r7, [r1, #16]
 8016da4:	2f00      	cmp	r7, #0
 8016da6:	d0f6      	beq.n	8016d96 <__sflush_r+0xae>
 8016da8:	0793      	lsls	r3, r2, #30
 8016daa:	680e      	ldr	r6, [r1, #0]
 8016dac:	bf08      	it	eq
 8016dae:	694b      	ldreq	r3, [r1, #20]
 8016db0:	600f      	str	r7, [r1, #0]
 8016db2:	bf18      	it	ne
 8016db4:	2300      	movne	r3, #0
 8016db6:	eba6 0807 	sub.w	r8, r6, r7
 8016dba:	608b      	str	r3, [r1, #8]
 8016dbc:	f1b8 0f00 	cmp.w	r8, #0
 8016dc0:	dde9      	ble.n	8016d96 <__sflush_r+0xae>
 8016dc2:	6a21      	ldr	r1, [r4, #32]
 8016dc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016dc6:	4643      	mov	r3, r8
 8016dc8:	463a      	mov	r2, r7
 8016dca:	4628      	mov	r0, r5
 8016dcc:	47b0      	blx	r6
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	dc08      	bgt.n	8016de4 <__sflush_r+0xfc>
 8016dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016dda:	81a3      	strh	r3, [r4, #12]
 8016ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8016de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016de4:	4407      	add	r7, r0
 8016de6:	eba8 0800 	sub.w	r8, r8, r0
 8016dea:	e7e7      	b.n	8016dbc <__sflush_r+0xd4>
 8016dec:	20400001 	.word	0x20400001

08016df0 <_fflush_r>:
 8016df0:	b538      	push	{r3, r4, r5, lr}
 8016df2:	690b      	ldr	r3, [r1, #16]
 8016df4:	4605      	mov	r5, r0
 8016df6:	460c      	mov	r4, r1
 8016df8:	b913      	cbnz	r3, 8016e00 <_fflush_r+0x10>
 8016dfa:	2500      	movs	r5, #0
 8016dfc:	4628      	mov	r0, r5
 8016dfe:	bd38      	pop	{r3, r4, r5, pc}
 8016e00:	b118      	cbz	r0, 8016e0a <_fflush_r+0x1a>
 8016e02:	6a03      	ldr	r3, [r0, #32]
 8016e04:	b90b      	cbnz	r3, 8016e0a <_fflush_r+0x1a>
 8016e06:	f7fe ffc9 	bl	8015d9c <__sinit>
 8016e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d0f3      	beq.n	8016dfa <_fflush_r+0xa>
 8016e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016e14:	07d0      	lsls	r0, r2, #31
 8016e16:	d404      	bmi.n	8016e22 <_fflush_r+0x32>
 8016e18:	0599      	lsls	r1, r3, #22
 8016e1a:	d402      	bmi.n	8016e22 <_fflush_r+0x32>
 8016e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016e1e:	f7ff fa34 	bl	801628a <__retarget_lock_acquire_recursive>
 8016e22:	4628      	mov	r0, r5
 8016e24:	4621      	mov	r1, r4
 8016e26:	f7ff ff5f 	bl	8016ce8 <__sflush_r>
 8016e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016e2c:	07da      	lsls	r2, r3, #31
 8016e2e:	4605      	mov	r5, r0
 8016e30:	d4e4      	bmi.n	8016dfc <_fflush_r+0xc>
 8016e32:	89a3      	ldrh	r3, [r4, #12]
 8016e34:	059b      	lsls	r3, r3, #22
 8016e36:	d4e1      	bmi.n	8016dfc <_fflush_r+0xc>
 8016e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016e3a:	f7ff fa27 	bl	801628c <__retarget_lock_release_recursive>
 8016e3e:	e7dd      	b.n	8016dfc <_fflush_r+0xc>

08016e40 <__swhatbuf_r>:
 8016e40:	b570      	push	{r4, r5, r6, lr}
 8016e42:	460c      	mov	r4, r1
 8016e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e48:	2900      	cmp	r1, #0
 8016e4a:	b096      	sub	sp, #88	@ 0x58
 8016e4c:	4615      	mov	r5, r2
 8016e4e:	461e      	mov	r6, r3
 8016e50:	da0d      	bge.n	8016e6e <__swhatbuf_r+0x2e>
 8016e52:	89a3      	ldrh	r3, [r4, #12]
 8016e54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016e58:	f04f 0100 	mov.w	r1, #0
 8016e5c:	bf14      	ite	ne
 8016e5e:	2340      	movne	r3, #64	@ 0x40
 8016e60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016e64:	2000      	movs	r0, #0
 8016e66:	6031      	str	r1, [r6, #0]
 8016e68:	602b      	str	r3, [r5, #0]
 8016e6a:	b016      	add	sp, #88	@ 0x58
 8016e6c:	bd70      	pop	{r4, r5, r6, pc}
 8016e6e:	466a      	mov	r2, sp
 8016e70:	f000 f862 	bl	8016f38 <_fstat_r>
 8016e74:	2800      	cmp	r0, #0
 8016e76:	dbec      	blt.n	8016e52 <__swhatbuf_r+0x12>
 8016e78:	9901      	ldr	r1, [sp, #4]
 8016e7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016e7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016e82:	4259      	negs	r1, r3
 8016e84:	4159      	adcs	r1, r3
 8016e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016e8a:	e7eb      	b.n	8016e64 <__swhatbuf_r+0x24>

08016e8c <__smakebuf_r>:
 8016e8c:	898b      	ldrh	r3, [r1, #12]
 8016e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e90:	079d      	lsls	r5, r3, #30
 8016e92:	4606      	mov	r6, r0
 8016e94:	460c      	mov	r4, r1
 8016e96:	d507      	bpl.n	8016ea8 <__smakebuf_r+0x1c>
 8016e98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016e9c:	6023      	str	r3, [r4, #0]
 8016e9e:	6123      	str	r3, [r4, #16]
 8016ea0:	2301      	movs	r3, #1
 8016ea2:	6163      	str	r3, [r4, #20]
 8016ea4:	b003      	add	sp, #12
 8016ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ea8:	ab01      	add	r3, sp, #4
 8016eaa:	466a      	mov	r2, sp
 8016eac:	f7ff ffc8 	bl	8016e40 <__swhatbuf_r>
 8016eb0:	9f00      	ldr	r7, [sp, #0]
 8016eb2:	4605      	mov	r5, r0
 8016eb4:	4639      	mov	r1, r7
 8016eb6:	4630      	mov	r0, r6
 8016eb8:	f7ff fa64 	bl	8016384 <_malloc_r>
 8016ebc:	b948      	cbnz	r0, 8016ed2 <__smakebuf_r+0x46>
 8016ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ec2:	059a      	lsls	r2, r3, #22
 8016ec4:	d4ee      	bmi.n	8016ea4 <__smakebuf_r+0x18>
 8016ec6:	f023 0303 	bic.w	r3, r3, #3
 8016eca:	f043 0302 	orr.w	r3, r3, #2
 8016ece:	81a3      	strh	r3, [r4, #12]
 8016ed0:	e7e2      	b.n	8016e98 <__smakebuf_r+0xc>
 8016ed2:	89a3      	ldrh	r3, [r4, #12]
 8016ed4:	6020      	str	r0, [r4, #0]
 8016ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016eda:	81a3      	strh	r3, [r4, #12]
 8016edc:	9b01      	ldr	r3, [sp, #4]
 8016ede:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016ee2:	b15b      	cbz	r3, 8016efc <__smakebuf_r+0x70>
 8016ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ee8:	4630      	mov	r0, r6
 8016eea:	f000 f837 	bl	8016f5c <_isatty_r>
 8016eee:	b128      	cbz	r0, 8016efc <__smakebuf_r+0x70>
 8016ef0:	89a3      	ldrh	r3, [r4, #12]
 8016ef2:	f023 0303 	bic.w	r3, r3, #3
 8016ef6:	f043 0301 	orr.w	r3, r3, #1
 8016efa:	81a3      	strh	r3, [r4, #12]
 8016efc:	89a3      	ldrh	r3, [r4, #12]
 8016efe:	431d      	orrs	r5, r3
 8016f00:	81a5      	strh	r5, [r4, #12]
 8016f02:	e7cf      	b.n	8016ea4 <__smakebuf_r+0x18>

08016f04 <memmove>:
 8016f04:	4288      	cmp	r0, r1
 8016f06:	b510      	push	{r4, lr}
 8016f08:	eb01 0402 	add.w	r4, r1, r2
 8016f0c:	d902      	bls.n	8016f14 <memmove+0x10>
 8016f0e:	4284      	cmp	r4, r0
 8016f10:	4623      	mov	r3, r4
 8016f12:	d807      	bhi.n	8016f24 <memmove+0x20>
 8016f14:	1e43      	subs	r3, r0, #1
 8016f16:	42a1      	cmp	r1, r4
 8016f18:	d008      	beq.n	8016f2c <memmove+0x28>
 8016f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016f22:	e7f8      	b.n	8016f16 <memmove+0x12>
 8016f24:	4402      	add	r2, r0
 8016f26:	4601      	mov	r1, r0
 8016f28:	428a      	cmp	r2, r1
 8016f2a:	d100      	bne.n	8016f2e <memmove+0x2a>
 8016f2c:	bd10      	pop	{r4, pc}
 8016f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016f36:	e7f7      	b.n	8016f28 <memmove+0x24>

08016f38 <_fstat_r>:
 8016f38:	b538      	push	{r3, r4, r5, lr}
 8016f3a:	4d07      	ldr	r5, [pc, #28]	@ (8016f58 <_fstat_r+0x20>)
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	4604      	mov	r4, r0
 8016f40:	4608      	mov	r0, r1
 8016f42:	4611      	mov	r1, r2
 8016f44:	602b      	str	r3, [r5, #0]
 8016f46:	f7ea fd06 	bl	8001956 <_fstat>
 8016f4a:	1c43      	adds	r3, r0, #1
 8016f4c:	d102      	bne.n	8016f54 <_fstat_r+0x1c>
 8016f4e:	682b      	ldr	r3, [r5, #0]
 8016f50:	b103      	cbz	r3, 8016f54 <_fstat_r+0x1c>
 8016f52:	6023      	str	r3, [r4, #0]
 8016f54:	bd38      	pop	{r3, r4, r5, pc}
 8016f56:	bf00      	nop
 8016f58:	240500c0 	.word	0x240500c0

08016f5c <_isatty_r>:
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	4d06      	ldr	r5, [pc, #24]	@ (8016f78 <_isatty_r+0x1c>)
 8016f60:	2300      	movs	r3, #0
 8016f62:	4604      	mov	r4, r0
 8016f64:	4608      	mov	r0, r1
 8016f66:	602b      	str	r3, [r5, #0]
 8016f68:	f7ea fd05 	bl	8001976 <_isatty>
 8016f6c:	1c43      	adds	r3, r0, #1
 8016f6e:	d102      	bne.n	8016f76 <_isatty_r+0x1a>
 8016f70:	682b      	ldr	r3, [r5, #0]
 8016f72:	b103      	cbz	r3, 8016f76 <_isatty_r+0x1a>
 8016f74:	6023      	str	r3, [r4, #0]
 8016f76:	bd38      	pop	{r3, r4, r5, pc}
 8016f78:	240500c0 	.word	0x240500c0

08016f7c <_sbrk_r>:
 8016f7c:	b538      	push	{r3, r4, r5, lr}
 8016f7e:	4d06      	ldr	r5, [pc, #24]	@ (8016f98 <_sbrk_r+0x1c>)
 8016f80:	2300      	movs	r3, #0
 8016f82:	4604      	mov	r4, r0
 8016f84:	4608      	mov	r0, r1
 8016f86:	602b      	str	r3, [r5, #0]
 8016f88:	f7ea fd0e 	bl	80019a8 <_sbrk>
 8016f8c:	1c43      	adds	r3, r0, #1
 8016f8e:	d102      	bne.n	8016f96 <_sbrk_r+0x1a>
 8016f90:	682b      	ldr	r3, [r5, #0]
 8016f92:	b103      	cbz	r3, 8016f96 <_sbrk_r+0x1a>
 8016f94:	6023      	str	r3, [r4, #0]
 8016f96:	bd38      	pop	{r3, r4, r5, pc}
 8016f98:	240500c0 	.word	0x240500c0

08016f9c <_realloc_r>:
 8016f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fa0:	4607      	mov	r7, r0
 8016fa2:	4614      	mov	r4, r2
 8016fa4:	460d      	mov	r5, r1
 8016fa6:	b921      	cbnz	r1, 8016fb2 <_realloc_r+0x16>
 8016fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fac:	4611      	mov	r1, r2
 8016fae:	f7ff b9e9 	b.w	8016384 <_malloc_r>
 8016fb2:	b92a      	cbnz	r2, 8016fc0 <_realloc_r+0x24>
 8016fb4:	f7ff f97a 	bl	80162ac <_free_r>
 8016fb8:	4625      	mov	r5, r4
 8016fba:	4628      	mov	r0, r5
 8016fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fc0:	f000 f81a 	bl	8016ff8 <_malloc_usable_size_r>
 8016fc4:	4284      	cmp	r4, r0
 8016fc6:	4606      	mov	r6, r0
 8016fc8:	d802      	bhi.n	8016fd0 <_realloc_r+0x34>
 8016fca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016fce:	d8f4      	bhi.n	8016fba <_realloc_r+0x1e>
 8016fd0:	4621      	mov	r1, r4
 8016fd2:	4638      	mov	r0, r7
 8016fd4:	f7ff f9d6 	bl	8016384 <_malloc_r>
 8016fd8:	4680      	mov	r8, r0
 8016fda:	b908      	cbnz	r0, 8016fe0 <_realloc_r+0x44>
 8016fdc:	4645      	mov	r5, r8
 8016fde:	e7ec      	b.n	8016fba <_realloc_r+0x1e>
 8016fe0:	42b4      	cmp	r4, r6
 8016fe2:	4622      	mov	r2, r4
 8016fe4:	4629      	mov	r1, r5
 8016fe6:	bf28      	it	cs
 8016fe8:	4632      	movcs	r2, r6
 8016fea:	f7ff f950 	bl	801628e <memcpy>
 8016fee:	4629      	mov	r1, r5
 8016ff0:	4638      	mov	r0, r7
 8016ff2:	f7ff f95b 	bl	80162ac <_free_r>
 8016ff6:	e7f1      	b.n	8016fdc <_realloc_r+0x40>

08016ff8 <_malloc_usable_size_r>:
 8016ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ffc:	1f18      	subs	r0, r3, #4
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	bfbc      	itt	lt
 8017002:	580b      	ldrlt	r3, [r1, r0]
 8017004:	18c0      	addlt	r0, r0, r3
 8017006:	4770      	bx	lr

08017008 <_init>:
 8017008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801700a:	bf00      	nop
 801700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801700e:	bc08      	pop	{r3}
 8017010:	469e      	mov	lr, r3
 8017012:	4770      	bx	lr

08017014 <_fini>:
 8017014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017016:	bf00      	nop
 8017018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801701a:	bc08      	pop	{r3}
 801701c:	469e      	mov	lr, r3
 801701e:	4770      	bx	lr
